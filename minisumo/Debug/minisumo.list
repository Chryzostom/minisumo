
minisumo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000971c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080098b0  080098b0  000198b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098d0  080098d0  000202e8  2**0
                  CONTENTS
  4 .ARM          00000008  080098d0  080098d0  000198d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098d8  080098d8  000202e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098d8  080098d8  000198d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098dc  080098dc  000198dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002e8  20000000  080098e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad0  200002e8  08009bc8  000202e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000db8  08009bc8  00020db8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192dc  00000000  00000000  00020318  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ca6  00000000  00000000  000395f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001410  00000000  00000000  0003c2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d0  00000000  00000000  0003d6b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000192bd  00000000  00000000  0003e980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010588  00000000  00000000  00057c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000978e8  00000000  00000000  000681c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ffaad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a8  00000000  00000000  000ffb28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200002e8 	.word	0x200002e8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08009898 	.word	0x08009898

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200002ec 	.word	0x200002ec
 80001d0:	08009898 	.word	0x08009898

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_Init+0x40>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <HAL_Init+0x40>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_Init+0x40>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 fd23 	bl	8000f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 f808 	bl	8000518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f008 fe28 	bl	800915c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023c00 	.word	0x40023c00

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x54>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x58>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000532:	fbb2 f3f3 	udiv	r3, r2, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fd3b 	bl	8000fb2 <HAL_SYSTICK_Config>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
 8000544:	e00e      	b.n	8000564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d80a      	bhi.n	8000562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054c:	2200      	movs	r2, #0
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	f04f 30ff 	mov.w	r0, #4294967295
 8000554:	f000 fd03 	bl	8000f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <HAL_InitTick+0x5c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055e:	2300      	movs	r3, #0
 8000560:	e000      	b.n	8000564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	200002e4 	.word	0x200002e4
 8000570:	20000004 	.word	0x20000004
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4413      	add	r3, r2
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_IncTick+0x24>)
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000004 	.word	0x20000004
 800059c:	20000314 	.word	0x20000314

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000314 	.word	0x20000314

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005c0:	f7ff ffee 	bl	80005a0 <HAL_GetTick>
 80005c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005d0:	d005      	beq.n	80005de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005d2:	4b09      	ldr	r3, [pc, #36]	; (80005f8 <HAL_Delay+0x40>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	461a      	mov	r2, r3
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	4413      	add	r3, r2
 80005dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005de:	bf00      	nop
 80005e0:	f7ff ffde 	bl	80005a0 <HAL_GetTick>
 80005e4:	4602      	mov	r2, r0
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	68fa      	ldr	r2, [r7, #12]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d8f7      	bhi.n	80005e0 <HAL_Delay+0x28>
  {
  }
}
 80005f0:	bf00      	nop
 80005f2:	3710      	adds	r7, #16
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	20000004 	.word	0x20000004

080005fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b00      	cmp	r3, #0
 800060c:	d101      	bne.n	8000612 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e033      	b.n	800067a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000616:	2b00      	cmp	r3, #0
 8000618:	d109      	bne.n	800062e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800061a:	6878      	ldr	r0, [r7, #4]
 800061c:	f008 f840 	bl	80086a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2200      	movs	r2, #0
 8000624:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	2200      	movs	r2, #0
 800062a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f003 0310 	and.w	r3, r3, #16
 8000636:	2b00      	cmp	r3, #0
 8000638:	d118      	bne.n	800066c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000642:	f023 0302 	bic.w	r3, r3, #2
 8000646:	f043 0202 	orr.w	r2, r3, #2
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800064e:	6878      	ldr	r0, [r7, #4]
 8000650:	f000 fa2c 	bl	8000aac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2200      	movs	r2, #0
 8000658:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800065e:	f023 0303 	bic.w	r3, r3, #3
 8000662:	f043 0201 	orr.w	r2, r3, #1
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	641a      	str	r2, [r3, #64]	; 0x40
 800066a:	e001      	b.n	8000670 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2200      	movs	r2, #0
 8000674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
	...

08000684 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000690:	2300      	movs	r3, #0
 8000692:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800069a:	2b01      	cmp	r3, #1
 800069c:	d101      	bne.n	80006a2 <HAL_ADC_Start_DMA+0x1e>
 800069e:	2302      	movs	r3, #2
 80006a0:	e0b1      	b.n	8000806 <HAL_ADC_Start_DMA+0x182>
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2201      	movs	r2, #1
 80006a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	689b      	ldr	r3, [r3, #8]
 80006b0:	f003 0301 	and.w	r3, r3, #1
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d018      	beq.n	80006ea <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689a      	ldr	r2, [r3, #8]
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f042 0201 	orr.w	r2, r2, #1
 80006c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80006c8:	4b51      	ldr	r3, [pc, #324]	; (8000810 <HAL_ADC_Start_DMA+0x18c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a51      	ldr	r2, [pc, #324]	; (8000814 <HAL_ADC_Start_DMA+0x190>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	0c9a      	lsrs	r2, r3, #18
 80006d4:	4613      	mov	r3, r2
 80006d6:	005b      	lsls	r3, r3, #1
 80006d8:	4413      	add	r3, r2
 80006da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006dc:	e002      	b.n	80006e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80006de:	693b      	ldr	r3, [r7, #16]
 80006e0:	3b01      	subs	r3, #1
 80006e2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80006e4:	693b      	ldr	r3, [r7, #16]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d1f9      	bne.n	80006de <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	689b      	ldr	r3, [r3, #8]
 80006f0:	f003 0301 	and.w	r3, r3, #1
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	f040 8085 	bne.w	8000804 <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000702:	f023 0301 	bic.w	r3, r3, #1
 8000706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000718:	2b00      	cmp	r3, #0
 800071a:	d007      	beq.n	800072c <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000724:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000734:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000738:	d106      	bne.n	8000748 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073e:	f023 0206 	bic.w	r2, r3, #6
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	645a      	str	r2, [r3, #68]	; 0x44
 8000746:	e002      	b.n	800074e <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	2200      	movs	r2, #0
 800074c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	2200      	movs	r2, #0
 8000752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <HAL_ADC_Start_DMA+0x194>)
 8000758:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075e:	4a2f      	ldr	r2, [pc, #188]	; (800081c <HAL_ADC_Start_DMA+0x198>)
 8000760:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000766:	4a2e      	ldr	r2, [pc, #184]	; (8000820 <HAL_ADC_Start_DMA+0x19c>)
 8000768:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800076e:	4a2d      	ldr	r2, [pc, #180]	; (8000824 <HAL_ADC_Start_DMA+0x1a0>)
 8000770:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800077a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	685a      	ldr	r2, [r3, #4]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800078a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	689a      	ldr	r2, [r3, #8]
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800079a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	334c      	adds	r3, #76	; 0x4c
 80007a6:	4619      	mov	r1, r3
 80007a8:	68ba      	ldr	r2, [r7, #8]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	f000 fcbc 	bl	8001128 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	f003 031f 	and.w	r3, r3, #31
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d10f      	bne.n	80007dc <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	689b      	ldr	r3, [r3, #8]
 80007c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d11c      	bne.n	8000804 <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	689a      	ldr	r2, [r3, #8]
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	e013      	b.n	8000804 <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a11      	ldr	r2, [pc, #68]	; (8000828 <HAL_ADC_Start_DMA+0x1a4>)
 80007e2:	4293      	cmp	r3, r2
 80007e4:	d10e      	bne.n	8000804 <HAL_ADC_Start_DMA+0x180>
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d107      	bne.n	8000804 <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	689a      	ldr	r2, [r3, #8]
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000802:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200002e4 	.word	0x200002e4
 8000814:	431bde83 	.word	0x431bde83
 8000818:	40012300 	.word	0x40012300
 800081c:	08000ca5 	.word	0x08000ca5
 8000820:	08000d5f 	.word	0x08000d5f
 8000824:	08000d7b 	.word	0x08000d7b
 8000828:	40012000 	.word	0x40012000

0800082c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800085c:	bf00      	nop
 800085e:	370c      	adds	r7, #12
 8000860:	46bd      	mov	sp, r7
 8000862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000866:	4770      	bx	lr

08000868 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800087c:	2b01      	cmp	r3, #1
 800087e:	d101      	bne.n	8000884 <HAL_ADC_ConfigChannel+0x1c>
 8000880:	2302      	movs	r3, #2
 8000882:	e105      	b.n	8000a90 <HAL_ADC_ConfigChannel+0x228>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2201      	movs	r2, #1
 8000888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2b09      	cmp	r3, #9
 8000892:	d925      	bls.n	80008e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	68d9      	ldr	r1, [r3, #12]
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	b29b      	uxth	r3, r3
 80008a0:	461a      	mov	r2, r3
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	3b1e      	subs	r3, #30
 80008aa:	2207      	movs	r2, #7
 80008ac:	fa02 f303 	lsl.w	r3, r2, r3
 80008b0:	43da      	mvns	r2, r3
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	400a      	ands	r2, r1
 80008b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	68d9      	ldr	r1, [r3, #12]
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	689a      	ldr	r2, [r3, #8]
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	4618      	mov	r0, r3
 80008cc:	4603      	mov	r3, r0
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	4403      	add	r3, r0
 80008d2:	3b1e      	subs	r3, #30
 80008d4:	409a      	lsls	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	430a      	orrs	r2, r1
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	e022      	b.n	8000926 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	6919      	ldr	r1, [r3, #16]
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	461a      	mov	r2, r3
 80008ee:	4613      	mov	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	4413      	add	r3, r2
 80008f4:	2207      	movs	r2, #7
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	43da      	mvns	r2, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	400a      	ands	r2, r1
 8000902:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6919      	ldr	r1, [r3, #16]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	b29b      	uxth	r3, r3
 8000914:	4618      	mov	r0, r3
 8000916:	4603      	mov	r3, r0
 8000918:	005b      	lsls	r3, r3, #1
 800091a:	4403      	add	r3, r0
 800091c:	409a      	lsls	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	430a      	orrs	r2, r1
 8000924:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	2b06      	cmp	r3, #6
 800092c:	d824      	bhi.n	8000978 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	3b05      	subs	r3, #5
 8000940:	221f      	movs	r2, #31
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	43da      	mvns	r2, r3
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	400a      	ands	r2, r1
 800094e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	b29b      	uxth	r3, r3
 800095c:	4618      	mov	r0, r3
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685a      	ldr	r2, [r3, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	009b      	lsls	r3, r3, #2
 8000966:	4413      	add	r3, r2
 8000968:	3b05      	subs	r3, #5
 800096a:	fa00 f203 	lsl.w	r2, r0, r3
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	430a      	orrs	r2, r1
 8000974:	635a      	str	r2, [r3, #52]	; 0x34
 8000976:	e04c      	b.n	8000a12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000978:	683b      	ldr	r3, [r7, #0]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	2b0c      	cmp	r3, #12
 800097e:	d824      	bhi.n	80009ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	685a      	ldr	r2, [r3, #4]
 800098a:	4613      	mov	r3, r2
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	4413      	add	r3, r2
 8000990:	3b23      	subs	r3, #35	; 0x23
 8000992:	221f      	movs	r2, #31
 8000994:	fa02 f303 	lsl.w	r3, r2, r3
 8000998:	43da      	mvns	r2, r3
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	400a      	ands	r2, r1
 80009a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	685a      	ldr	r2, [r3, #4]
 80009b4:	4613      	mov	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	3b23      	subs	r3, #35	; 0x23
 80009bc:	fa00 f203 	lsl.w	r2, r0, r3
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	430a      	orrs	r2, r1
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
 80009c8:	e023      	b.n	8000a12 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	685a      	ldr	r2, [r3, #4]
 80009d4:	4613      	mov	r3, r2
 80009d6:	009b      	lsls	r3, r3, #2
 80009d8:	4413      	add	r3, r2
 80009da:	3b41      	subs	r3, #65	; 0x41
 80009dc:	221f      	movs	r2, #31
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43da      	mvns	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	400a      	ands	r2, r1
 80009ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	b29b      	uxth	r3, r3
 80009f8:	4618      	mov	r0, r3
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	4613      	mov	r3, r2
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	4413      	add	r3, r2
 8000a04:	3b41      	subs	r3, #65	; 0x41
 8000a06:	fa00 f203 	lsl.w	r2, r0, r3
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_ADC_ConfigChannel+0x234>)
 8000a14:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <HAL_ADC_ConfigChannel+0x238>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d109      	bne.n	8000a34 <HAL_ADC_ConfigChannel+0x1cc>
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b12      	cmp	r3, #18
 8000a26:	d105      	bne.n	8000a34 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_ADC_ConfigChannel+0x238>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d123      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x21e>
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b10      	cmp	r3, #16
 8000a44:	d003      	beq.n	8000a4e <HAL_ADC_ConfigChannel+0x1e6>
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	2b11      	cmp	r3, #17
 8000a4c:	d11b      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b10      	cmp	r3, #16
 8000a60:	d111      	bne.n	8000a86 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_ADC_ConfigChannel+0x23c>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_ADC_ConfigChannel+0x240>)
 8000a68:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6c:	0c9a      	lsrs	r2, r3, #18
 8000a6e:	4613      	mov	r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4413      	add	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000a78:	e002      	b.n	8000a80 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	3b01      	subs	r3, #1
 8000a7e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d1f9      	bne.n	8000a7a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000a8e:	2300      	movs	r3, #0
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3714      	adds	r7, #20
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	40012300 	.word	0x40012300
 8000aa0:	40012000 	.word	0x40012000
 8000aa4:	200002e4 	.word	0x200002e4
 8000aa8:	431bde83 	.word	0x431bde83

08000aac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ab4:	4b79      	ldr	r3, [pc, #484]	; (8000c9c <ADC_Init+0x1f0>)
 8000ab6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	685a      	ldr	r2, [r3, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ae0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6859      	ldr	r1, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	691b      	ldr	r3, [r3, #16]
 8000aec:	021a      	lsls	r2, r3, #8
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	430a      	orrs	r2, r1
 8000af4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6859      	ldr	r1, [r3, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	689a      	ldr	r2, [r3, #8]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	430a      	orrs	r2, r1
 8000b16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	689a      	ldr	r2, [r3, #8]
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	6899      	ldr	r1, [r3, #8]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68da      	ldr	r2, [r3, #12]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b3e:	4a58      	ldr	r2, [pc, #352]	; (8000ca0 <ADC_Init+0x1f4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d022      	beq.n	8000b8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	689a      	ldr	r2, [r3, #8]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6899      	ldr	r1, [r3, #8]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	430a      	orrs	r2, r1
 8000b64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6899      	ldr	r1, [r3, #8]
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	430a      	orrs	r2, r1
 8000b86:	609a      	str	r2, [r3, #8]
 8000b88:	e00f      	b.n	8000baa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	689a      	ldr	r2, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000ba8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f022 0202 	bic.w	r2, r2, #2
 8000bb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	6899      	ldr	r1, [r3, #8]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	7e1b      	ldrb	r3, [r3, #24]
 8000bc4:	005a      	lsls	r2, r3, #1
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d01b      	beq.n	8000c10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000be6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	685a      	ldr	r2, [r3, #4]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000bf6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	6859      	ldr	r1, [r3, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c02:	3b01      	subs	r3, #1
 8000c04:	035a      	lsls	r2, r3, #13
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	e007      	b.n	8000c20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	685a      	ldr	r2, [r3, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	69db      	ldr	r3, [r3, #28]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	051a      	lsls	r2, r3, #20
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	430a      	orrs	r2, r1
 8000c44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	689a      	ldr	r2, [r3, #8]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	6899      	ldr	r1, [r3, #8]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c62:	025a      	lsls	r2, r3, #9
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	689a      	ldr	r2, [r3, #8]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	6899      	ldr	r1, [r3, #8]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	029a      	lsls	r2, r3, #10
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	609a      	str	r2, [r3, #8]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	40012300 	.word	0x40012300
 8000ca0:	0f000001 	.word	0x0f000001

08000ca4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d13c      	bne.n	8000d38 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d12b      	bne.n	8000d30 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d127      	bne.n	8000d30 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d006      	beq.n	8000cfc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d119      	bne.n	8000d30 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f022 0220 	bic.w	r2, r2, #32
 8000d0a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d10:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d105      	bne.n	8000d30 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	f043 0201 	orr.w	r2, r3, #1
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d30:	68f8      	ldr	r0, [r7, #12]
 8000d32:	f7ff fd7b 	bl	800082c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d36:	e00e      	b.n	8000d56 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d003      	beq.n	8000d4c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f7ff fd85 	bl	8000854 <HAL_ADC_ErrorCallback>
}
 8000d4a:	e004      	b.n	8000d56 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	4798      	blx	r3
}
 8000d56:	bf00      	nop
 8000d58:	3710      	adds	r7, #16
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d6c:	68f8      	ldr	r0, [r7, #12]
 8000d6e:	f7ff fd67 	bl	8000840 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b084      	sub	sp, #16
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d86:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	2240      	movs	r2, #64	; 0x40
 8000d8c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	f043 0204 	orr.w	r2, r3, #4
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000d9a:	68f8      	ldr	r0, [r7, #12]
 8000d9c:	f7ff fd5a 	bl	8000854 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000da0:	bf00      	nop
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	f003 0307 	and.w	r3, r3, #7
 8000db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dbe:	68ba      	ldr	r2, [r7, #8]
 8000dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dda:	4a04      	ldr	r2, [pc, #16]	; (8000dec <__NVIC_SetPriorityGrouping+0x44>)
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	60d3      	str	r3, [r2, #12]
}
 8000de0:	bf00      	nop
 8000de2:	3714      	adds	r7, #20
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df4:	4b04      	ldr	r3, [pc, #16]	; (8000e08 <__NVIC_GetPriorityGrouping+0x18>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	0a1b      	lsrs	r3, r3, #8
 8000dfa:	f003 0307 	and.w	r3, r3, #7
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000ed00 	.word	0xe000ed00

08000e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db0b      	blt.n	8000e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	f003 021f 	and.w	r2, r3, #31
 8000e24:	4907      	ldr	r1, [pc, #28]	; (8000e44 <__NVIC_EnableIRQ+0x38>)
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	095b      	lsrs	r3, r3, #5
 8000e2c:	2001      	movs	r0, #1
 8000e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000e100 	.word	0xe000e100

08000e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	6039      	str	r1, [r7, #0]
 8000e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	db0a      	blt.n	8000e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	490c      	ldr	r1, [pc, #48]	; (8000e94 <__NVIC_SetPriority+0x4c>)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	0112      	lsls	r2, r2, #4
 8000e68:	b2d2      	uxtb	r2, r2
 8000e6a:	440b      	add	r3, r1
 8000e6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e70:	e00a      	b.n	8000e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	4908      	ldr	r1, [pc, #32]	; (8000e98 <__NVIC_SetPriority+0x50>)
 8000e78:	79fb      	ldrb	r3, [r7, #7]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	3b04      	subs	r3, #4
 8000e80:	0112      	lsls	r2, r2, #4
 8000e82:	b2d2      	uxtb	r2, r2
 8000e84:	440b      	add	r3, r1
 8000e86:	761a      	strb	r2, [r3, #24]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr
 8000e94:	e000e100 	.word	0xe000e100
 8000e98:	e000ed00 	.word	0xe000ed00

08000e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b089      	sub	sp, #36	; 0x24
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f1c3 0307 	rsb	r3, r3, #7
 8000eb6:	2b04      	cmp	r3, #4
 8000eb8:	bf28      	it	cs
 8000eba:	2304      	movcs	r3, #4
 8000ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3304      	adds	r3, #4
 8000ec2:	2b06      	cmp	r3, #6
 8000ec4:	d902      	bls.n	8000ecc <NVIC_EncodePriority+0x30>
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3b03      	subs	r3, #3
 8000eca:	e000      	b.n	8000ece <NVIC_EncodePriority+0x32>
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43da      	mvns	r2, r3
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	401a      	ands	r2, r3
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ee4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	fa01 f303 	lsl.w	r3, r1, r3
 8000eee:	43d9      	mvns	r1, r3
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	4313      	orrs	r3, r2
         );
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3724      	adds	r7, #36	; 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f14:	d301      	bcc.n	8000f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f16:	2301      	movs	r3, #1
 8000f18:	e00f      	b.n	8000f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <SysTick_Config+0x40>)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f22:	210f      	movs	r1, #15
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	f7ff ff8e 	bl	8000e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <SysTick_Config+0x40>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f32:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <SysTick_Config+0x40>)
 8000f34:	2207      	movs	r2, #7
 8000f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	e000e010 	.word	0xe000e010

08000f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff29 	bl	8000da8 <__NVIC_SetPriorityGrouping>
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}

08000f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f5e:	b580      	push	{r7, lr}
 8000f60:	b086      	sub	sp, #24
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f70:	f7ff ff3e 	bl	8000df0 <__NVIC_GetPriorityGrouping>
 8000f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	68b9      	ldr	r1, [r7, #8]
 8000f7a:	6978      	ldr	r0, [r7, #20]
 8000f7c:	f7ff ff8e 	bl	8000e9c <NVIC_EncodePriority>
 8000f80:	4602      	mov	r2, r0
 8000f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f86:	4611      	mov	r1, r2
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff ff5d 	bl	8000e48 <__NVIC_SetPriority>
}
 8000f8e:	bf00      	nop
 8000f90:	3718      	adds	r7, #24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff ff31 	bl	8000e0c <__NVIC_EnableIRQ>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ffa2 	bl	8000f04 <SysTick_Config>
 8000fc0:	4603      	mov	r3, r0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
	...

08000fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000fd8:	f7ff fae2 	bl	80005a0 <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d101      	bne.n	8000fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e099      	b.n	800111c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 0201 	bic.w	r2, r2, #1
 8001006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001008:	e00f      	b.n	800102a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800100a:	f7ff fac9 	bl	80005a0 <HAL_GetTick>
 800100e:	4602      	mov	r2, r0
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	1ad3      	subs	r3, r2, r3
 8001014:	2b05      	cmp	r3, #5
 8001016:	d908      	bls.n	800102a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2220      	movs	r2, #32
 800101c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e078      	b.n	800111c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	2b00      	cmp	r3, #0
 8001036:	d1e8      	bne.n	800100a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001040:	697a      	ldr	r2, [r7, #20]
 8001042:	4b38      	ldr	r3, [pc, #224]	; (8001124 <HAL_DMA_Init+0x158>)
 8001044:	4013      	ands	r3, r2
 8001046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	685a      	ldr	r2, [r3, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689b      	ldr	r3, [r3, #8]
 8001050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	691b      	ldr	r3, [r3, #16]
 800105c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800106e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a1b      	ldr	r3, [r3, #32]
 8001074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	4313      	orrs	r3, r2
 800107a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001080:	2b04      	cmp	r3, #4
 8001082:	d107      	bne.n	8001094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108c:	4313      	orrs	r3, r2
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	4313      	orrs	r3, r2
 8001092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	f023 0307 	bic.w	r3, r3, #7
 80010aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b0:	697a      	ldr	r2, [r7, #20]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ba:	2b04      	cmp	r3, #4
 80010bc:	d117      	bne.n	80010ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f000 fa6f 	bl	80015b4 <DMA_CheckFifoParam>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d008      	beq.n	80010ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2240      	movs	r2, #64	; 0x40
 80010e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010ea:	2301      	movs	r3, #1
 80010ec:	e016      	b.n	800111c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	697a      	ldr	r2, [r7, #20]
 80010f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 fa26 	bl	8001548 <DMA_CalcBaseAndBitshift>
 80010fc:	4603      	mov	r3, r0
 80010fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001104:	223f      	movs	r2, #63	; 0x3f
 8001106:	409a      	lsls	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	f010803f 	.word	0xf010803f

08001128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800113e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001146:	2b01      	cmp	r3, #1
 8001148:	d101      	bne.n	800114e <HAL_DMA_Start_IT+0x26>
 800114a:	2302      	movs	r3, #2
 800114c:	e040      	b.n	80011d0 <HAL_DMA_Start_IT+0xa8>
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	2201      	movs	r2, #1
 8001152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b01      	cmp	r3, #1
 8001160:	d12f      	bne.n	80011c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	2202      	movs	r2, #2
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	2200      	movs	r2, #0
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	68b9      	ldr	r1, [r7, #8]
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 f9b8 	bl	80014ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001180:	223f      	movs	r2, #63	; 0x3f
 8001182:	409a      	lsls	r2, r3
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0216 	orr.w	r2, r2, #22
 8001196:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0208 	orr.w	r2, r2, #8
 80011ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	e005      	b.n	80011ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2200      	movs	r2, #0
 80011c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011ca:	2302      	movs	r3, #2
 80011cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011e4:	4b92      	ldr	r3, [pc, #584]	; (8001430 <HAL_DMA_IRQHandler+0x258>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a92      	ldr	r2, [pc, #584]	; (8001434 <HAL_DMA_IRQHandler+0x25c>)
 80011ea:	fba2 2303 	umull	r2, r3, r2, r3
 80011ee:	0a9b      	lsrs	r3, r3, #10
 80011f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001202:	2208      	movs	r2, #8
 8001204:	409a      	lsls	r2, r3
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4013      	ands	r3, r2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d01a      	beq.n	8001244 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d013      	beq.n	8001244 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0204 	bic.w	r2, r2, #4
 800122a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2208      	movs	r2, #8
 8001232:	409a      	lsls	r2, r3
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800123c:	f043 0201 	orr.w	r2, r3, #1
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2201      	movs	r2, #1
 800124a:	409a      	lsls	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	4013      	ands	r3, r2
 8001250:	2b00      	cmp	r3, #0
 8001252:	d012      	beq.n	800127a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800125e:	2b00      	cmp	r3, #0
 8001260:	d00b      	beq.n	800127a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2201      	movs	r2, #1
 8001268:	409a      	lsls	r2, r3
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001272:	f043 0202 	orr.w	r2, r3, #2
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2204      	movs	r2, #4
 8001280:	409a      	lsls	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d012      	beq.n	80012b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d00b      	beq.n	80012b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	2204      	movs	r2, #4
 800129e:	409a      	lsls	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a8:	f043 0204 	orr.w	r2, r3, #4
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	2210      	movs	r2, #16
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4013      	ands	r3, r2
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d043      	beq.n	8001348 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0308 	and.w	r3, r3, #8
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d03c      	beq.n	8001348 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d2:	2210      	movs	r2, #16
 80012d4:	409a      	lsls	r2, r3
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d018      	beq.n	800131a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d108      	bne.n	8001308 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d024      	beq.n	8001348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	4798      	blx	r3
 8001306:	e01f      	b.n	8001348 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800130c:	2b00      	cmp	r3, #0
 800130e:	d01b      	beq.n	8001348 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	4798      	blx	r3
 8001318:	e016      	b.n	8001348 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001324:	2b00      	cmp	r3, #0
 8001326:	d107      	bne.n	8001338 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 0208 	bic.w	r2, r2, #8
 8001336:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2220      	movs	r2, #32
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 808e 	beq.w	8001476 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 0310 	and.w	r3, r3, #16
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 8086 	beq.w	8001476 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136e:	2220      	movs	r2, #32
 8001370:	409a      	lsls	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800137c:	b2db      	uxtb	r3, r3
 800137e:	2b05      	cmp	r3, #5
 8001380:	d136      	bne.n	80013f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 0216 	bic.w	r2, r2, #22
 8001390:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	695a      	ldr	r2, [r3, #20]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d103      	bne.n	80013b2 <HAL_DMA_IRQHandler+0x1da>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0208 	bic.w	r2, r2, #8
 80013c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c6:	223f      	movs	r2, #63	; 0x3f
 80013c8:	409a      	lsls	r2, r3
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d07d      	beq.n	80014e2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	4798      	blx	r3
        }
        return;
 80013ee:	e078      	b.n	80014e2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d01c      	beq.n	8001438 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001408:	2b00      	cmp	r3, #0
 800140a:	d108      	bne.n	800141e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	2b00      	cmp	r3, #0
 8001412:	d030      	beq.n	8001476 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	4798      	blx	r3
 800141c:	e02b      	b.n	8001476 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001422:	2b00      	cmp	r3, #0
 8001424:	d027      	beq.n	8001476 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	4798      	blx	r3
 800142e:	e022      	b.n	8001476 <HAL_DMA_IRQHandler+0x29e>
 8001430:	200002e4 	.word	0x200002e4
 8001434:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10f      	bne.n	8001466 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0210 	bic.w	r2, r2, #16
 8001454:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147a:	2b00      	cmp	r3, #0
 800147c:	d032      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d022      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2205      	movs	r2, #5
 800148e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 0201 	bic.w	r2, r2, #1
 80014a0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	3301      	adds	r3, #1
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d307      	bcc.n	80014be <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f2      	bne.n	80014a2 <HAL_DMA_IRQHandler+0x2ca>
 80014bc:	e000      	b.n	80014c0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014be:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	4798      	blx	r3
 80014e0:	e000      	b.n	80014e4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80014e2:	bf00      	nop
    }
  }
}
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop

080014ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
 80014f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001508:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b40      	cmp	r3, #64	; 0x40
 8001518:	d108      	bne.n	800152c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800152a:	e007      	b.n	800153c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68ba      	ldr	r2, [r7, #8]
 8001532:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
}
 800153c:	bf00      	nop
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3b10      	subs	r3, #16
 8001558:	4a14      	ldr	r2, [pc, #80]	; (80015ac <DMA_CalcBaseAndBitshift+0x64>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	091b      	lsrs	r3, r3, #4
 8001560:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <DMA_CalcBaseAndBitshift+0x68>)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4413      	add	r3, r2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d909      	bls.n	800158a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800157e:	f023 0303 	bic.w	r3, r3, #3
 8001582:	1d1a      	adds	r2, r3, #4
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	659a      	str	r2, [r3, #88]	; 0x58
 8001588:	e007      	b.n	800159a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	aaaaaaab 	.word	0xaaaaaaab
 80015b0:	080098b0 	.word	0x080098b0

080015b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015bc:	2300      	movs	r3, #0
 80015be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d11f      	bne.n	800160e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	2b03      	cmp	r3, #3
 80015d2:	d855      	bhi.n	8001680 <DMA_CheckFifoParam+0xcc>
 80015d4:	a201      	add	r2, pc, #4	; (adr r2, 80015dc <DMA_CheckFifoParam+0x28>)
 80015d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015da:	bf00      	nop
 80015dc:	080015ed 	.word	0x080015ed
 80015e0:	080015ff 	.word	0x080015ff
 80015e4:	080015ed 	.word	0x080015ed
 80015e8:	08001681 	.word	0x08001681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d045      	beq.n	8001684 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015fc:	e042      	b.n	8001684 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001602:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001606:	d13f      	bne.n	8001688 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800160c:	e03c      	b.n	8001688 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001616:	d121      	bne.n	800165c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d836      	bhi.n	800168c <DMA_CheckFifoParam+0xd8>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <DMA_CheckFifoParam+0x70>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	08001635 	.word	0x08001635
 8001628:	0800163b 	.word	0x0800163b
 800162c:	08001635 	.word	0x08001635
 8001630:	0800164d 	.word	0x0800164d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	73fb      	strb	r3, [r7, #15]
      break;
 8001638:	e02f      	b.n	800169a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d024      	beq.n	8001690 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800164a:	e021      	b.n	8001690 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001650:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001654:	d11e      	bne.n	8001694 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800165a:	e01b      	b.n	8001694 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b02      	cmp	r3, #2
 8001660:	d902      	bls.n	8001668 <DMA_CheckFifoParam+0xb4>
 8001662:	2b03      	cmp	r3, #3
 8001664:	d003      	beq.n	800166e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001666:	e018      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      break;
 800166c:	e015      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00e      	beq.n	8001698 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
      break;
 800167e:	e00b      	b.n	8001698 <DMA_CheckFifoParam+0xe4>
      break;
 8001680:	bf00      	nop
 8001682:	e00a      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      break;
 8001684:	bf00      	nop
 8001686:	e008      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      break;
 8001688:	bf00      	nop
 800168a:	e006      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      break;
 800168c:	bf00      	nop
 800168e:	e004      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      break;
 8001690:	bf00      	nop
 8001692:	e002      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      break;   
 8001694:	bf00      	nop
 8001696:	e000      	b.n	800169a <DMA_CheckFifoParam+0xe6>
      break;
 8001698:	bf00      	nop
    }
  } 
  
  return status; 
 800169a:	7bfb      	ldrb	r3, [r7, #15]
}
 800169c:	4618      	mov	r0, r3
 800169e:	3714      	adds	r7, #20
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b089      	sub	sp, #36	; 0x24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016be:	2300      	movs	r3, #0
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	e159      	b.n	8001978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016c4:	2201      	movs	r2, #1
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	429a      	cmp	r2, r3
 80016de:	f040 8148 	bne.w	8001972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d00b      	beq.n	8001702 <HAL_GPIO_Init+0x5a>
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f6:	2b11      	cmp	r3, #17
 80016f8:	d003      	beq.n	8001702 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	2b12      	cmp	r3, #18
 8001700:	d130      	bne.n	8001764 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 0201 	and.w	r2, r3, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4013      	ands	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b02      	cmp	r3, #2
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0xfc>
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b12      	cmp	r3, #18
 80017a2:	d123      	bne.n	80017ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	08da      	lsrs	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	3208      	adds	r2, #8
 80017ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	220f      	movs	r2, #15
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	691a      	ldr	r2, [r3, #16]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	08da      	lsrs	r2, r3, #3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3208      	adds	r2, #8
 80017e6:	69b9      	ldr	r1, [r7, #24]
 80017e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f003 0203 	and.w	r2, r3, #3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	4313      	orrs	r3, r2
 8001818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 80a2 	beq.w	8001972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b56      	ldr	r3, [pc, #344]	; (800198c <HAL_GPIO_Init+0x2e4>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	4a55      	ldr	r2, [pc, #340]	; (800198c <HAL_GPIO_Init+0x2e4>)
 8001838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800183c:	6453      	str	r3, [r2, #68]	; 0x44
 800183e:	4b53      	ldr	r3, [pc, #332]	; (800198c <HAL_GPIO_Init+0x2e4>)
 8001840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800184a:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	089b      	lsrs	r3, r3, #2
 8001850:	3302      	adds	r3, #2
 8001852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	220f      	movs	r2, #15
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	4013      	ands	r3, r2
 800186c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a48      	ldr	r2, [pc, #288]	; (8001994 <HAL_GPIO_Init+0x2ec>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d019      	beq.n	80018aa <HAL_GPIO_Init+0x202>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a47      	ldr	r2, [pc, #284]	; (8001998 <HAL_GPIO_Init+0x2f0>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d013      	beq.n	80018a6 <HAL_GPIO_Init+0x1fe>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a46      	ldr	r2, [pc, #280]	; (800199c <HAL_GPIO_Init+0x2f4>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d00d      	beq.n	80018a2 <HAL_GPIO_Init+0x1fa>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a45      	ldr	r2, [pc, #276]	; (80019a0 <HAL_GPIO_Init+0x2f8>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d007      	beq.n	800189e <HAL_GPIO_Init+0x1f6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a44      	ldr	r2, [pc, #272]	; (80019a4 <HAL_GPIO_Init+0x2fc>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_GPIO_Init+0x1f2>
 8001896:	2304      	movs	r3, #4
 8001898:	e008      	b.n	80018ac <HAL_GPIO_Init+0x204>
 800189a:	2307      	movs	r3, #7
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x204>
 800189e:	2303      	movs	r3, #3
 80018a0:	e004      	b.n	80018ac <HAL_GPIO_Init+0x204>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e002      	b.n	80018ac <HAL_GPIO_Init+0x204>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e000      	b.n	80018ac <HAL_GPIO_Init+0x204>
 80018aa:	2300      	movs	r3, #0
 80018ac:	69fa      	ldr	r2, [r7, #28]
 80018ae:	f002 0203 	and.w	r2, r2, #3
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	4093      	lsls	r3, r2
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018bc:	4934      	ldr	r1, [pc, #208]	; (8001990 <HAL_GPIO_Init+0x2e8>)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	089b      	lsrs	r3, r3, #2
 80018c2:	3302      	adds	r3, #2
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	43db      	mvns	r3, r3
 80018d4:	69ba      	ldr	r2, [r7, #24]
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d003      	beq.n	80018ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018ee:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80018f4:	4b2c      	ldr	r3, [pc, #176]	; (80019a8 <HAL_GPIO_Init+0x300>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d003      	beq.n	8001918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001918:	4a23      	ldr	r2, [pc, #140]	; (80019a8 <HAL_GPIO_Init+0x300>)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	43db      	mvns	r3, r3
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	4013      	ands	r3, r2
 800192c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001942:	4a19      	ldr	r2, [pc, #100]	; (80019a8 <HAL_GPIO_Init+0x300>)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_GPIO_Init+0x300>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	43db      	mvns	r3, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4013      	ands	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4313      	orrs	r3, r2
 800196a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800196c:	4a0e      	ldr	r2, [pc, #56]	; (80019a8 <HAL_GPIO_Init+0x300>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	61fb      	str	r3, [r7, #28]
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	2b0f      	cmp	r3, #15
 800197c:	f67f aea2 	bls.w	80016c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001980:	bf00      	nop
 8001982:	3724      	adds	r7, #36	; 0x24
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr
 800198c:	40023800 	.word	0x40023800
 8001990:	40013800 	.word	0x40013800
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40013c00 	.word	0x40013c00

080019ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b085      	sub	sp, #20
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	691a      	ldr	r2, [r3, #16]
 80019bc:	887b      	ldrh	r3, [r7, #2]
 80019be:	4013      	ands	r3, r2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d002      	beq.n	80019ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019c4:	2301      	movs	r3, #1
 80019c6:	73fb      	strb	r3, [r7, #15]
 80019c8:	e001      	b.n	80019ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019ca:	2300      	movs	r3, #0
 80019cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr

080019dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	460b      	mov	r3, r1
 80019e6:	807b      	strh	r3, [r7, #2]
 80019e8:	4613      	mov	r3, r2
 80019ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019ec:	787b      	ldrb	r3, [r7, #1]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	887a      	ldrh	r2, [r7, #2]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019f8:	e003      	b.n	8001a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019fa:	887b      	ldrh	r3, [r7, #2]
 80019fc:	041a      	lsls	r2, r3, #16
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	619a      	str	r2, [r3, #24]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
	...

08001a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e11f      	b.n	8001c62 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f006 ff90 	bl	800895c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2224      	movs	r2, #36	; 0x24
 8001a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f022 0201 	bic.w	r2, r2, #1
 8001a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a74:	f001 fb6a 	bl	800314c <HAL_RCC_GetPCLK1Freq>
 8001a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	4a7b      	ldr	r2, [pc, #492]	; (8001c6c <HAL_I2C_Init+0x25c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d807      	bhi.n	8001a94 <HAL_I2C_Init+0x84>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	4a7a      	ldr	r2, [pc, #488]	; (8001c70 <HAL_I2C_Init+0x260>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	bf94      	ite	ls
 8001a8c:	2301      	movls	r3, #1
 8001a8e:	2300      	movhi	r3, #0
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	e006      	b.n	8001aa2 <HAL_I2C_Init+0x92>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a77      	ldr	r2, [pc, #476]	; (8001c74 <HAL_I2C_Init+0x264>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	bf94      	ite	ls
 8001a9c:	2301      	movls	r3, #1
 8001a9e:	2300      	movhi	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e0db      	b.n	8001c62 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	4a72      	ldr	r2, [pc, #456]	; (8001c78 <HAL_I2C_Init+0x268>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0c9b      	lsrs	r3, r3, #18
 8001ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68ba      	ldr	r2, [r7, #8]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	4a64      	ldr	r2, [pc, #400]	; (8001c6c <HAL_I2C_Init+0x25c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d802      	bhi.n	8001ae4 <HAL_I2C_Init+0xd4>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	e009      	b.n	8001af8 <HAL_I2C_Init+0xe8>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001aea:	fb02 f303 	mul.w	r3, r2, r3
 8001aee:	4a63      	ldr	r2, [pc, #396]	; (8001c7c <HAL_I2C_Init+0x26c>)
 8001af0:	fba2 2303 	umull	r2, r3, r2, r3
 8001af4:	099b      	lsrs	r3, r3, #6
 8001af6:	3301      	adds	r3, #1
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	6812      	ldr	r2, [r2, #0]
 8001afc:	430b      	orrs	r3, r1
 8001afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	69db      	ldr	r3, [r3, #28]
 8001b06:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b0a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4956      	ldr	r1, [pc, #344]	; (8001c6c <HAL_I2C_Init+0x25c>)
 8001b14:	428b      	cmp	r3, r1
 8001b16:	d80d      	bhi.n	8001b34 <HAL_I2C_Init+0x124>
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	1e59      	subs	r1, r3, #1
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b26:	3301      	adds	r3, #1
 8001b28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b2c:	2b04      	cmp	r3, #4
 8001b2e:	bf38      	it	cc
 8001b30:	2304      	movcc	r3, #4
 8001b32:	e04f      	b.n	8001bd4 <HAL_I2C_Init+0x1c4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d111      	bne.n	8001b60 <HAL_I2C_Init+0x150>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1e58      	subs	r0, r3, #1
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6859      	ldr	r1, [r3, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	440b      	add	r3, r1
 8001b4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b4e:	3301      	adds	r3, #1
 8001b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf0c      	ite	eq
 8001b58:	2301      	moveq	r3, #1
 8001b5a:	2300      	movne	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	e012      	b.n	8001b86 <HAL_I2C_Init+0x176>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	0099      	lsls	r1, r3, #2
 8001b70:	440b      	add	r3, r1
 8001b72:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b76:	3301      	adds	r3, #1
 8001b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	bf0c      	ite	eq
 8001b80:	2301      	moveq	r3, #1
 8001b82:	2300      	movne	r3, #0
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <HAL_I2C_Init+0x17e>
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e022      	b.n	8001bd4 <HAL_I2C_Init+0x1c4>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10e      	bne.n	8001bb4 <HAL_I2C_Init+0x1a4>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e58      	subs	r0, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	440b      	add	r3, r1
 8001ba4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb2:	e00f      	b.n	8001bd4 <HAL_I2C_Init+0x1c4>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1e58      	subs	r0, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6859      	ldr	r1, [r3, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	0099      	lsls	r1, r3, #2
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	6809      	ldr	r1, [r1, #0]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	69da      	ldr	r2, [r3, #28]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6911      	ldr	r1, [r2, #16]
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68d2      	ldr	r2, [r2, #12]
 8001c0e:	4311      	orrs	r1, r2
 8001c10:	687a      	ldr	r2, [r7, #4]
 8001c12:	6812      	ldr	r2, [r2, #0]
 8001c14:	430b      	orrs	r3, r1
 8001c16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695a      	ldr	r2, [r3, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	699b      	ldr	r3, [r3, #24]
 8001c2a:	431a      	orrs	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0201 	orr.w	r2, r2, #1
 8001c42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3710      	adds	r7, #16
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	000186a0 	.word	0x000186a0
 8001c70:	001e847f 	.word	0x001e847f
 8001c74:	003d08ff 	.word	0x003d08ff
 8001c78:	431bde83 	.word	0x431bde83
 8001c7c:	10624dd3 	.word	0x10624dd3

08001c80 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	817b      	strh	r3, [r7, #10]
 8001c90:	4613      	mov	r3, r2
 8001c92:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c94:	f7fe fc84 	bl	80005a0 <HAL_GetTick>
 8001c98:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b20      	cmp	r3, #32
 8001ca4:	f040 80e0 	bne.w	8001e68 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2319      	movs	r3, #25
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4970      	ldr	r1, [pc, #448]	; (8001e74 <HAL_I2C_Master_Transmit+0x1f4>)
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 fc58 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e0d3      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_I2C_Master_Transmit+0x50>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e0cc      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d007      	beq.n	8001cf6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f042 0201 	orr.w	r2, r2, #1
 8001cf4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d04:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	2221      	movs	r2, #33	; 0x21
 8001d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2210      	movs	r2, #16
 8001d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	893a      	ldrh	r2, [r7, #8]
 8001d26:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	4a50      	ldr	r2, [pc, #320]	; (8001e78 <HAL_I2C_Master_Transmit+0x1f8>)
 8001d36:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001d38:	8979      	ldrh	r1, [r7, #10]
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	6a3a      	ldr	r2, [r7, #32]
 8001d3e:	68f8      	ldr	r0, [r7, #12]
 8001d40:	f000 fac2 	bl	80022c8 <I2C_MasterRequestWrite>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e08d      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d4e:	2300      	movs	r3, #0
 8001d50:	613b      	str	r3, [r7, #16]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	695b      	ldr	r3, [r3, #20]
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d64:	e066      	b.n	8001e34 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	6a39      	ldr	r1, [r7, #32]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f000 fcd2 	bl	8002714 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00d      	beq.n	8001d92 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d107      	bne.n	8001d8e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e06b      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d96:	781a      	ldrb	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	3b01      	subs	r3, #1
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29a      	uxth	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	f003 0304 	and.w	r3, r3, #4
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d11b      	bne.n	8001e08 <HAL_I2C_Master_Transmit+0x188>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d017      	beq.n	8001e08 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ddc:	781a      	ldrb	r2, [r3, #0]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e08:	697a      	ldr	r2, [r7, #20]
 8001e0a:	6a39      	ldr	r1, [r7, #32]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 fcc2 	bl	8002796 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d00d      	beq.n	8001e34 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	681a      	ldr	r2, [r3, #0]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e2e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01a      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d194      	bne.n	8001d66 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	2220      	movs	r2, #32
 8001e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2200      	movs	r2, #0
 8001e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3718      	adds	r7, #24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	00100002 	.word	0x00100002
 8001e78:	ffff0000 	.word	0xffff0000

08001e7c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08c      	sub	sp, #48	; 0x30
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	461a      	mov	r2, r3
 8001e88:	460b      	mov	r3, r1
 8001e8a:	817b      	strh	r3, [r7, #10]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7fe fb86 	bl	80005a0 <HAL_GetTick>
 8001e94:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	f040 820b 	bne.w	80022ba <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	2319      	movs	r3, #25
 8001eaa:	2201      	movs	r2, #1
 8001eac:	497c      	ldr	r1, [pc, #496]	; (80020a0 <HAL_I2C_Master_Receive+0x224>)
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 fb5a 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	e1fe      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_I2C_Master_Receive+0x50>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e1f7      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d007      	beq.n	8001ef2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f042 0201 	orr.w	r2, r2, #1
 8001ef0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f00:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2222      	movs	r2, #34	; 0x22
 8001f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2210      	movs	r2, #16
 8001f0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	893a      	ldrh	r2, [r7, #8]
 8001f22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	4a5c      	ldr	r2, [pc, #368]	; (80020a4 <HAL_I2C_Master_Receive+0x228>)
 8001f32:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001f34:	8979      	ldrh	r1, [r7, #10]
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 fa46 	bl	80023cc <I2C_MasterRequestRead>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d001      	beq.n	8001f4a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1b8      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d113      	bne.n	8001f7a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	623b      	str	r3, [r7, #32]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	623b      	str	r3, [r7, #32]
 8001f66:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	e18c      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d11b      	bne.n	8001fba <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f90:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f92:	2300      	movs	r3, #0
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	695b      	ldr	r3, [r3, #20]
 8001f9c:	61fb      	str	r3, [r7, #28]
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	61fb      	str	r3, [r7, #28]
 8001fa6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e16c      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d11b      	bne.n	8001ffa <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fe0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61bb      	str	r3, [r7, #24]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	61bb      	str	r3, [r7, #24]
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	e14c      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002008:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695b      	ldr	r3, [r3, #20]
 8002014:	617b      	str	r3, [r7, #20]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	699b      	ldr	r3, [r3, #24]
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002020:	e138      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002026:	2b03      	cmp	r3, #3
 8002028:	f200 80f1 	bhi.w	800220e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002030:	2b01      	cmp	r3, #1
 8002032:	d123      	bne.n	800207c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002034:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002036:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002038:	68f8      	ldr	r0, [r7, #12]
 800203a:	f000 fbed 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e139      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	691a      	ldr	r2, [r3, #16]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002052:	b2d2      	uxtb	r2, r2
 8002054:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002064:	3b01      	subs	r3, #1
 8002066:	b29a      	uxth	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29b      	uxth	r3, r3
 8002072:	3b01      	subs	r3, #1
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207a:	e10b      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002080:	2b02      	cmp	r3, #2
 8002082:	d14e      	bne.n	8002122 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	2200      	movs	r2, #0
 800208c:	4906      	ldr	r1, [pc, #24]	; (80020a8 <HAL_I2C_Master_Receive+0x22c>)
 800208e:	68f8      	ldr	r0, [r7, #12]
 8002090:	f000 fa6a 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d008      	beq.n	80020ac <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e10e      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
 800209e:	bf00      	nop
 80020a0:	00100002 	.word	0x00100002
 80020a4:	ffff0000 	.word	0xffff0000
 80020a8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691a      	ldr	r2, [r3, #16]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d8:	3b01      	subs	r3, #1
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	691a      	ldr	r2, [r3, #16]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	b2d2      	uxtb	r2, r2
 80020fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800210a:	3b01      	subs	r3, #1
 800210c:	b29a      	uxth	r2, r3
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002120:	e0b8      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	9300      	str	r3, [sp, #0]
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	2200      	movs	r2, #0
 800212a:	4966      	ldr	r1, [pc, #408]	; (80022c4 <HAL_I2C_Master_Receive+0x448>)
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fa1b 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0bf      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800214a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	691a      	ldr	r2, [r3, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215e:	1c5a      	adds	r2, r3, #1
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002168:	3b01      	subs	r3, #1
 800216a:	b29a      	uxth	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29b      	uxth	r3, r3
 8002176:	3b01      	subs	r3, #1
 8002178:	b29a      	uxth	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	2200      	movs	r2, #0
 8002186:	494f      	ldr	r1, [pc, #316]	; (80022c4 <HAL_I2C_Master_Receive+0x448>)
 8002188:	68f8      	ldr	r0, [r7, #12]
 800218a:	f000 f9ed 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e091      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	691a      	ldr	r2, [r3, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021b2:	b2d2      	uxtb	r2, r2
 80021b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021c4:	3b01      	subs	r3, #1
 80021c6:	b29a      	uxth	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002202:	b29b      	uxth	r3, r3
 8002204:	3b01      	subs	r3, #1
 8002206:	b29a      	uxth	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800220c:	e042      	b.n	8002294 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800220e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002210:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 fb00 	bl	8002818 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e04c      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	691a      	ldr	r2, [r3, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800222c:	b2d2      	uxtb	r2, r2
 800222e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	1c5a      	adds	r2, r3, #1
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800223e:	3b01      	subs	r3, #1
 8002240:	b29a      	uxth	r2, r3
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224a:	b29b      	uxth	r3, r3
 800224c:	3b01      	subs	r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	695b      	ldr	r3, [r3, #20]
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	2b04      	cmp	r3, #4
 8002260:	d118      	bne.n	8002294 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	691a      	ldr	r2, [r3, #16]
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800227e:	3b01      	subs	r3, #1
 8002280:	b29a      	uxth	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f aec2 	bne.w	8002022 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2220      	movs	r2, #32
 80022a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2200      	movs	r2, #0
 80022aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022b6:	2300      	movs	r3, #0
 80022b8:	e000      	b.n	80022bc <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80022ba:	2302      	movs	r3, #2
  }
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3728      	adds	r7, #40	; 0x28
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	00010004 	.word	0x00010004

080022c8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b088      	sub	sp, #32
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	607a      	str	r2, [r7, #4]
 80022d2:	603b      	str	r3, [r7, #0]
 80022d4:	460b      	mov	r3, r1
 80022d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022dc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d006      	beq.n	80022f2 <I2C_MasterRequestWrite+0x2a>
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d003      	beq.n	80022f2 <I2C_MasterRequestWrite+0x2a>
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022f0:	d108      	bne.n	8002304 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	e00b      	b.n	800231c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	2b12      	cmp	r3, #18
 800230a:	d107      	bne.n	800231c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800231a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f91d 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00d      	beq.n	8002350 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002342:	d103      	bne.n	800234c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e035      	b.n	80023bc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	691b      	ldr	r3, [r3, #16]
 8002354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002358:	d108      	bne.n	800236c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235a:	897b      	ldrh	r3, [r7, #10]
 800235c:	b2db      	uxtb	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002368:	611a      	str	r2, [r3, #16]
 800236a:	e01b      	b.n	80023a4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800236c:	897b      	ldrh	r3, [r7, #10]
 800236e:	11db      	asrs	r3, r3, #7
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f003 0306 	and.w	r3, r3, #6
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f063 030f 	orn	r3, r3, #15
 800237c:	b2da      	uxtb	r2, r3
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <I2C_MasterRequestWrite+0xfc>)
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f000 f943 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e010      	b.n	80023bc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800239a:	897b      	ldrh	r3, [r7, #10]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <I2C_MasterRequestWrite+0x100>)
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 f933 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	00010008 	.word	0x00010008
 80023c8:	00010002 	.word	0x00010002

080023cc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b088      	sub	sp, #32
 80023d0:	af02      	add	r7, sp, #8
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	603b      	str	r3, [r7, #0]
 80023d8:	460b      	mov	r3, r1
 80023da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023f0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	2b08      	cmp	r3, #8
 80023f6:	d006      	beq.n	8002406 <I2C_MasterRequestRead+0x3a>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d003      	beq.n	8002406 <I2C_MasterRequestRead+0x3a>
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002404:	d108      	bne.n	8002418 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e00b      	b.n	8002430 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	2b11      	cmp	r3, #17
 800241e:	d107      	bne.n	8002430 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800242e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f893 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00d      	beq.n	8002464 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002456:	d103      	bne.n	8002460 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e079      	b.n	8002558 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	691b      	ldr	r3, [r3, #16]
 8002468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246c:	d108      	bne.n	8002480 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800246e:	897b      	ldrh	r3, [r7, #10]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f043 0301 	orr.w	r3, r3, #1
 8002476:	b2da      	uxtb	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	e05f      	b.n	8002540 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002480:	897b      	ldrh	r3, [r7, #10]
 8002482:	11db      	asrs	r3, r3, #7
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f003 0306 	and.w	r3, r3, #6
 800248a:	b2db      	uxtb	r3, r3
 800248c:	f063 030f 	orn	r3, r3, #15
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	4930      	ldr	r1, [pc, #192]	; (8002560 <I2C_MasterRequestRead+0x194>)
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f000 f8b9 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e054      	b.n	8002558 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	4929      	ldr	r1, [pc, #164]	; (8002564 <I2C_MasterRequestRead+0x198>)
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f8a9 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e044      	b.n	8002558 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f831 	bl	8002568 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00d      	beq.n	8002528 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800251a:	d103      	bne.n	8002524 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002522:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e017      	b.n	8002558 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002528:	897b      	ldrh	r3, [r7, #10]
 800252a:	11db      	asrs	r3, r3, #7
 800252c:	b2db      	uxtb	r3, r3
 800252e:	f003 0306 	and.w	r3, r3, #6
 8002532:	b2db      	uxtb	r3, r3
 8002534:	f063 030e 	orn	r3, r3, #14
 8002538:	b2da      	uxtb	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <I2C_MasterRequestRead+0x198>)
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 f865 	bl	8002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3718      	adds	r7, #24
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	00010008 	.word	0x00010008
 8002564:	00010002 	.word	0x00010002

08002568 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	603b      	str	r3, [r7, #0]
 8002574:	4613      	mov	r3, r2
 8002576:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002578:	e025      	b.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002580:	d021      	beq.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002582:	f7fe f80d 	bl	80005a0 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	429a      	cmp	r2, r3
 8002590:	d302      	bcc.n	8002598 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d116      	bne.n	80025c6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f043 0220 	orr.w	r2, r3, #32
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e023      	b.n	800260e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0c1b      	lsrs	r3, r3, #16
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10d      	bne.n	80025ec <I2C_WaitOnFlagUntilTimeout+0x84>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	4013      	ands	r3, r2
 80025dc:	b29b      	uxth	r3, r3
 80025de:	2b00      	cmp	r3, #0
 80025e0:	bf0c      	ite	eq
 80025e2:	2301      	moveq	r3, #1
 80025e4:	2300      	movne	r3, #0
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	461a      	mov	r2, r3
 80025ea:	e00c      	b.n	8002606 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	699b      	ldr	r3, [r3, #24]
 80025f2:	43da      	mvns	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4013      	ands	r3, r2
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	bf0c      	ite	eq
 80025fe:	2301      	moveq	r3, #1
 8002600:	2300      	movne	r3, #0
 8002602:	b2db      	uxtb	r3, r3
 8002604:	461a      	mov	r2, r3
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	429a      	cmp	r2, r3
 800260a:	d0b6      	beq.n	800257a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b084      	sub	sp, #16
 800261a:	af00      	add	r7, sp, #0
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002624:	e051      	b.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002634:	d123      	bne.n	800267e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002644:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800264e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f043 0204 	orr.w	r2, r3, #4
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e046      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d021      	beq.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002686:	f7fd ff8b 	bl	80005a0 <HAL_GetTick>
 800268a:	4602      	mov	r2, r0
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	429a      	cmp	r2, r3
 8002694:	d302      	bcc.n	800269c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d116      	bne.n	80026ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2220      	movs	r2, #32
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f043 0220 	orr.w	r2, r3, #32
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e020      	b.n	800270c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	0c1b      	lsrs	r3, r3, #16
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d10c      	bne.n	80026ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	43da      	mvns	r2, r3
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	4013      	ands	r3, r2
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	bf14      	ite	ne
 80026e6:	2301      	movne	r3, #1
 80026e8:	2300      	moveq	r3, #0
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	e00b      	b.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	43da      	mvns	r2, r3
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4013      	ands	r3, r2
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d18d      	bne.n	8002626 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002720:	e02d      	b.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f8ce 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e02d      	b.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d021      	beq.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273a:	f7fd ff31 	bl	80005a0 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	68ba      	ldr	r2, [r7, #8]
 8002746:	429a      	cmp	r2, r3
 8002748:	d302      	bcc.n	8002750 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d116      	bne.n	800277e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2200      	movs	r2, #0
 8002754:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2220      	movs	r2, #32
 800275a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e007      	b.n	800278e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002788:	2b80      	cmp	r3, #128	; 0x80
 800278a:	d1ca      	bne.n	8002722 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027a2:	e02d      	b.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f88d 	bl	80028c4 <I2C_IsAcknowledgeFailed>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e02d      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d021      	beq.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027bc:	f7fd fef0 	bl	80005a0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	68ba      	ldr	r2, [r7, #8]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d302      	bcc.n	80027d2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d116      	bne.n	8002800 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e007      	b.n	8002810 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b04      	cmp	r3, #4
 800280c:	d1ca      	bne.n	80027a4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800280e:	2300      	movs	r3, #0
}
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002824:	e042      	b.n	80028ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d119      	bne.n	8002868 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0210 	mvn.w	r2, #16
 800283c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2220      	movs	r2, #32
 8002848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e029      	b.n	80028bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002868:	f7fd fe9a 	bl	80005a0 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	429a      	cmp	r2, r3
 8002876:	d302      	bcc.n	800287e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d116      	bne.n	80028ac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2200      	movs	r2, #0
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2220      	movs	r2, #32
 8002888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e007      	b.n	80028bc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	695b      	ldr	r3, [r3, #20]
 80028b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d1b5      	bne.n	8002826 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3710      	adds	r7, #16
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}

080028c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028da:	d11b      	bne.n	8002914 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2220      	movs	r2, #32
 80028f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	f043 0204 	orr.w	r2, r3, #4
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
	...

08002924 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e25b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0301 	and.w	r3, r3, #1
 800293e:	2b00      	cmp	r3, #0
 8002940:	d075      	beq.n	8002a2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002942:	4ba3      	ldr	r3, [pc, #652]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
 800294a:	2b04      	cmp	r3, #4
 800294c:	d00c      	beq.n	8002968 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800294e:	4ba0      	ldr	r3, [pc, #640]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002956:	2b08      	cmp	r3, #8
 8002958:	d112      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b9d      	ldr	r3, [pc, #628]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002966:	d10b      	bne.n	8002980 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002968:	4b99      	ldr	r3, [pc, #612]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d05b      	beq.n	8002a2c <HAL_RCC_OscConfig+0x108>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d157      	bne.n	8002a2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e236      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d106      	bne.n	8002998 <HAL_RCC_OscConfig+0x74>
 800298a:	4b91      	ldr	r3, [pc, #580]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a90      	ldr	r2, [pc, #576]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e01d      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a0:	d10c      	bne.n	80029bc <HAL_RCC_OscConfig+0x98>
 80029a2:	4b8b      	ldr	r3, [pc, #556]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a8a      	ldr	r2, [pc, #552]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029ac:	6013      	str	r3, [r2, #0]
 80029ae:	4b88      	ldr	r3, [pc, #544]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a87      	ldr	r2, [pc, #540]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e00b      	b.n	80029d4 <HAL_RCC_OscConfig+0xb0>
 80029bc:	4b84      	ldr	r3, [pc, #528]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a83      	ldr	r2, [pc, #524]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c6:	6013      	str	r3, [r2, #0]
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a80      	ldr	r2, [pc, #512]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029dc:	f7fd fde0 	bl	80005a0 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e008      	b.n	80029f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fd fddc 	bl	80005a0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b64      	cmp	r3, #100	; 0x64
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e1fb      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	4b76      	ldr	r3, [pc, #472]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0f0      	beq.n	80029e4 <HAL_RCC_OscConfig+0xc0>
 8002a02:	e014      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a04:	f7fd fdcc 	bl	80005a0 <HAL_GetTick>
 8002a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0a:	e008      	b.n	8002a1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a0c:	f7fd fdc8 	bl	80005a0 <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	2b64      	cmp	r3, #100	; 0x64
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e1e7      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	4b6c      	ldr	r3, [pc, #432]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f0      	bne.n	8002a0c <HAL_RCC_OscConfig+0xe8>
 8002a2a:	e000      	b.n	8002a2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d063      	beq.n	8002b02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a3a:	4b65      	ldr	r3, [pc, #404]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f003 030c 	and.w	r3, r3, #12
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a46:	4b62      	ldr	r3, [pc, #392]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d11c      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d116      	bne.n	8002a8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a5e:	4b5c      	ldr	r3, [pc, #368]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d005      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e1bb      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a76:	4b56      	ldr	r3, [pc, #344]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	4952      	ldr	r1, [pc, #328]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d020      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a94:	4b4f      	ldr	r3, [pc, #316]	; (8002bd4 <HAL_RCC_OscConfig+0x2b0>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9a:	f7fd fd81 	bl	80005a0 <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fd fd7d 	bl	80005a0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e19c      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ab4:	4b46      	ldr	r3, [pc, #280]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	691b      	ldr	r3, [r3, #16]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	4940      	ldr	r1, [pc, #256]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	600b      	str	r3, [r1, #0]
 8002ad4:	e015      	b.n	8002b02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ad6:	4b3f      	ldr	r3, [pc, #252]	; (8002bd4 <HAL_RCC_OscConfig+0x2b0>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002adc:	f7fd fd60 	bl	80005a0 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ae4:	f7fd fd5c 	bl	80005a0 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e17b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002af6:	4b36      	ldr	r3, [pc, #216]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0308 	and.w	r3, r3, #8
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d030      	beq.n	8002b70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d016      	beq.n	8002b44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b16:	4b30      	ldr	r3, [pc, #192]	; (8002bd8 <HAL_RCC_OscConfig+0x2b4>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b1c:	f7fd fd40 	bl	80005a0 <HAL_GetTick>
 8002b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b22:	e008      	b.n	8002b36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b24:	f7fd fd3c 	bl	80005a0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	2b02      	cmp	r3, #2
 8002b30:	d901      	bls.n	8002b36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b32:	2303      	movs	r3, #3
 8002b34:	e15b      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b36:	4b26      	ldr	r3, [pc, #152]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0f0      	beq.n	8002b24 <HAL_RCC_OscConfig+0x200>
 8002b42:	e015      	b.n	8002b70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b44:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_OscConfig+0x2b4>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4a:	f7fd fd29 	bl	80005a0 <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b52:	f7fd fd25 	bl	80005a0 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e144      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f000 80a0 	beq.w	8002cbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10f      	bne.n	8002bae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b0f      	ldr	r3, [pc, #60]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	4a0e      	ldr	r2, [pc, #56]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002baa:	2301      	movs	r3, #1
 8002bac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bae:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d121      	bne.n	8002bfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_RCC_OscConfig+0x2b8>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bc6:	f7fd fceb 	bl	80005a0 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bcc:	e011      	b.n	8002bf2 <HAL_RCC_OscConfig+0x2ce>
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800
 8002bd4:	42470000 	.word	0x42470000
 8002bd8:	42470e80 	.word	0x42470e80
 8002bdc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be0:	f7fd fcde 	bl	80005a0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e0fd      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf2:	4b81      	ldr	r3, [pc, #516]	; (8002df8 <HAL_RCC_OscConfig+0x4d4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d0f0      	beq.n	8002be0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d106      	bne.n	8002c14 <HAL_RCC_OscConfig+0x2f0>
 8002c06:	4b7d      	ldr	r3, [pc, #500]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0a:	4a7c      	ldr	r2, [pc, #496]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6713      	str	r3, [r2, #112]	; 0x70
 8002c12:	e01c      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d10c      	bne.n	8002c36 <HAL_RCC_OscConfig+0x312>
 8002c1c:	4b77      	ldr	r3, [pc, #476]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a76      	ldr	r2, [pc, #472]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a73      	ldr	r2, [pc, #460]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	e00b      	b.n	8002c4e <HAL_RCC_OscConfig+0x32a>
 8002c36:	4b71      	ldr	r3, [pc, #452]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a70      	ldr	r2, [pc, #448]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c3c:	f023 0301 	bic.w	r3, r3, #1
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b6e      	ldr	r3, [pc, #440]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c48:	f023 0304 	bic.w	r3, r3, #4
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d015      	beq.n	8002c82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c56:	f7fd fca3 	bl	80005a0 <HAL_GetTick>
 8002c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c5c:	e00a      	b.n	8002c74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c5e:	f7fd fc9f 	bl	80005a0 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e0bc      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c74:	4b61      	ldr	r3, [pc, #388]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0ee      	beq.n	8002c5e <HAL_RCC_OscConfig+0x33a>
 8002c80:	e014      	b.n	8002cac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c82:	f7fd fc8d 	bl	80005a0 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c8a:	f7fd fc89 	bl	80005a0 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0a6      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca0:	4b56      	ldr	r3, [pc, #344]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ee      	bne.n	8002c8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d105      	bne.n	8002cbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb2:	4b52      	ldr	r3, [pc, #328]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a51      	ldr	r2, [pc, #324]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 8092 	beq.w	8002dec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cc8:	4b4c      	ldr	r3, [pc, #304]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f003 030c 	and.w	r3, r3, #12
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	d05c      	beq.n	8002d8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d141      	bne.n	8002d60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cdc:	4b48      	ldr	r3, [pc, #288]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce2:	f7fd fc5d 	bl	80005a0 <HAL_GetTick>
 8002ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ce8:	e008      	b.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cea:	f7fd fc59 	bl	80005a0 <HAL_GetTick>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	1ad3      	subs	r3, r2, r3
 8002cf4:	2b02      	cmp	r3, #2
 8002cf6:	d901      	bls.n	8002cfc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e078      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cfc:	4b3f      	ldr	r3, [pc, #252]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f0      	bne.n	8002cea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	69da      	ldr	r2, [r3, #28]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a1b      	ldr	r3, [r3, #32]
 8002d10:	431a      	orrs	r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d16:	019b      	lsls	r3, r3, #6
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d1e:	085b      	lsrs	r3, r3, #1
 8002d20:	3b01      	subs	r3, #1
 8002d22:	041b      	lsls	r3, r3, #16
 8002d24:	431a      	orrs	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2a:	061b      	lsls	r3, r3, #24
 8002d2c:	4933      	ldr	r1, [pc, #204]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d32:	4b33      	ldr	r3, [pc, #204]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002d34:	2201      	movs	r2, #1
 8002d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d38:	f7fd fc32 	bl	80005a0 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3e:	e008      	b.n	8002d52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d40:	f7fd fc2e 	bl	80005a0 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	2b02      	cmp	r3, #2
 8002d4c:	d901      	bls.n	8002d52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e04d      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d52:	4b2a      	ldr	r3, [pc, #168]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0f0      	beq.n	8002d40 <HAL_RCC_OscConfig+0x41c>
 8002d5e:	e045      	b.n	8002dec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <HAL_RCC_OscConfig+0x4dc>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7fd fc1b 	bl	80005a0 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d6e:	f7fd fc17 	bl	80005a0 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e036      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d80:	4b1e      	ldr	r3, [pc, #120]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d1f0      	bne.n	8002d6e <HAL_RCC_OscConfig+0x44a>
 8002d8c:	e02e      	b.n	8002dec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e029      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d9a:	4b18      	ldr	r3, [pc, #96]	; (8002dfc <HAL_RCC_OscConfig+0x4d8>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d11c      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d115      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d10d      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d106      	bne.n	8002de8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	40007000 	.word	0x40007000
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	42470060 	.word	0x42470060

08002e04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e0cc      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d90c      	bls.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e26:	4b65      	ldr	r3, [pc, #404]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2e:	4b63      	ldr	r3, [pc, #396]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 030f 	and.w	r3, r3, #15
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d001      	beq.n	8002e40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0b8      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d020      	beq.n	8002e8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e58:	4b59      	ldr	r3, [pc, #356]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4a58      	ldr	r2, [pc, #352]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e70:	4b53      	ldr	r3, [pc, #332]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a52      	ldr	r2, [pc, #328]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	494d      	ldr	r1, [pc, #308]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d044      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d107      	bne.n	8002eb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b47      	ldr	r3, [pc, #284]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d119      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e07f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b02      	cmp	r3, #2
 8002eb8:	d003      	beq.n	8002ec2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ebe:	2b03      	cmp	r3, #3
 8002ec0:	d107      	bne.n	8002ed2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ec2:	4b3f      	ldr	r3, [pc, #252]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d109      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e06f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed2:	4b3b      	ldr	r3, [pc, #236]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e067      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ee2:	4b37      	ldr	r3, [pc, #220]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f023 0203 	bic.w	r2, r3, #3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	4934      	ldr	r1, [pc, #208]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef4:	f7fd fb54 	bl	80005a0 <HAL_GetTick>
 8002ef8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efc:	f7fd fb50 	bl	80005a0 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e04f      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f003 020c 	and.w	r2, r3, #12
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d1eb      	bne.n	8002efc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f24:	4b25      	ldr	r3, [pc, #148]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d20c      	bcs.n	8002f4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b20      	ldr	r3, [pc, #128]	; (8002fbc <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e032      	b.n	8002fb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d008      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f58:	4b19      	ldr	r3, [pc, #100]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4916      	ldr	r1, [pc, #88]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f76:	4b12      	ldr	r3, [pc, #72]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	490e      	ldr	r1, [pc, #56]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f8a:	f000 f821 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4601      	mov	r1, r0
 8002f90:	4b0b      	ldr	r3, [pc, #44]	; (8002fc0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x1c0>)
 8002f9c:	5cd3      	ldrb	r3, [r2, r3]
 8002f9e:	fa21 f303 	lsr.w	r3, r1, r3
 8002fa2:	4a09      	ldr	r2, [pc, #36]	; (8002fc8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_RCC_ClockConfig+0x1c8>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fab4 	bl	8000518 <HAL_InitTick>

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	40023c00 	.word	0x40023c00
 8002fc0:	40023800 	.word	0x40023800
 8002fc4:	080098b8 	.word	0x080098b8
 8002fc8:	200002e4 	.word	0x200002e4
 8002fcc:	20000000 	.word	0x20000000

08002fd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	607b      	str	r3, [r7, #4]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fe6:	4b50      	ldr	r3, [pc, #320]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d007      	beq.n	8003002 <HAL_RCC_GetSysClockFreq+0x32>
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d008      	beq.n	8003008 <HAL_RCC_GetSysClockFreq+0x38>
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	f040 808d 	bne.w	8003116 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ffc:	4b4b      	ldr	r3, [pc, #300]	; (800312c <HAL_RCC_GetSysClockFreq+0x15c>)
 8002ffe:	60bb      	str	r3, [r7, #8]
       break;
 8003000:	e08c      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003002:	4b4b      	ldr	r3, [pc, #300]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003004:	60bb      	str	r3, [r7, #8]
      break;
 8003006:	e089      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003008:	4b47      	ldr	r3, [pc, #284]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003010:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003012:	4b45      	ldr	r3, [pc, #276]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d023      	beq.n	8003066 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301e:	4b42      	ldr	r3, [pc, #264]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	099b      	lsrs	r3, r3, #6
 8003024:	f04f 0400 	mov.w	r4, #0
 8003028:	f240 11ff 	movw	r1, #511	; 0x1ff
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	ea03 0501 	and.w	r5, r3, r1
 8003034:	ea04 0602 	and.w	r6, r4, r2
 8003038:	4a3d      	ldr	r2, [pc, #244]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 800303a:	fb02 f106 	mul.w	r1, r2, r6
 800303e:	2200      	movs	r2, #0
 8003040:	fb02 f205 	mul.w	r2, r2, r5
 8003044:	440a      	add	r2, r1
 8003046:	493a      	ldr	r1, [pc, #232]	; (8003130 <HAL_RCC_GetSysClockFreq+0x160>)
 8003048:	fba5 0101 	umull	r0, r1, r5, r1
 800304c:	1853      	adds	r3, r2, r1
 800304e:	4619      	mov	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	461a      	mov	r2, r3
 8003058:	4623      	mov	r3, r4
 800305a:	f7fd f8bb 	bl	80001d4 <__aeabi_uldivmod>
 800305e:	4603      	mov	r3, r0
 8003060:	460c      	mov	r4, r1
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	e049      	b.n	80030fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003066:	4b30      	ldr	r3, [pc, #192]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	099b      	lsrs	r3, r3, #6
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003074:	f04f 0200 	mov.w	r2, #0
 8003078:	ea03 0501 	and.w	r5, r3, r1
 800307c:	ea04 0602 	and.w	r6, r4, r2
 8003080:	4629      	mov	r1, r5
 8003082:	4632      	mov	r2, r6
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	f04f 0400 	mov.w	r4, #0
 800308c:	0154      	lsls	r4, r2, #5
 800308e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003092:	014b      	lsls	r3, r1, #5
 8003094:	4619      	mov	r1, r3
 8003096:	4622      	mov	r2, r4
 8003098:	1b49      	subs	r1, r1, r5
 800309a:	eb62 0206 	sbc.w	r2, r2, r6
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	f04f 0400 	mov.w	r4, #0
 80030a6:	0194      	lsls	r4, r2, #6
 80030a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030ac:	018b      	lsls	r3, r1, #6
 80030ae:	1a5b      	subs	r3, r3, r1
 80030b0:	eb64 0402 	sbc.w	r4, r4, r2
 80030b4:	f04f 0100 	mov.w	r1, #0
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	00e2      	lsls	r2, r4, #3
 80030be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030c2:	00d9      	lsls	r1, r3, #3
 80030c4:	460b      	mov	r3, r1
 80030c6:	4614      	mov	r4, r2
 80030c8:	195b      	adds	r3, r3, r5
 80030ca:	eb44 0406 	adc.w	r4, r4, r6
 80030ce:	f04f 0100 	mov.w	r1, #0
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	02a2      	lsls	r2, r4, #10
 80030d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80030dc:	0299      	lsls	r1, r3, #10
 80030de:	460b      	mov	r3, r1
 80030e0:	4614      	mov	r4, r2
 80030e2:	4618      	mov	r0, r3
 80030e4:	4621      	mov	r1, r4
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f04f 0400 	mov.w	r4, #0
 80030ec:	461a      	mov	r2, r3
 80030ee:	4623      	mov	r3, r4
 80030f0:	f7fd f870 	bl	80001d4 <__aeabi_uldivmod>
 80030f4:	4603      	mov	r3, r0
 80030f6:	460c      	mov	r4, r1
 80030f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <HAL_RCC_GetSysClockFreq+0x158>)
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	0c1b      	lsrs	r3, r3, #16
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	3301      	adds	r3, #1
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800310a:	68fa      	ldr	r2, [r7, #12]
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003112:	60bb      	str	r3, [r7, #8]
      break;
 8003114:	e002      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003116:	4b05      	ldr	r3, [pc, #20]	; (800312c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003118:	60bb      	str	r3, [r7, #8]
      break;
 800311a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800311c:	68bb      	ldr	r3, [r7, #8]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003126:	bf00      	nop
 8003128:	40023800 	.word	0x40023800
 800312c:	00f42400 	.word	0x00f42400
 8003130:	017d7840 	.word	0x017d7840

08003134 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003138:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_GetHCLKFreq+0x14>)
 800313a:	681b      	ldr	r3, [r3, #0]
}
 800313c:	4618      	mov	r0, r3
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	200002e4 	.word	0x200002e4

0800314c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003150:	f7ff fff0 	bl	8003134 <HAL_RCC_GetHCLKFreq>
 8003154:	4601      	mov	r1, r0
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	0a9b      	lsrs	r3, r3, #10
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	4a03      	ldr	r2, [pc, #12]	; (8003170 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003162:	5cd3      	ldrb	r3, [r2, r3]
 8003164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003168:	4618      	mov	r0, r3
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40023800 	.word	0x40023800
 8003170:	080098c8 	.word	0x080098c8

08003174 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d101      	bne.n	8003186 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e01d      	b.n	80031c2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f006 fab6 	bl	800970c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3304      	adds	r3, #4
 80031b0:	4619      	mov	r1, r3
 80031b2:	4610      	mov	r0, r2
 80031b4:	f000 f9ec 	bl	8003590 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3708      	adds	r7, #8
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fbe2 	bl	80039a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a10      	ldr	r2, [pc, #64]	; (800322c <HAL_TIM_PWM_Start+0x60>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d107      	bne.n	80031fe <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2b06      	cmp	r3, #6
 800320e:	d007      	beq.n	8003220 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0201 	orr.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	40010000 	.word	0x40010000

08003230 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b086      	sub	sp, #24
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d101      	bne.n	8003244 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	e083      	b.n	800334c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800324a:	b2db      	uxtb	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f006 f9dd 	bl	8009618 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2202      	movs	r2, #2
 8003262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	6812      	ldr	r2, [r2, #0]
 8003270:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003274:	f023 0307 	bic.w	r3, r3, #7
 8003278:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	3304      	adds	r3, #4
 8003282:	4619      	mov	r1, r3
 8003284:	4610      	mov	r0, r2
 8003286:	f000 f983 	bl	8003590 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b2:	f023 0303 	bic.w	r3, r3, #3
 80032b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	021b      	lsls	r3, r3, #8
 80032c2:	4313      	orrs	r3, r2
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80032d0:	f023 030c 	bic.w	r3, r3, #12
 80032d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	021b      	lsls	r3, r3, #8
 80032ec:	4313      	orrs	r3, r2
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	011a      	lsls	r2, r3, #4
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	031b      	lsls	r3, r3, #12
 8003300:	4313      	orrs	r3, r2
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	4313      	orrs	r3, r2
 8003306:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800330e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003316:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	685a      	ldr	r2, [r3, #4]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4313      	orrs	r3, r2
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2201      	movs	r2, #1
 8003346:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800334a:	2300      	movs	r3, #0
}
 800334c:	4618      	mov	r0, r3
 800334e:	3718      	adds	r7, #24
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b082      	sub	sp, #8
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d002      	beq.n	800336a <HAL_TIM_Encoder_Start_IT+0x16>
 8003364:	2b04      	cmp	r3, #4
 8003366:	d010      	beq.n	800338a <HAL_TIM_Encoder_Start_IT+0x36>
 8003368:	e01f      	b.n	80033aa <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2201      	movs	r2, #1
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f000 fb18 	bl	80039a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68da      	ldr	r2, [r3, #12]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0202 	orr.w	r2, r2, #2
 8003386:	60da      	str	r2, [r3, #12]
      break;
 8003388:	e02e      	b.n	80033e8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	2104      	movs	r1, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fb08 	bl	80039a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68da      	ldr	r2, [r3, #12]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0204 	orr.w	r2, r2, #4
 80033a6:	60da      	str	r2, [r3, #12]
      break;
 80033a8:	e01e      	b.n	80033e8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 faf8 	bl	80039a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2201      	movs	r2, #1
 80033be:	2104      	movs	r1, #4
 80033c0:	4618      	mov	r0, r3
 80033c2:	f000 faf1 	bl	80039a8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0202 	orr.w	r2, r2, #2
 80033d4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68da      	ldr	r2, [r3, #12]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0204 	orr.w	r2, r2, #4
 80033e4:	60da      	str	r2, [r3, #12]
      break;
 80033e6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
	...

08003404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d101      	bne.n	800341e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800341a:	2302      	movs	r3, #2
 800341c:	e0b4      	b.n	8003588 <HAL_TIM_PWM_ConfigChannel+0x184>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2202      	movs	r2, #2
 800342a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b0c      	cmp	r3, #12
 8003432:	f200 809f 	bhi.w	8003574 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003436:	a201      	add	r2, pc, #4	; (adr r2, 800343c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800343c:	08003471 	.word	0x08003471
 8003440:	08003575 	.word	0x08003575
 8003444:	08003575 	.word	0x08003575
 8003448:	08003575 	.word	0x08003575
 800344c:	080034b1 	.word	0x080034b1
 8003450:	08003575 	.word	0x08003575
 8003454:	08003575 	.word	0x08003575
 8003458:	08003575 	.word	0x08003575
 800345c:	080034f3 	.word	0x080034f3
 8003460:	08003575 	.word	0x08003575
 8003464:	08003575 	.word	0x08003575
 8003468:	08003575 	.word	0x08003575
 800346c:	08003533 	.word	0x08003533
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68b9      	ldr	r1, [r7, #8]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f90a 	bl	8003690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0208 	orr.w	r2, r2, #8
 800348a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699a      	ldr	r2, [r3, #24]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f022 0204 	bic.w	r2, r2, #4
 800349a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	6999      	ldr	r1, [r3, #24]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	430a      	orrs	r2, r1
 80034ac:	619a      	str	r2, [r3, #24]
      break;
 80034ae:	e062      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68b9      	ldr	r1, [r7, #8]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f000 f950 	bl	800375c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699a      	ldr	r2, [r3, #24]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	6999      	ldr	r1, [r3, #24]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	691b      	ldr	r3, [r3, #16]
 80034e6:	021a      	lsls	r2, r3, #8
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	619a      	str	r2, [r3, #24]
      break;
 80034f0:	e041      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f000 f99b 	bl	8003834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	69da      	ldr	r2, [r3, #28]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0208 	orr.w	r2, r2, #8
 800350c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	69da      	ldr	r2, [r3, #28]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0204 	bic.w	r2, r2, #4
 800351c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	69d9      	ldr	r1, [r3, #28]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	61da      	str	r2, [r3, #28]
      break;
 8003530:	e021      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68b9      	ldr	r1, [r7, #8]
 8003538:	4618      	mov	r0, r3
 800353a:	f000 f9e5 	bl	8003908 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	69da      	ldr	r2, [r3, #28]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	69da      	ldr	r2, [r3, #28]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69d9      	ldr	r1, [r3, #28]
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	021a      	lsls	r2, r3, #8
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	61da      	str	r2, [r3, #28]
      break;
 8003572:	e000      	b.n	8003576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003574:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2201      	movs	r2, #1
 800357a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a34      	ldr	r2, [pc, #208]	; (8003674 <TIM_Base_SetConfig+0xe4>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00f      	beq.n	80035c8 <TIM_Base_SetConfig+0x38>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ae:	d00b      	beq.n	80035c8 <TIM_Base_SetConfig+0x38>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a31      	ldr	r2, [pc, #196]	; (8003678 <TIM_Base_SetConfig+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d007      	beq.n	80035c8 <TIM_Base_SetConfig+0x38>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a30      	ldr	r2, [pc, #192]	; (800367c <TIM_Base_SetConfig+0xec>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d003      	beq.n	80035c8 <TIM_Base_SetConfig+0x38>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <TIM_Base_SetConfig+0xf0>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d108      	bne.n	80035da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a25      	ldr	r2, [pc, #148]	; (8003674 <TIM_Base_SetConfig+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d01b      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e8:	d017      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a22      	ldr	r2, [pc, #136]	; (8003678 <TIM_Base_SetConfig+0xe8>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a21      	ldr	r2, [pc, #132]	; (800367c <TIM_Base_SetConfig+0xec>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00f      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a20      	ldr	r2, [pc, #128]	; (8003680 <TIM_Base_SetConfig+0xf0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a1f      	ldr	r2, [pc, #124]	; (8003684 <TIM_Base_SetConfig+0xf4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a1e      	ldr	r2, [pc, #120]	; (8003688 <TIM_Base_SetConfig+0xf8>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <TIM_Base_SetConfig+0xfc>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a08      	ldr	r2, [pc, #32]	; (8003674 <TIM_Base_SetConfig+0xe4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	615a      	str	r2, [r3, #20]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	40010000 	.word	0x40010000
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800
 8003680:	40000c00 	.word	0x40000c00
 8003684:	40014000 	.word	0x40014000
 8003688:	40014400 	.word	0x40014400
 800368c:	40014800 	.word	0x40014800

08003690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003690:	b480      	push	{r7}
 8003692:	b087      	sub	sp, #28
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 0303 	bic.w	r3, r3, #3
 80036c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	f023 0302 	bic.w	r3, r3, #2
 80036d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	697a      	ldr	r2, [r7, #20]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a1c      	ldr	r2, [pc, #112]	; (8003758 <TIM_OC1_SetConfig+0xc8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a13      	ldr	r2, [pc, #76]	; (8003758 <TIM_OC1_SetConfig+0xc8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d111      	bne.n	8003732 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800371c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	621a      	str	r2, [r3, #32]
}
 800374c:	bf00      	nop
 800374e:	371c      	adds	r7, #28
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	40010000 	.word	0x40010000

0800375c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800375c:	b480      	push	{r7}
 800375e:	b087      	sub	sp, #28
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	f023 0210 	bic.w	r2, r3, #16
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800378a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003792:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	021b      	lsls	r3, r3, #8
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	4313      	orrs	r3, r2
 800379e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	f023 0320 	bic.w	r3, r3, #32
 80037a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <TIM_OC2_SetConfig+0xd4>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10d      	bne.n	80037d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	4a15      	ldr	r2, [pc, #84]	; (8003830 <TIM_OC2_SetConfig+0xd4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d113      	bne.n	8003808 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	4313      	orrs	r3, r2
 8003806:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	693a      	ldr	r2, [r7, #16]
 800380c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40010000 	.word	0x40010000

08003834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0303 	bic.w	r3, r3, #3
 800386a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	021b      	lsls	r3, r3, #8
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1d      	ldr	r2, [pc, #116]	; (8003904 <TIM_OC3_SetConfig+0xd0>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d10d      	bne.n	80038ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a14      	ldr	r2, [pc, #80]	; (8003904 <TIM_OC3_SetConfig+0xd0>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d113      	bne.n	80038de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	693a      	ldr	r2, [r7, #16]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	011b      	lsls	r3, r3, #4
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	4313      	orrs	r3, r2
 80038dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68fa      	ldr	r2, [r7, #12]
 80038e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	621a      	str	r2, [r3, #32]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	40010000 	.word	0x40010000

08003908 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800393e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	021b      	lsls	r3, r3, #8
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003952:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	031b      	lsls	r3, r3, #12
 800395a:	693a      	ldr	r2, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a10      	ldr	r2, [pc, #64]	; (80039a4 <TIM_OC4_SetConfig+0x9c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d109      	bne.n	800397c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800396e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	695b      	ldr	r3, [r3, #20]
 8003974:	019b      	lsls	r3, r3, #6
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	4313      	orrs	r3, r2
 800397a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	697a      	ldr	r2, [r7, #20]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40010000 	.word	0x40010000

080039a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 031f 	and.w	r3, r3, #31
 80039ba:	2201      	movs	r2, #1
 80039bc:	fa02 f303 	lsl.w	r3, r2, r3
 80039c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	43db      	mvns	r3, r3
 80039ca:	401a      	ands	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6a1a      	ldr	r2, [r3, #32]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 031f 	and.w	r3, r3, #31
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	fa01 f303 	lsl.w	r3, r1, r3
 80039e0:	431a      	orrs	r2, r3
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
	...

080039f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e050      	b.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68fa      	ldr	r2, [r7, #12]
 8003a44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1c      	ldr	r2, [pc, #112]	; (8003abc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d018      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d013      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a18      	ldr	r2, [pc, #96]	; (8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d00e      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d009      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d004      	beq.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a13      	ldr	r2, [pc, #76]	; (8003acc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d10c      	bne.n	8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a88:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40010000 	.word	0x40010000
 8003ac0:	40000400 	.word	0x40000400
 8003ac4:	40000800 	.word	0x40000800
 8003ac8:	40000c00 	.word	0x40000c00
 8003acc:	40014000 	.word	0x40014000

08003ad0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ada:	2300      	movs	r3, #0
 8003adc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8003ade:	6839      	ldr	r1, [r7, #0]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f001 fcce 	bl	8005482 <VL53L0X_get_offset_calibration_data_micro_meter>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8003aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <VL53L0X_SetDeviceAddress>:

/* End Group PAL General Functions */

/* Group PAL Init Functions */
VL53L0X_Error VL53L0X_SetDeviceAddress(VL53L0X_DEV Dev, uint8_t DeviceAddress)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b084      	sub	sp, #16
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_I2C_SLAVE_DEVICE_ADDRESS,
 8003b06:	78fb      	ldrb	r3, [r7, #3]
 8003b08:	085b      	lsrs	r3, r3, #1
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	218a      	movs	r1, #138	; 0x8a
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f004 fc35 	bl	8008380 <VL53L0X_WrByte>
 8003b16:	4603      	mov	r3, r0
 8003b18:	73fb      	strb	r3, [r7, #15]
		DeviceAddress / 2);

	LOG_FUNCTION_END(Status);
	return Status;
 8003b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3710      	adds	r7, #16
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
	...

08003b28 <VL53L0X_DataInit>:

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b096      	sub	sp, #88	; 0x58
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8003b36:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d107      	bne.n	8003b4e <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8003b3e:	2200      	movs	r2, #0
 8003b40:	2188      	movs	r1, #136	; 0x88
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f004 fc1c 	bl	8008380 <VL53L0X_WrByte>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b5c:	f8a3 2152 	strh.w	r2, [r3, #338]	; 0x152

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8003b66:	f8a3 2154 	strh.w	r2, [r3, #340]	; 0x154
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a9e      	ldr	r2, [pc, #632]	; (8003de8 <VL53L0X_DataInit+0x2c0>)
 8003b6e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a9d      	ldr	r2, [pc, #628]	; (8003dec <VL53L0X_DataInit+0x2c4>)
 8003b76:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003b80:	f107 0310 	add.w	r3, r7, #16
 8003b84:	4619      	mov	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fac2 	bl	8004110 <VL53L0X_GetDeviceParameters>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (Status == VL53L0X_ERROR_NONE) {
 8003b92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d112      	bne.n	8003bc0 <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	743b      	strb	r3, [r7, #16]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	747b      	strb	r3, [r7, #17]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f103 0410 	add.w	r4, r3, #16
 8003ba8:	f107 0510 	add.w	r5, r7, #16
 8003bac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003bb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003bb8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003bbc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2264      	movs	r2, #100	; 0x64
 8003bc4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f44f 7261 	mov.w	r2, #900	; 0x384
 8003bce:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003bd8:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8003be2:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150

	Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f004 fbc4 	bl	8008380 <VL53L0X_WrByte>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c00:	4313      	orrs	r3, r2
 8003c02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003c06:	2201      	movs	r2, #1
 8003c08:	21ff      	movs	r1, #255	; 0xff
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f004 fbb8 	bl	8008380 <VL53L0X_WrByte>
 8003c10:	4603      	mov	r3, r0
 8003c12:	461a      	mov	r2, r3
 8003c14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	2100      	movs	r1, #0
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f004 fbac 	bl	8008380 <VL53L0X_WrByte>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c30:	4313      	orrs	r3, r2
 8003c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_RdByte(Dev, 0x91, &StopVariable);
 8003c36:	f107 030f 	add.w	r3, r7, #15
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2191      	movs	r1, #145	; 0x91
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f004 fc20 	bl	8008484 <VL53L0X_RdByte>
 8003c44:	4603      	mov	r3, r0
 8003c46:	461a      	mov	r2, r3
 8003c48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	PALDevDataSet(Dev, StopVariable, StopVariable);
 8003c52:	7bfa      	ldrb	r2, [r7, #15]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f004 fb8e 	bl	8008380 <VL53L0X_WrByte>
 8003c64:	4603      	mov	r3, r0
 8003c66:	461a      	mov	r2, r3
 8003c68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003c72:	2200      	movs	r2, #0
 8003c74:	21ff      	movs	r1, #255	; 0xff
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f004 fb82 	bl	8008380 <VL53L0X_WrByte>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	461a      	mov	r2, r3
 8003c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	2180      	movs	r1, #128	; 0x80
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f004 fb76 	bl	8008380 <VL53L0X_WrByte>
 8003c94:	4603      	mov	r3, r0
 8003c96:	461a      	mov	r2, r3
 8003c98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca6:	e014      	b.n	8003cd2 <VL53L0X_DataInit+0x1aa>
		if (Status == VL53L0X_ERROR_NONE)
 8003ca8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d114      	bne.n	8003cda <VL53L0X_DataInit+0x1b2>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8003cb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	4619      	mov	r1, r3
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fd39 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003ccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cce:	3301      	adds	r3, #1
 8003cd0:	653b      	str	r3, [r7, #80]	; 0x50
 8003cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd4:	2b05      	cmp	r3, #5
 8003cd6:	dde7      	ble.n	8003ca8 <VL53L0X_DataInit+0x180>
 8003cd8:	e000      	b.n	8003cdc <VL53L0X_DataInit+0x1b4>
		else
			break;
 8003cda:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8003cdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <VL53L0X_DataInit+0x1cc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	2102      	movs	r1, #2
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fd21 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003cf4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d107      	bne.n	8003d0c <VL53L0X_DataInit+0x1e4>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	2103      	movs	r1, #3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fd15 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003d0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d107      	bne.n	8003d24 <VL53L0X_DataInit+0x1fc>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003d14:	2200      	movs	r2, #0
 8003d16:	2104      	movs	r1, #4
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 fd09 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8003d24:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d107      	bne.n	8003d3c <VL53L0X_DataInit+0x214>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	2105      	movs	r1, #5
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f000 fcfd 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
 8003d36:	4603      	mov	r3, r0
 8003d38:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8003d3c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d108      	bne.n	8003d56 <VL53L0X_DataInit+0x22e>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003d44:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8003d48:	2100      	movs	r1, #0
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 fda0 	bl	8004890 <VL53L0X_SetLimitCheckValue>
 8003d50:	4603      	mov	r3, r0
 8003d52:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003d56:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d108      	bne.n	8003d70 <VL53L0X_DataInit+0x248>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003d5e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d62:	2101      	movs	r1, #1
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 fd93 	bl	8004890 <VL53L0X_SetLimitCheckValue>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d108      	bne.n	8003d8a <VL53L0X_DataInit+0x262>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003d78:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8003d7c:	2102      	movs	r1, #2
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 fd86 	bl	8004890 <VL53L0X_SetLimitCheckValue>
 8003d84:	4603      	mov	r3, r0
 8003d86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003d8a:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d107      	bne.n	8003da2 <VL53L0X_DataInit+0x27a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8003d92:	2200      	movs	r2, #0
 8003d94:	2103      	movs	r1, #3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 fd7a 	bl	8004890 <VL53L0X_SetLimitCheckValue>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003da2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10f      	bne.n	8003dca <VL53L0X_DataInit+0x2a2>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	22ff      	movs	r2, #255	; 0xff
 8003dae:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8003db2:	22ff      	movs	r2, #255	; 0xff
 8003db4:	2101      	movs	r1, #1
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f004 fae2 	bl	8008380 <VL53L0X_WrByte>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8003dca:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d103      	bne.n	8003dda <VL53L0X_DataInit+0x2b2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8003dda:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3758      	adds	r7, #88	; 0x58
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bdb0      	pop	{r4, r5, r7, pc}
 8003de6:	bf00      	nop
 8003de8:	00016b85 	.word	0x00016b85
 8003dec:	000970a4 	.word	0x000970a4

08003df0 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8003df0:	b5b0      	push	{r4, r5, r7, lr}
 8003df2:	b09e      	sub	sp, #120	; 0x78
 8003df4:	af02      	add	r7, sp, #8
 8003df6:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8003dfe:	f107 031c 	add.w	r3, r7, #28
 8003e02:	2240      	movs	r2, #64	; 0x40
 8003e04:	2100      	movs	r1, #0
 8003e06:	4618      	mov	r0, r3
 8003e08:	f005 fd35 	bl	8009876 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8003e14:	2300      	movs	r3, #0
 8003e16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	uint32_t seqTimeoutMicroSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f002 fa6a 	bl	8006308 <VL53L0X_get_info_from_device>
 8003e34:	4603      	mov	r3, r0
 8003e36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8003e40:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8003e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8003e4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d80d      	bhi.n	8003e70 <VL53L0X_StaticInit+0x80>
 8003e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d102      	bne.n	8003e62 <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8003e5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d806      	bhi.n	8003e70 <VL53L0X_StaticInit+0x80>
 8003e62:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10e      	bne.n	8003e88 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8003e6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e6c:	2b0c      	cmp	r3, #12
 8003e6e:	d90b      	bls.n	8003e88 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8003e70:	f107 0218 	add.w	r2, r7, #24
 8003e74:	f107 0314 	add.w	r3, r7, #20
 8003e78:	4619      	mov	r1, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f001 fcfc 	bl	8005878 <VL53L0X_perform_ref_spad_management>
 8003e80:	4603      	mov	r3, r0
 8003e82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8003e86:	e009      	b.n	8003e9c <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8003e88:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f001 fefd 	bl	8005c90 <VL53L0X_set_reference_spads>
 8003e96:	4603      	mov	r3, r0
 8003e98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8003e9c:	4b94      	ldr	r3, [pc, #592]	; (80040f0 <VL53L0X_StaticInit+0x300>)
 8003e9e:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8003ea0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10f      	bne.n	8003ec8 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 8003eae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8003eb2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d104      	bne.n	8003ec4 <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8003ec0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ec2:	e001      	b.n	8003ec8 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8003ec4:	4b8a      	ldr	r3, [pc, #552]	; (80040f0 <VL53L0X_StaticInit+0x300>)
 8003ec6:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003ec8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d106      	bne.n	8003ede <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8003ed0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f003 fb34 	bl	8007540 <VL53L0X_load_tuning_settings>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003ede:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d10a      	bne.n	8003efc <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	9300      	str	r3, [sp, #0]
 8003eea:	2304      	movs	r3, #4
 8003eec:	2200      	movs	r2, #0
 8003eee:	2100      	movs	r1, #0
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f001 f8f5 	bl	80050e0 <VL53L0X_SetGpioConfig>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003efc:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d121      	bne.n	8003f48 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8003f04:	2201      	movs	r2, #1
 8003f06:	21ff      	movs	r1, #255	; 0xff
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f004 fa39 	bl	8008380 <VL53L0X_WrByte>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8003f14:	f107 031a 	add.w	r3, r7, #26
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2184      	movs	r1, #132	; 0x84
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f004 fadb 	bl	80084d8 <VL53L0X_RdWord>
 8003f22:	4603      	mov	r3, r0
 8003f24:	461a      	mov	r2, r3
 8003f26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003f30:	2200      	movs	r2, #0
 8003f32:	21ff      	movs	r1, #255	; 0xff
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f004 fa23 	bl	8008380 <VL53L0X_WrByte>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	461a      	mov	r2, r3
 8003f3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003f48:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d105      	bne.n	8003f5c <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003f50:	8b7b      	ldrh	r3, [r7, #26]
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	461a      	mov	r2, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003f5c:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d108      	bne.n	8003f76 <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8003f64:	f107 031c 	add.w	r3, r7, #28
 8003f68:	4619      	mov	r1, r3
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 f8d0 	bl	8004110 <VL53L0X_GetDeviceParameters>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8003f76:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d110      	bne.n	8003fa0 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8003f7e:	f107 0319 	add.w	r3, r7, #25
 8003f82:	4619      	mov	r1, r3
 8003f84:	6878      	ldr	r0, [r7, #4]
 8003f86:	f000 f9ae 	bl	80042e6 <VL53L0X_GetFractionEnable>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8003f90:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d103      	bne.n	8003fa0 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8003f98:	7e7a      	ldrb	r2, [r7, #25]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8003fa0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10e      	bne.n	8003fc6 <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f103 0410 	add.w	r4, r3, #16
 8003fae:	f107 051c 	add.w	r5, r7, #28
 8003fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8003fc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d111      	bne.n	8003ff2 <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8003fce:	f107 0319 	add.w	r3, r7, #25
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	2101      	movs	r1, #1
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f004 fa54 	bl	8008484 <VL53L0X_RdByte>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8003fe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d103      	bne.n	8003ff2 <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003fea:	7e7a      	ldrb	r2, [r7, #25]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8003ff2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d107      	bne.n	800400a <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9ce 	bl	80043a0 <VL53L0X_SetSequenceStepEnable>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800400a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8004012:	2200      	movs	r2, #0
 8004014:	2102      	movs	r1, #2
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f9c2 	bl	80043a0 <VL53L0X_SetSequenceStepEnable>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8004022:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004026:	2b00      	cmp	r3, #0
 8004028:	d103      	bne.n	8004032 <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2203      	movs	r2, #3
 800402e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8004032:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 800403a:	f107 0313 	add.w	r3, r7, #19
 800403e:	461a      	mov	r2, r3
 8004040:	2100      	movs	r1, #0
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f994 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8004048:	4603      	mov	r3, r0
 800404a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800404e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004052:	2b00      	cmp	r3, #0
 8004054:	d103      	bne.n	800405e <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004056:	7cfa      	ldrb	r2, [r7, #19]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800405e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8004062:	2b00      	cmp	r3, #0
 8004064:	d109      	bne.n	800407a <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8004066:	f107 0313 	add.w	r3, r7, #19
 800406a:	461a      	mov	r2, r3
 800406c:	2101      	movs	r1, #1
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f000 f97e 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800407a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800407e:	2b00      	cmp	r3, #0
 8004080:	d103      	bne.n	800408a <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8004082:	7cfa      	ldrb	r2, [r7, #19]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800408a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800408e:	2b00      	cmp	r3, #0
 8004090:	d109      	bne.n	80040a6 <VL53L0X_StaticInit+0x2b6>
		Status = get_sequence_step_timeout(
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	461a      	mov	r2, r3
 8004098:	2103      	movs	r1, #3
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f002 feb4 	bl	8006e08 <get_sequence_step_timeout>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040a6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d103      	bne.n	80040b6 <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80040ae:	68fa      	ldr	r2, [r7, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80040b6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d109      	bne.n	80040d2 <VL53L0X_StaticInit+0x2e2>
		Status = get_sequence_step_timeout(
 80040be:	f107 030c 	add.w	r3, r7, #12
 80040c2:	461a      	mov	r2, r3
 80040c4:	2104      	movs	r1, #4
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f002 fe9e 	bl	8006e08 <get_sequence_step_timeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMicroSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80040d2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMicroSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80040e2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3770      	adds	r7, #112	; 0x70
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bdb0      	pop	{r4, r5, r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000008 	.word	0x20000008

080040f4 <VL53L0X_WaitDeviceBooted>:

VL53L0X_Error VL53L0X_WaitDeviceBooted(VL53L0X_DEV Dev)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NOT_IMPLEMENTED;
 80040fc:	239d      	movs	r3, #157	; 0x9d
 80040fe:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	/* not implemented on VL53L0X */

	LOG_FUNCTION_END(Status);
	return Status;
 8004100:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004104:	4618      	mov	r0, r3
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b084      	sub	sp, #16
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800411a:	2300      	movs	r3, #0
 800411c:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	4619      	mov	r1, r3
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f8cc 	bl	80042c0 <VL53L0X_GetDeviceMode>
 8004128:	4603      	mov	r3, r0
 800412a:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800412c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d107      	bne.n	8004144 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	4619      	mov	r1, r3
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fa7c 	bl	8004638 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 8004140:	4603      	mov	r3, r0
 8004142:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8004144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d102      	bne.n	8004152 <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 8004152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d107      	bne.n	800416a <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	3310      	adds	r3, #16
 800415e:	4619      	mov	r1, r3
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 fab2 	bl	80046ca <VL53L0X_GetXTalkCompensationRateMegaCps>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 800416a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d107      	bne.n	8004182 <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	3314      	adds	r3, #20
 8004176:	4619      	mov	r1, r3
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f7ff fca9 	bl	8003ad0 <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800417e:	4603      	mov	r3, r0
 8004180:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 8004182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d134      	bne.n	80041f4 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800418a:	2300      	movs	r3, #0
 800418c:	60bb      	str	r3, [r7, #8]
 800418e:	e02a      	b.n	80041e6 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 8004190:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d12a      	bne.n	80041ee <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	b299      	uxth	r1, r3
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	3308      	adds	r3, #8
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	3304      	adds	r3, #4
 80041a8:	461a      	mov	r2, r3
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 fbd2 	bl	8004954 <VL53L0X_GetLimitCheckValue>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80041ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d117      	bne.n	80041f2 <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	b299      	uxth	r1, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	3318      	adds	r3, #24
 80041ca:	683a      	ldr	r2, [r7, #0]
 80041cc:	4413      	add	r3, r2
 80041ce:	461a      	mov	r2, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 fb39 	bl	8004848 <VL53L0X_GetLimitCheckEnable>
 80041d6:	4603      	mov	r3, r0
 80041d8:	461a      	mov	r2, r3
 80041da:	7bfb      	ldrb	r3, [r7, #15]
 80041dc:	4313      	orrs	r3, r2
 80041de:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	3301      	adds	r3, #1
 80041e4:	60bb      	str	r3, [r7, #8]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b05      	cmp	r3, #5
 80041ea:	ddd1      	ble.n	8004190 <VL53L0X_GetDeviceParameters+0x80>
 80041ec:	e002      	b.n	80041f4 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80041ee:	bf00      	nop
 80041f0:	e000      	b.n	80041f4 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80041f2:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80041f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d107      	bne.n	800420c <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	333c      	adds	r3, #60	; 0x3c
 8004200:	4619      	mov	r1, r3
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f000 fc34 	bl	8004a70 <VL53L0X_GetWrapAroundCheckEnable>
 8004208:	4603      	mov	r3, r0
 800420a:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 800420c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d107      	bne.n	8004224 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	3304      	adds	r3, #4
 8004218:	4619      	mov	r1, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f895 	bl	800434a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 8004220:	4603      	mov	r3, r0
 8004222:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004224:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3710      	adds	r7, #16
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800423c:	2300      	movs	r3, #0
 800423e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	2b15      	cmp	r3, #21
 8004244:	d832      	bhi.n	80042ac <VL53L0X_SetDeviceMode+0x7c>
 8004246:	a201      	add	r2, pc, #4	; (adr r2, 800424c <VL53L0X_SetDeviceMode+0x1c>)
 8004248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800424c:	080042a5 	.word	0x080042a5
 8004250:	080042a5 	.word	0x080042a5
 8004254:	080042ad 	.word	0x080042ad
 8004258:	080042a5 	.word	0x080042a5
 800425c:	080042ad 	.word	0x080042ad
 8004260:	080042ad 	.word	0x080042ad
 8004264:	080042ad 	.word	0x080042ad
 8004268:	080042ad 	.word	0x080042ad
 800426c:	080042ad 	.word	0x080042ad
 8004270:	080042ad 	.word	0x080042ad
 8004274:	080042ad 	.word	0x080042ad
 8004278:	080042ad 	.word	0x080042ad
 800427c:	080042ad 	.word	0x080042ad
 8004280:	080042ad 	.word	0x080042ad
 8004284:	080042ad 	.word	0x080042ad
 8004288:	080042ad 	.word	0x080042ad
 800428c:	080042ad 	.word	0x080042ad
 8004290:	080042ad 	.word	0x080042ad
 8004294:	080042ad 	.word	0x080042ad
 8004298:	080042ad 	.word	0x080042ad
 800429c:	080042a5 	.word	0x080042a5
 80042a0:	080042a5 	.word	0x080042a5
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	741a      	strb	r2, [r3, #16]
		break;
 80042aa:	e001      	b.n	80042b0 <VL53L0X_SetDeviceMode+0x80>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80042ac:	23f8      	movs	r3, #248	; 0xf8
 80042ae:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80042b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3714      	adds	r7, #20
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	7c1a      	ldrb	r2, [r3, #16]
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80042d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3714      	adds	r7, #20
 80042de:	46bd      	mov	sp, r7
 80042e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e4:	4770      	bx	lr

080042e6 <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b084      	sub	sp, #16
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	2109      	movs	r1, #9
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f004 f8c3 	bl	8008484 <VL53L0X_RdByte>
 80042fe:	4603      	mov	r3, r0
 8004300:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	b2da      	uxtb	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 8004318:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}

08004324 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800432e:	2300      	movs	r3, #0
 8004330:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8004332:	6839      	ldr	r1, [r7, #0]
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f002 ff71 	bl	800721c <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800433a:	4603      	mov	r3, r0
 800433c:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 800433e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b084      	sub	sp, #16
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
 8004352:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004354:	2300      	movs	r3, #0
 8004356:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 8004358:	6839      	ldr	r1, [r7, #0]
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f003 f83e 	bl	80073dc <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8004360:	4603      	mov	r3, r0
 8004362:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8004364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004368:	4618      	mov	r0, r3
 800436a:	3710      	adds	r7, #16
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <VL53L0X_GetVcselPulsePeriod>:
	return Status;
}

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	460b      	mov	r3, r1
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800437e:	2300      	movs	r3, #0
 8004380:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8004382:	7afb      	ldrb	r3, [r7, #11]
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	4619      	mov	r1, r3
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f002 ff10 	bl	80071ae <VL53L0X_get_vcsel_pulse_period>
 800438e:	4603      	mov	r3, r0
 8004390:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8004392:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004396:	4618      	mov	r0, r3
 8004398:	3718      	adds	r7, #24
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b086      	sub	sp, #24
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
 80043a8:	460b      	mov	r3, r1
 80043aa:	70fb      	strb	r3, [r7, #3]
 80043ac:	4613      	mov	r3, r2
 80043ae:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80043b8:	2300      	movs	r3, #0
 80043ba:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80043bc:	f107 030f 	add.w	r3, r7, #15
 80043c0:	461a      	mov	r2, r3
 80043c2:	2101      	movs	r1, #1
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f004 f85d 	bl	8008484 <VL53L0X_RdByte>
 80043ca:	4603      	mov	r3, r0
 80043cc:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80043ce:	7bfb      	ldrb	r3, [r7, #15]
 80043d0:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80043d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d15a      	bne.n	8004490 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80043da:	78bb      	ldrb	r3, [r7, #2]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d12b      	bne.n	8004438 <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80043e0:	78fb      	ldrb	r3, [r7, #3]
 80043e2:	2b04      	cmp	r3, #4
 80043e4:	d825      	bhi.n	8004432 <VL53L0X_SetSequenceStepEnable+0x92>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <VL53L0X_SetSequenceStepEnable+0x4c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004401 	.word	0x08004401
 80043f0:	0800440b 	.word	0x0800440b
 80043f4:	08004415 	.word	0x08004415
 80043f8:	0800441f 	.word	0x0800441f
 80043fc:	08004429 	.word	0x08004429
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8004400:	7dbb      	ldrb	r3, [r7, #22]
 8004402:	f043 0310 	orr.w	r3, r3, #16
 8004406:	75bb      	strb	r3, [r7, #22]
				break;
 8004408:	e043      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800440a:	7dbb      	ldrb	r3, [r7, #22]
 800440c:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8004410:	75bb      	strb	r3, [r7, #22]
				break;
 8004412:	e03e      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8004414:	7dbb      	ldrb	r3, [r7, #22]
 8004416:	f043 0304 	orr.w	r3, r3, #4
 800441a:	75bb      	strb	r3, [r7, #22]
				break;
 800441c:	e039      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 800441e:	7dbb      	ldrb	r3, [r7, #22]
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	75bb      	strb	r3, [r7, #22]
				break;
 8004426:	e034      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 8004428:	7dbb      	ldrb	r3, [r7, #22]
 800442a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800442e:	75bb      	strb	r3, [r7, #22]
				break;
 8004430:	e02f      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004432:	23fc      	movs	r3, #252	; 0xfc
 8004434:	75fb      	strb	r3, [r7, #23]
 8004436:	e02c      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 8004438:	78fb      	ldrb	r3, [r7, #3]
 800443a:	2b04      	cmp	r3, #4
 800443c:	d825      	bhi.n	800448a <VL53L0X_SetSequenceStepEnable+0xea>
 800443e:	a201      	add	r2, pc, #4	; (adr r2, 8004444 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8004440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004444:	08004459 	.word	0x08004459
 8004448:	08004463 	.word	0x08004463
 800444c:	0800446d 	.word	0x0800446d
 8004450:	08004477 	.word	0x08004477
 8004454:	08004481 	.word	0x08004481
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 8004458:	7dbb      	ldrb	r3, [r7, #22]
 800445a:	f023 0310 	bic.w	r3, r3, #16
 800445e:	75bb      	strb	r3, [r7, #22]
				break;
 8004460:	e017      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8004462:	7dbb      	ldrb	r3, [r7, #22]
 8004464:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8004468:	75bb      	strb	r3, [r7, #22]
				break;
 800446a:	e012      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 800446c:	7dbb      	ldrb	r3, [r7, #22]
 800446e:	f023 0304 	bic.w	r3, r3, #4
 8004472:	75bb      	strb	r3, [r7, #22]
				break;
 8004474:	e00d      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 8004476:	7dbb      	ldrb	r3, [r7, #22]
 8004478:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800447c:	75bb      	strb	r3, [r7, #22]
				break;
 800447e:	e008      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8004480:	7dbb      	ldrb	r3, [r7, #22]
 8004482:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004486:	75bb      	strb	r3, [r7, #22]
				break;
 8004488:	e003      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800448a:	23fc      	movs	r3, #252	; 0xfc
 800448c:	75fb      	strb	r3, [r7, #23]
 800448e:	e000      	b.n	8004492 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8004490:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	7dba      	ldrb	r2, [r7, #22]
 8004496:	429a      	cmp	r2, r3
 8004498:	d01e      	beq.n	80044d8 <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800449a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d107      	bne.n	80044b2 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80044a2:	7dbb      	ldrb	r3, [r7, #22]
 80044a4:	461a      	mov	r2, r3
 80044a6:	2101      	movs	r1, #1
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f003 ff69 	bl	8008380 <VL53L0X_WrByte>
 80044ae:	4603      	mov	r3, r0
 80044b0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80044b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d103      	bne.n	80044c2 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	7dba      	ldrb	r2, [r7, #22]
 80044be:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80044c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d106      	bne.n	80044d8 <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80044d0:	6939      	ldr	r1, [r7, #16]
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff ff26 	bl	8004324 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80044d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3718      	adds	r7, #24
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bd80      	pop	{r7, pc}

080044e4 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b087      	sub	sp, #28
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	60f8      	str	r0, [r7, #12]
 80044ec:	607b      	str	r3, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	72fb      	strb	r3, [r7, #11]
 80044f2:	4613      	mov	r3, r2
 80044f4:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044f6:	2300      	movs	r3, #0
 80044f8:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8004500:	7afb      	ldrb	r3, [r7, #11]
 8004502:	2b04      	cmp	r3, #4
 8004504:	d836      	bhi.n	8004574 <sequence_step_enabled+0x90>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <sequence_step_enabled+0x28>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	08004521 	.word	0x08004521
 8004510:	08004533 	.word	0x08004533
 8004514:	08004545 	.word	0x08004545
 8004518:	08004557 	.word	0x08004557
 800451c:	08004569 	.word	0x08004569
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8004520:	7abb      	ldrb	r3, [r7, #10]
 8004522:	111b      	asrs	r3, r3, #4
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0301 	and.w	r3, r3, #1
 800452a:	b2da      	uxtb	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	701a      	strb	r2, [r3, #0]
		break;
 8004530:	e022      	b.n	8004578 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8004532:	7abb      	ldrb	r3, [r7, #10]
 8004534:	10db      	asrs	r3, r3, #3
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	b2da      	uxtb	r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	701a      	strb	r2, [r3, #0]
		break;
 8004542:	e019      	b.n	8004578 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8004544:	7abb      	ldrb	r3, [r7, #10]
 8004546:	109b      	asrs	r3, r3, #2
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 0301 	and.w	r3, r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	701a      	strb	r2, [r3, #0]
		break;
 8004554:	e010      	b.n	8004578 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 8004556:	7abb      	ldrb	r3, [r7, #10]
 8004558:	119b      	asrs	r3, r3, #6
 800455a:	b2db      	uxtb	r3, r3
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	b2da      	uxtb	r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	701a      	strb	r2, [r3, #0]
		break;
 8004566:	e007      	b.n	8004578 <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 8004568:	7abb      	ldrb	r3, [r7, #10]
 800456a:	09db      	lsrs	r3, r3, #7
 800456c:	b2da      	uxtb	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	701a      	strb	r2, [r3, #0]
		break;
 8004572:	e001      	b.n	8004578 <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004574:	23fc      	movs	r3, #252	; 0xfc
 8004576:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004578:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800457c:	4618      	mov	r0, r3
 800457e:	371c      	adds	r7, #28
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr

08004588 <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800459a:	f107 030e 	add.w	r3, r7, #14
 800459e:	461a      	mov	r2, r3
 80045a0:	2101      	movs	r1, #1
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f003 ff6e 	bl	8008484 <VL53L0X_RdByte>
 80045a8:	4603      	mov	r3, r0
 80045aa:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80045ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80045b4:	7bba      	ldrb	r2, [r7, #14]
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2100      	movs	r1, #0
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7ff ff92 	bl	80044e4 <sequence_step_enabled>
 80045c0:	4603      	mov	r3, r0
 80045c2:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80045c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d108      	bne.n	80045de <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80045cc:	7bba      	ldrb	r2, [r7, #14]
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	3302      	adds	r3, #2
 80045d2:	2101      	movs	r1, #1
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f7ff ff85 	bl	80044e4 <sequence_step_enabled>
 80045da:	4603      	mov	r3, r0
 80045dc:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80045de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d108      	bne.n	80045f8 <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80045e6:	7bba      	ldrb	r2, [r7, #14]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	3301      	adds	r3, #1
 80045ec:	2102      	movs	r1, #2
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f7ff ff78 	bl	80044e4 <sequence_step_enabled>
 80045f4:	4603      	mov	r3, r0
 80045f6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80045f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d108      	bne.n	8004612 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8004600:	7bba      	ldrb	r2, [r7, #14]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	3303      	adds	r3, #3
 8004606:	2103      	movs	r1, #3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7ff ff6b 	bl	80044e4 <sequence_step_enabled>
 800460e:	4603      	mov	r3, r0
 8004610:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d108      	bne.n	800462c <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800461a:	7bba      	ldrb	r2, [r7, #14]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	3304      	adds	r3, #4
 8004620:	2104      	movs	r1, #4
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7ff ff5e 	bl	80044e4 <sequence_step_enabled>
 8004628:	4603      	mov	r3, r0
 800462a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800462c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004642:	2300      	movs	r3, #0
 8004644:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 8004646:	f107 030c 	add.w	r3, r7, #12
 800464a:	461a      	mov	r2, r3
 800464c:	21f8      	movs	r1, #248	; 0xf8
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f003 ff42 	bl	80084d8 <VL53L0X_RdWord>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 8004658:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d108      	bne.n	8004672 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8004660:	f107 0308 	add.w	r3, r7, #8
 8004664:	461a      	mov	r2, r3
 8004666:	2104      	movs	r1, #4
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f003 ff6d 	bl	8008548 <VL53L0X_RdDWord>
 800466e:	4603      	mov	r3, r0
 8004670:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004672:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10c      	bne.n	8004694 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800467a:	89bb      	ldrh	r3, [r7, #12]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	89ba      	ldrh	r2, [r7, #12]
 8004684:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004694:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	7f1b      	ldrb	r3, [r3, #28]
 80046b2:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	7bba      	ldrb	r2, [r7, #14]
 80046b8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80046ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80046d4:	2300      	movs	r3, #0
 80046d6:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 80046d8:	f107 030e 	add.w	r3, r7, #14
 80046dc:	461a      	mov	r2, r3
 80046de:	2120      	movs	r1, #32
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f003 fef9 	bl	80084d8 <VL53L0X_RdWord>
 80046e6:	4603      	mov	r3, r0
 80046e8:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80046ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d118      	bne.n	8004724 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80046f2:	89fb      	ldrh	r3, [r7, #14]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d109      	bne.n	800470c <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a1b      	ldr	r3, [r3, #32]
 80046fc:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	771a      	strb	r2, [r3, #28]
 800470a:	e00b      	b.n	8004724 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	693a      	ldr	r2, [r7, #16]
 800471c:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004724:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	460b      	mov	r3, r1
 800473a:	807b      	strh	r3, [r7, #2]
 800473c:	4613      	mov	r3, r2
 800473e:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004740:	2300      	movs	r3, #0
 8004742:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8004750:	887b      	ldrh	r3, [r7, #2]
 8004752:	2b05      	cmp	r3, #5
 8004754:	d902      	bls.n	800475c <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004756:	23fc      	movs	r3, #252	; 0xfc
 8004758:	75fb      	strb	r3, [r7, #23]
 800475a:	e05b      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 800475c:	787b      	ldrb	r3, [r7, #1]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800476a:	2301      	movs	r3, #1
 800476c:	73bb      	strb	r3, [r7, #14]
 800476e:	e00a      	b.n	8004786 <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004770:	887b      	ldrh	r3, [r7, #2]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	330c      	adds	r3, #12
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 8004786:	887b      	ldrh	r3, [r7, #2]
 8004788:	2b05      	cmp	r3, #5
 800478a:	d841      	bhi.n	8004810 <VL53L0X_SetLimitCheckEnable+0xe0>
 800478c:	a201      	add	r2, pc, #4	; (adr r2, 8004794 <VL53L0X_SetLimitCheckEnable+0x64>)
 800478e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004792:	bf00      	nop
 8004794:	080047ad 	.word	0x080047ad
 8004798:	080047b7 	.word	0x080047b7
 800479c:	080047cd 	.word	0x080047cd
 80047a0:	080047d7 	.word	0x080047d7
 80047a4:	080047e1 	.word	0x080047e1
 80047a8:	080047f9 	.word	0x080047f9

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	7bfa      	ldrb	r2, [r7, #15]
 80047b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 80047b4:	e02e      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	461a      	mov	r2, r3
 80047be:	2144      	movs	r1, #68	; 0x44
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f003 fe01 	bl	80083c8 <VL53L0X_WrWord>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]

			break;
 80047ca:	e023      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 80047d4:	e01e      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	7bfa      	ldrb	r2, [r7, #15]
 80047da:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80047de:	e019      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80047e0:	7bbb      	ldrb	r3, [r7, #14]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80047e6:	7b7b      	ldrb	r3, [r7, #13]
 80047e8:	22fe      	movs	r2, #254	; 0xfe
 80047ea:	2160      	movs	r1, #96	; 0x60
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f003 fe15 	bl	800841c <VL53L0X_UpdateByte>
 80047f2:	4603      	mov	r3, r0
 80047f4:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80047f6:	e00d      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80047f8:	7bbb      	ldrb	r3, [r7, #14]
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80047fe:	7b7b      	ldrb	r3, [r7, #13]
 8004800:	22ef      	movs	r2, #239	; 0xef
 8004802:	2160      	movs	r1, #96	; 0x60
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f003 fe09 	bl	800841c <VL53L0X_UpdateByte>
 800480a:	4603      	mov	r3, r0
 800480c:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 800480e:	e001      	b.n	8004814 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004810:	23fc      	movs	r3, #252	; 0xfc
 8004812:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004814:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d10f      	bne.n	800483c <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 800481c:	787b      	ldrb	r3, [r7, #1]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d106      	bne.n	8004830 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004822:	887b      	ldrh	r3, [r7, #2]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	4413      	add	r3, r2
 8004828:	2200      	movs	r2, #0
 800482a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800482e:	e005      	b.n	800483c <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8004830:	887b      	ldrh	r3, [r7, #2]
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	4413      	add	r3, r2
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800483c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 8004848:	b480      	push	{r7}
 800484a:	b087      	sub	sp, #28
 800484c:	af00      	add	r7, sp, #0
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	460b      	mov	r3, r1
 8004852:	607a      	str	r2, [r7, #4]
 8004854:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004856:	2300      	movs	r3, #0
 8004858:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800485a:	897b      	ldrh	r3, [r7, #10]
 800485c:	2b05      	cmp	r3, #5
 800485e:	d905      	bls.n	800486c <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004860:	23fc      	movs	r3, #252	; 0xfc
 8004862:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	701a      	strb	r2, [r3, #0]
 800486a:	e008      	b.n	800487e <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800486c:	897b      	ldrh	r3, [r7, #10]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004876:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	7dba      	ldrb	r2, [r7, #22]
 800487c:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800487e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
	...

08004890 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	460b      	mov	r3, r1
 800489a:	607a      	str	r2, [r7, #4]
 800489c:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800489e:	2300      	movs	r3, #0
 80048a0:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 80048a2:	897b      	ldrh	r3, [r7, #10]
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	4413      	add	r3, r2
 80048a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048ac:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 80048ae:	7dbb      	ldrb	r3, [r7, #22]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80048b4:	897b      	ldrh	r3, [r7, #10]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	330c      	adds	r3, #12
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	4413      	add	r3, r2
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	605a      	str	r2, [r3, #4]
 80048c2:	e040      	b.n	8004946 <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 80048c4:	897b      	ldrh	r3, [r7, #10]
 80048c6:	2b05      	cmp	r3, #5
 80048c8:	d830      	bhi.n	800492c <VL53L0X_SetLimitCheckValue+0x9c>
 80048ca:	a201      	add	r2, pc, #4	; (adr r2, 80048d0 <VL53L0X_SetLimitCheckValue+0x40>)
 80048cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048d0:	080048e9 	.word	0x080048e9
 80048d4:	080048f1 	.word	0x080048f1
 80048d8:	08004907 	.word	0x08004907
 80048dc:	0800490f 	.word	0x0800490f
 80048e0:	08004917 	.word	0x08004917
 80048e4:	08004917 	.word	0x08004917

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80048ee:	e01f      	b.n	8004930 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	461a      	mov	r2, r3
 80048f8:	2144      	movs	r1, #68	; 0x44
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f003 fd64 	bl	80083c8 <VL53L0X_WrWord>
 8004900:	4603      	mov	r3, r0
 8004902:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8004904:	e014      	b.n	8004930 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 800490c:	e010      	b.n	8004930 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8004914:	e00c      	b.n	8004930 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800491a:	b29b      	uxth	r3, r3
 800491c:	461a      	mov	r2, r3
 800491e:	2164      	movs	r1, #100	; 0x64
 8004920:	68f8      	ldr	r0, [r7, #12]
 8004922:	f003 fd51 	bl	80083c8 <VL53L0X_WrWord>
 8004926:	4603      	mov	r3, r0
 8004928:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 800492a:	e001      	b.n	8004930 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800492c:	23fc      	movs	r3, #252	; 0xfc
 800492e:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8004930:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004938:	897b      	ldrh	r3, [r7, #10]
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	330c      	adds	r3, #12
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004946:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3718      	adds	r7, #24
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop

08004954 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b088      	sub	sp, #32
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	460b      	mov	r3, r1
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004962:	2300      	movs	r3, #0
 8004964:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800496a:	897b      	ldrh	r3, [r7, #10]
 800496c:	2b05      	cmp	r3, #5
 800496e:	d847      	bhi.n	8004a00 <VL53L0X_GetLimitCheckValue+0xac>
 8004970:	a201      	add	r2, pc, #4	; (adr r2, 8004978 <VL53L0X_GetLimitCheckValue+0x24>)
 8004972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004976:	bf00      	nop
 8004978:	08004991 	.word	0x08004991
 800497c:	0800499d 	.word	0x0800499d
 8004980:	080049c3 	.word	0x080049c3
 8004984:	080049cf 	.word	0x080049cf
 8004988:	080049db 	.word	0x080049db
 800498c:	080049db 	.word	0x080049db

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004994:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8004996:	2300      	movs	r3, #0
 8004998:	77bb      	strb	r3, [r7, #30]
		break;
 800499a:	e033      	b.n	8004a04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800499c:	f107 0316 	add.w	r3, r7, #22
 80049a0:	461a      	mov	r2, r3
 80049a2:	2144      	movs	r1, #68	; 0x44
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f003 fd97 	bl	80084d8 <VL53L0X_RdWord>
 80049aa:	4603      	mov	r3, r0
 80049ac:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80049ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d102      	bne.n	80049bc <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	025b      	lsls	r3, r3, #9
 80049ba:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	77bb      	strb	r3, [r7, #30]
		break;
 80049c0:	e020      	b.n	8004a04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 80049c8:	2300      	movs	r3, #0
 80049ca:	77bb      	strb	r3, [r7, #30]
		break;
 80049cc:	e01a      	b.n	8004a04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 80049d4:	2300      	movs	r3, #0
 80049d6:	77bb      	strb	r3, [r7, #30]
		break;
 80049d8:	e014      	b.n	8004a04 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 80049da:	f107 0316 	add.w	r3, r7, #22
 80049de:	461a      	mov	r2, r3
 80049e0:	2164      	movs	r1, #100	; 0x64
 80049e2:	68f8      	ldr	r0, [r7, #12]
 80049e4:	f003 fd78 	bl	80084d8 <VL53L0X_RdWord>
 80049e8:	4603      	mov	r3, r0
 80049ea:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80049ec:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d102      	bne.n	80049fa <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80049f4:	8afb      	ldrh	r3, [r7, #22]
 80049f6:	025b      	lsls	r3, r3, #9
 80049f8:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80049fa:	2300      	movs	r3, #0
 80049fc:	77bb      	strb	r3, [r7, #30]
		break;
 80049fe:	e001      	b.n	8004a04 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8004a00:	23fc      	movs	r3, #252	; 0xfc
 8004a02:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004a04:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d12a      	bne.n	8004a62 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8004a0c:	7fbb      	ldrb	r3, [r7, #30]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d124      	bne.n	8004a5c <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d110      	bne.n	8004a3a <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8004a18:	897b      	ldrh	r3, [r7, #10]
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4413      	add	r3, r2
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	69ba      	ldr	r2, [r7, #24]
 8004a2a:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004a2c:	897b      	ldrh	r3, [r7, #10]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	4413      	add	r3, r2
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004a38:	e013      	b.n	8004a62 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69ba      	ldr	r2, [r7, #24]
 8004a3e:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004a40:	897b      	ldrh	r3, [r7, #10]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	330c      	adds	r3, #12
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8004a4e:	897b      	ldrh	r3, [r7, #10]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4413      	add	r3, r2
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004a5a:	e002      	b.n	8004a62 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004a62:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop

08004a70 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8004a7e:	f107 030e 	add.w	r3, r7, #14
 8004a82:	461a      	mov	r2, r3
 8004a84:	2101      	movs	r1, #1
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f003 fcfc 	bl	8008484 <VL53L0X_RdByte>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8004a90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10e      	bne.n	8004ab6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8004a98:	7bba      	ldrb	r2, [r7, #14]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8004aa0:	7bbb      	ldrb	r3, [r7, #14]
 8004aa2:	b25b      	sxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	da03      	bge.n	8004ab0 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	e002      	b.n	8004ab6 <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8004ab6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d104      	bne.n	8004ac8 <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	781a      	ldrb	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004ac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004ae0:	f107 030e 	add.w	r3, r7, #14
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f7ff fbea 	bl	80042c0 <VL53L0X_GetDeviceMode>
 8004aec:	4603      	mov	r3, r0
 8004aee:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004af0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004af8:	7bbb      	ldrb	r3, [r7, #14]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f898 	bl	8004c34 <VL53L0X_StartMeasurement>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8004b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d104      	bne.n	8004b1a <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f001 fb3f 	bl	8006194 <VL53L0X_measurement_poll_for_completion>
 8004b16:	4603      	mov	r3, r0
 8004b18:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8004b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d106      	bne.n	8004b30 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8004b22:	7bbb      	ldrb	r3, [r7, #14]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d103      	bne.n	8004b30 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8004b30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3710      	adds	r7, #16
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b086      	sub	sp, #24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	68b9      	ldr	r1, [r7, #8]
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f001 fae1 	bl	800611a <VL53L0X_perform_ref_calibration>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8004b5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	460b      	mov	r3, r1
 8004b72:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004b74:	2300      	movs	r3, #0
 8004b76:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004b7e:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8004b80:	7dbb      	ldrb	r3, [r7, #22]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d005      	beq.n	8004b92 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8004b86:	7dbb      	ldrb	r3, [r7, #22]
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d002      	beq.n	8004b92 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8004b8c:	7dbb      	ldrb	r3, [r7, #22]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d147      	bne.n	8004c22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8004b92:	f107 030c 	add.w	r3, r7, #12
 8004b96:	f107 0210 	add.w	r2, r7, #16
 8004b9a:	2101      	movs	r1, #1
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 fbc3 	bl	8005328 <VL53L0X_GetInterruptThresholds>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004bac:	d803      	bhi.n	8004bb6 <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8004bae:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8004bb0:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8004bb4:	d935      	bls.n	8004c22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8004bb6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d131      	bne.n	8004c22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d006      	beq.n	8004bd2 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8004bc4:	491a      	ldr	r1, [pc, #104]	; (8004c30 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f002 fcba 	bl	8007540 <VL53L0X_load_tuning_settings>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	75fb      	strb	r3, [r7, #23]
 8004bd0:	e027      	b.n	8004c22 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8004bd2:	2204      	movs	r2, #4
 8004bd4:	21ff      	movs	r1, #255	; 0xff
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f003 fbd2 	bl	8008380 <VL53L0X_WrByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	7dfb      	ldrb	r3, [r7, #23]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8004be6:	2200      	movs	r2, #0
 8004be8:	2170      	movs	r1, #112	; 0x70
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f003 fbc8 	bl	8008380 <VL53L0X_WrByte>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	7dfb      	ldrb	r3, [r7, #23]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	21ff      	movs	r1, #255	; 0xff
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f003 fbbe 	bl	8008380 <VL53L0X_WrByte>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2180      	movs	r1, #128	; 0x80
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f003 fbb4 	bl	8008380 <VL53L0X_WrByte>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8004c22:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200000fc 	.word	0x200000fc

08004c34 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8004c40:	2301      	movs	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8004c44:	f107 030e 	add.w	r3, r7, #14
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f7ff fb38 	bl	80042c0 <VL53L0X_GetDeviceMode>

	Status = VL53L0X_WrByte(Dev, 0x80, 0x01);
 8004c50:	2201      	movs	r2, #1
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	6878      	ldr	r0, [r7, #4]
 8004c56:	f003 fb93 	bl	8008380 <VL53L0X_WrByte>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004c5e:	2201      	movs	r2, #1
 8004c60:	21ff      	movs	r1, #255	; 0xff
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f003 fb8c 	bl	8008380 <VL53L0X_WrByte>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2100      	movs	r1, #0
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f003 fb85 	bl	8008380 <VL53L0X_WrByte>
 8004c76:	4603      	mov	r3, r0
 8004c78:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x91, PALDevDataGet(Dev, StopVariable));
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 313a 	ldrb.w	r3, [r3, #314]	; 0x13a
 8004c80:	461a      	mov	r2, r3
 8004c82:	2191      	movs	r1, #145	; 0x91
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f003 fb7b 	bl	8008380 <VL53L0X_WrByte>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x00, 0x01);
 8004c8e:	2201      	movs	r2, #1
 8004c90:	2100      	movs	r1, #0
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f003 fb74 	bl	8008380 <VL53L0X_WrByte>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	21ff      	movs	r1, #255	; 0xff
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f003 fb6d 	bl	8008380 <VL53L0X_WrByte>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	75fb      	strb	r3, [r7, #23]
	Status = VL53L0X_WrByte(Dev, 0x80, 0x00);
 8004caa:	2200      	movs	r2, #0
 8004cac:	2180      	movs	r1, #128	; 0x80
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f003 fb66 	bl	8008380 <VL53L0X_WrByte>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	75fb      	strb	r3, [r7, #23]

	switch (DeviceMode) {
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d037      	beq.n	8004d2e <VL53L0X_StartMeasurement+0xfa>
 8004cbe:	2b03      	cmp	r3, #3
 8004cc0:	d04f      	beq.n	8004d62 <VL53L0X_StartMeasurement+0x12e>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d167      	bne.n	8004d96 <VL53L0X_StartMeasurement+0x162>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	2100      	movs	r1, #0
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f003 fb58 	bl	8008380 <VL53L0X_WrByte>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8004cd4:	7bfb      	ldrb	r3, [r7, #15]
 8004cd6:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8004cd8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d15d      	bne.n	8004d9c <VL53L0X_StartMeasurement+0x168>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <VL53L0X_StartMeasurement+0xc8>
					Status = VL53L0X_RdByte(Dev,
 8004cea:	f107 030d 	add.w	r3, r7, #13
 8004cee:	461a      	mov	r2, r3
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f003 fbc6 	bl	8008484 <VL53L0X_RdByte>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	3301      	adds	r3, #1
 8004d00:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8004d02:	7b7a      	ldrb	r2, [r7, #13]
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	4013      	ands	r3, r2
 8004d08:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004d0a:	7bfa      	ldrb	r2, [r7, #15]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d107      	bne.n	8004d20 <VL53L0X_StartMeasurement+0xec>
				&& (Status == VL53L0X_ERROR_NONE)
 8004d10:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <VL53L0X_StartMeasurement+0xec>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d1e:	d3e1      	bcc.n	8004ce4 <VL53L0X_StartMeasurement+0xb0>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8004d26:	d339      	bcc.n	8004d9c <VL53L0X_StartMeasurement+0x168>
				Status = VL53L0X_ERROR_TIME_OUT;
 8004d28:	23f9      	movs	r3, #249	; 0xf9
 8004d2a:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8004d2c:	e036      	b.n	8004d9c <VL53L0X_StartMeasurement+0x168>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004d2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d105      	bne.n	8004d42 <VL53L0X_StartMeasurement+0x10e>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004d36:	2101      	movs	r1, #1
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7ff ff15 	bl	8004b68 <VL53L0X_CheckAndLoadInterruptSettings>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004d42:	2202      	movs	r2, #2
 8004d44:	2100      	movs	r1, #0
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f003 fb1a 	bl	8008380 <VL53L0X_WrByte>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8004d50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d123      	bne.n	8004da0 <VL53L0X_StartMeasurement+0x16c>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2204      	movs	r2, #4
 8004d5c:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004d60:	e01e      	b.n	8004da0 <VL53L0X_StartMeasurement+0x16c>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8004d62:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d105      	bne.n	8004d76 <VL53L0X_StartMeasurement+0x142>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f7ff fefb 	bl	8004b68 <VL53L0X_CheckAndLoadInterruptSettings>
 8004d72:	4603      	mov	r3, r0
 8004d74:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8004d76:	2204      	movs	r2, #4
 8004d78:	2100      	movs	r1, #0
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f003 fb00 	bl	8008380 <VL53L0X_WrByte>
 8004d80:	4603      	mov	r3, r0
 8004d82:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8004d84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10b      	bne.n	8004da4 <VL53L0X_StartMeasurement+0x170>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2204      	movs	r2, #4
 8004d90:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8004d94:	e006      	b.n	8004da4 <VL53L0X_StartMeasurement+0x170>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8004d96:	23f8      	movs	r3, #248	; 0xf8
 8004d98:	75fb      	strb	r3, [r7, #23]
 8004d9a:	e004      	b.n	8004da6 <VL53L0X_StartMeasurement+0x172>
		break;
 8004d9c:	bf00      	nop
 8004d9e:	e002      	b.n	8004da6 <VL53L0X_StartMeasurement+0x172>
		break;
 8004da0:	bf00      	nop
 8004da2:	e000      	b.n	8004da6 <VL53L0X_StartMeasurement+0x172>
		break;
 8004da4:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8004da6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b084      	sub	sp, #16
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8004dc6:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8004dc8:	7bbb      	ldrb	r3, [r7, #14]
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d112      	bne.n	8004df4 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8004dce:	f107 0308 	add.w	r3, r7, #8
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb1d 	bl	8005414 <VL53L0X_GetInterruptMaskStatus>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b04      	cmp	r3, #4
 8004de2:	d103      	bne.n	8004dec <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	e01c      	b.n	8004e26 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	2200      	movs	r2, #0
 8004df0:	701a      	strb	r2, [r3, #0]
 8004df2:	e018      	b.n	8004e26 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8004df4:	f107 030d 	add.w	r3, r7, #13
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2114      	movs	r1, #20
 8004dfc:	6878      	ldr	r0, [r7, #4]
 8004dfe:	f003 fb41 	bl	8008484 <VL53L0X_RdByte>
 8004e02:	4603      	mov	r3, r0
 8004e04:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8004e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8004e0e:	7b7b      	ldrb	r3, [r7, #13]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	e002      	b.n	8004e26 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2200      	movs	r2, #0
 8004e24:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004e26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
	...

08004e34 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004e34:	b5b0      	push	{r4, r5, r7, lr}
 8004e36:	b096      	sub	sp, #88	; 0x58
 8004e38:	af02      	add	r7, sp, #8
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8004e44:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004e48:	230c      	movs	r3, #12
 8004e4a:	2114      	movs	r1, #20
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f003 fa6b 	bl	8008328 <VL53L0X_ReadMulti>
 8004e52:	4603      	mov	r3, r0
 8004e54:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8004e58:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f040 80d2 	bne.w	8005006 <VL53L0X_GetRangingMeasurementData+0x1d2>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2200      	movs	r2, #0
 8004e66:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8004e6e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	4413      	add	r3, r2
 8004e80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8004e8a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	021b      	lsls	r3, r3, #8
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	025b      	lsls	r3, r3, #9
 8004ea0:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ea6:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8004ea8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	021b      	lsls	r3, r3, #8
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	4413      	add	r3, r2
 8004eba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8004ebe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004ec2:	025b      	lsls	r3, r3, #9
 8004ec4:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8004eca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	4413      	add	r3, r2
 8004edc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004ee6:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004ee8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004eec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8b3 3152 	ldrh.w	r3, [r3, #338]	; 0x152
 8004ef6:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8004efe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8004f02:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004f08:	d047      	beq.n	8004f9a <VL53L0X_GetRangingMeasurementData+0x166>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004f0a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004f0c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004f10:	fb02 f303 	mul.w	r3, r2, r3
 8004f14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004f18:	4a58      	ldr	r2, [pc, #352]	; (800507c <VL53L0X_GetRangingMeasurementData+0x248>)
 8004f1a:	fb82 1203 	smull	r1, r2, r2, r3
 8004f1e:	1192      	asrs	r2, r2, #6
 8004f20:	17db      	asrs	r3, r3, #31
 8004f22:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004f24:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a1b      	ldr	r3, [r3, #32]
 8004f2c:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	7f1b      	ldrb	r3, [r3, #28]
 8004f32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004f36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d02d      	beq.n	8004f9a <VL53L0X_GetRangingMeasurementData+0x166>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8004f3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f40:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	121b      	asrs	r3, r3, #8
 8004f4a:	461a      	mov	r2, r3
				if ((SignalRate
 8004f4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d10d      	bne.n	8004f6e <VL53L0X_GetRangingMeasurementData+0x13a>
					<= 0) {
					if (RangeFractionalEnable)
 8004f52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d004      	beq.n	8004f64 <VL53L0X_GetRangingMeasurementData+0x130>
						XtalkRangeMilliMeter = 8888;
 8004f5a:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004f5e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f62:	e016      	b.n	8004f92 <VL53L0X_GetRangingMeasurementData+0x15e>
					else
						XtalkRangeMilliMeter = 8888
 8004f64:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004f68:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004f6c:	e011      	b.n	8004f92 <VL53L0X_GetRangingMeasurementData+0x15e>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004f6e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f74:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004f78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004f7a:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8004f82:	121b      	asrs	r3, r3, #8
 8004f84:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8004f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f88:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8004f8a:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8004f8e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8004f92:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004f96:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8004f9a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00d      	beq.n	8004fbe <VL53L0X_GetRangingMeasurementData+0x18a>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8004fa2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004fa6:	089b      	lsrs	r3, r3, #2
 8004fa8:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8004fae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	019b      	lsls	r3, r3, #6
 8004fb6:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	75da      	strb	r2, [r3, #23]
 8004fbc:	e006      	b.n	8004fcc <VL53L0X_GetRangingMeasurementData+0x198>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8004fc4:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8004fcc:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004fd0:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8004fd4:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	9300      	str	r3, [sp, #0]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f002 ff54 	bl	8007e90 <VL53L0X_get_pal_range_status>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	461a      	mov	r2, r3
 8004fec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004ff6:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <VL53L0X_GetRangingMeasurementData+0x1d2>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004ffe:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005006:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800500a:	2b00      	cmp	r3, #0
 800500c:	d12f      	bne.n	800506e <VL53L0X_GetRangingMeasurementData+0x23a>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f107 040c 	add.w	r4, r7, #12
 8005014:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8005018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800501a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800501c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005020:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8005028:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 800502e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8005036:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 800503c:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8005042:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8005048:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 800504e:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8005054:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f103 0450 	add.w	r4, r3, #80	; 0x50
 800505e:	f107 050c 	add.w	r5, r7, #12
 8005062:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005064:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005066:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800506a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800506e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8005072:	4618      	mov	r0, r3
 8005074:	3750      	adds	r7, #80	; 0x50
 8005076:	46bd      	mov	sp, r7
 8005078:	bdb0      	pop	{r4, r5, r7, pc}
 800507a:	bf00      	nop
 800507c:	10624dd3 	.word	0x10624dd3

08005080 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 800508e:	2100      	movs	r1, #0
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff f8cd 	bl	8004230 <VL53L0X_SetDeviceMode>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 800509a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d104      	bne.n	80050ac <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7ff fd16 	bl	8004ad4 <VL53L0X_PerformSingleMeasurement>
 80050a8:	4603      	mov	r3, r0
 80050aa:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80050ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d105      	bne.n	80050c0 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80050b4:	6839      	ldr	r1, [r7, #0]
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f7ff febc 	bl	8004e34 <VL53L0X_GetRangingMeasurementData>
 80050bc:	4603      	mov	r3, r0
 80050be:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80050c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d105      	bne.n	80050d4 <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80050c8:	2100      	movs	r1, #0
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f962 	bl	8005394 <VL53L0X_ClearInterruptMask>
 80050d0:	4603      	mov	r3, r0
 80050d2:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80050d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3710      	adds	r7, #16
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}

080050e0 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b084      	sub	sp, #16
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	4608      	mov	r0, r1
 80050ea:	4611      	mov	r1, r2
 80050ec:	461a      	mov	r2, r3
 80050ee:	4603      	mov	r3, r0
 80050f0:	70fb      	strb	r3, [r7, #3]
 80050f2:	460b      	mov	r3, r1
 80050f4:	70bb      	strb	r3, [r7, #2]
 80050f6:	4613      	mov	r3, r2
 80050f8:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050fa:	2300      	movs	r3, #0
 80050fc:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 80050fe:	78fb      	ldrb	r3, [r7, #3]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 8005104:	23f6      	movs	r3, #246	; 0xf6
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e107      	b.n	800531a <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 800510a:	78bb      	ldrb	r3, [r7, #2]
 800510c:	2b14      	cmp	r3, #20
 800510e:	d110      	bne.n	8005132 <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8005110:	7e3b      	ldrb	r3, [r7, #24]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d102      	bne.n	800511c <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 8005116:	2310      	movs	r3, #16
 8005118:	73bb      	strb	r3, [r7, #14]
 800511a:	e001      	b.n	8005120 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 800511c:	2301      	movs	r3, #1
 800511e:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8005120:	7bbb      	ldrb	r3, [r7, #14]
 8005122:	461a      	mov	r2, r3
 8005124:	2184      	movs	r1, #132	; 0x84
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f003 f92a 	bl	8008380 <VL53L0X_WrByte>
 800512c:	4603      	mov	r3, r0
 800512e:	73fb      	strb	r3, [r7, #15]
 8005130:	e0f3      	b.n	800531a <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 8005132:	78bb      	ldrb	r3, [r7, #2]
 8005134:	2b15      	cmp	r3, #21
 8005136:	f040 8097 	bne.w	8005268 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800513a:	2201      	movs	r2, #1
 800513c:	21ff      	movs	r1, #255	; 0xff
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f003 f91e 	bl	8008380 <VL53L0X_WrByte>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	7bfb      	ldrb	r3, [r7, #15]
 800514a:	4313      	orrs	r3, r2
 800514c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800514e:	2200      	movs	r2, #0
 8005150:	2100      	movs	r1, #0
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f003 f914 	bl	8008380 <VL53L0X_WrByte>
 8005158:	4603      	mov	r3, r0
 800515a:	461a      	mov	r2, r3
 800515c:	7bfb      	ldrb	r3, [r7, #15]
 800515e:	4313      	orrs	r3, r2
 8005160:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8005162:	2200      	movs	r2, #0
 8005164:	21ff      	movs	r1, #255	; 0xff
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f003 f90a 	bl	8008380 <VL53L0X_WrByte>
 800516c:	4603      	mov	r3, r0
 800516e:	461a      	mov	r2, r3
 8005170:	7bfb      	ldrb	r3, [r7, #15]
 8005172:	4313      	orrs	r3, r2
 8005174:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005176:	2201      	movs	r2, #1
 8005178:	2180      	movs	r1, #128	; 0x80
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f003 f900 	bl	8008380 <VL53L0X_WrByte>
 8005180:	4603      	mov	r3, r0
 8005182:	461a      	mov	r2, r3
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	4313      	orrs	r3, r2
 8005188:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 800518a:	2202      	movs	r2, #2
 800518c:	2185      	movs	r1, #133	; 0x85
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f003 f8f6 	bl	8008380 <VL53L0X_WrByte>
 8005194:	4603      	mov	r3, r0
 8005196:	461a      	mov	r2, r3
 8005198:	7bfb      	ldrb	r3, [r7, #15]
 800519a:	4313      	orrs	r3, r2
 800519c:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 800519e:	2204      	movs	r2, #4
 80051a0:	21ff      	movs	r1, #255	; 0xff
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f003 f8ec 	bl	8008380 <VL53L0X_WrByte>
 80051a8:	4603      	mov	r3, r0
 80051aa:	461a      	mov	r2, r3
 80051ac:	7bfb      	ldrb	r3, [r7, #15]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80051b2:	2200      	movs	r2, #0
 80051b4:	21cd      	movs	r1, #205	; 0xcd
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f003 f8e2 	bl	8008380 <VL53L0X_WrByte>
 80051bc:	4603      	mov	r3, r0
 80051be:	461a      	mov	r2, r3
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80051c6:	2211      	movs	r2, #17
 80051c8:	21cc      	movs	r1, #204	; 0xcc
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f003 f8d8 	bl	8008380 <VL53L0X_WrByte>
 80051d0:	4603      	mov	r3, r0
 80051d2:	461a      	mov	r2, r3
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80051da:	2207      	movs	r2, #7
 80051dc:	21ff      	movs	r1, #255	; 0xff
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f003 f8ce 	bl	8008380 <VL53L0X_WrByte>
 80051e4:	4603      	mov	r3, r0
 80051e6:	461a      	mov	r2, r3
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 80051ee:	2200      	movs	r2, #0
 80051f0:	21be      	movs	r1, #190	; 0xbe
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f003 f8c4 	bl	8008380 <VL53L0X_WrByte>
 80051f8:	4603      	mov	r3, r0
 80051fa:	461a      	mov	r2, r3
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
 80051fe:	4313      	orrs	r3, r2
 8005200:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 8005202:	2206      	movs	r2, #6
 8005204:	21ff      	movs	r1, #255	; 0xff
 8005206:	6878      	ldr	r0, [r7, #4]
 8005208:	f003 f8ba 	bl	8008380 <VL53L0X_WrByte>
 800520c:	4603      	mov	r3, r0
 800520e:	461a      	mov	r2, r3
 8005210:	7bfb      	ldrb	r3, [r7, #15]
 8005212:	4313      	orrs	r3, r2
 8005214:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 8005216:	2209      	movs	r2, #9
 8005218:	21cc      	movs	r1, #204	; 0xcc
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f003 f8b0 	bl	8008380 <VL53L0X_WrByte>
 8005220:	4603      	mov	r3, r0
 8005222:	461a      	mov	r2, r3
 8005224:	7bfb      	ldrb	r3, [r7, #15]
 8005226:	4313      	orrs	r3, r2
 8005228:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800522a:	2200      	movs	r2, #0
 800522c:	21ff      	movs	r1, #255	; 0xff
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f003 f8a6 	bl	8008380 <VL53L0X_WrByte>
 8005234:	4603      	mov	r3, r0
 8005236:	461a      	mov	r2, r3
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	4313      	orrs	r3, r2
 800523c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800523e:	2201      	movs	r2, #1
 8005240:	21ff      	movs	r1, #255	; 0xff
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f003 f89c 	bl	8008380 <VL53L0X_WrByte>
 8005248:	4603      	mov	r3, r0
 800524a:	461a      	mov	r2, r3
 800524c:	7bfb      	ldrb	r3, [r7, #15]
 800524e:	4313      	orrs	r3, r2
 8005250:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005252:	2200      	movs	r2, #0
 8005254:	2100      	movs	r1, #0
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f003 f892 	bl	8008380 <VL53L0X_WrByte>
 800525c:	4603      	mov	r3, r0
 800525e:	461a      	mov	r2, r3
 8005260:	7bfb      	ldrb	r3, [r7, #15]
 8005262:	4313      	orrs	r3, r2
 8005264:	73fb      	strb	r3, [r7, #15]
 8005266:	e058      	b.n	800531a <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8005268:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d121      	bne.n	80052b4 <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8005270:	787b      	ldrb	r3, [r7, #1]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d81b      	bhi.n	80052ae <VL53L0X_SetGpioConfig+0x1ce>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <VL53L0X_SetGpioConfig+0x19c>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005291 	.word	0x08005291
 8005280:	08005297 	.word	0x08005297
 8005284:	0800529d 	.word	0x0800529d
 8005288:	080052a3 	.word	0x080052a3
 800528c:	080052a9 	.word	0x080052a9
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 8005290:	2300      	movs	r3, #0
 8005292:	73bb      	strb	r3, [r7, #14]
				break;
 8005294:	e00f      	b.n	80052b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 8005296:	2301      	movs	r3, #1
 8005298:	73bb      	strb	r3, [r7, #14]
				break;
 800529a:	e00c      	b.n	80052b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 800529c:	2302      	movs	r3, #2
 800529e:	73bb      	strb	r3, [r7, #14]
				break;
 80052a0:	e009      	b.n	80052b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80052a2:	2303      	movs	r3, #3
 80052a4:	73bb      	strb	r3, [r7, #14]
				break;
 80052a6:	e006      	b.n	80052b6 <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80052a8:	2304      	movs	r3, #4
 80052aa:	73bb      	strb	r3, [r7, #14]
				break;
 80052ac:	e003      	b.n	80052b6 <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80052ae:	23f5      	movs	r3, #245	; 0xf5
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	e000      	b.n	80052b6 <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80052b4:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80052b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d107      	bne.n	80052ce <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80052be:	7bbb      	ldrb	r3, [r7, #14]
 80052c0:	461a      	mov	r2, r3
 80052c2:	210a      	movs	r1, #10
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f003 f85b 	bl	8008380 <VL53L0X_WrByte>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80052ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d10f      	bne.n	80052f6 <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80052d6:	7e3b      	ldrb	r3, [r7, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80052dc:	2300      	movs	r3, #0
 80052de:	73bb      	strb	r3, [r7, #14]
 80052e0:	e001      	b.n	80052e6 <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80052e2:	2310      	movs	r3, #16
 80052e4:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80052e6:	7bbb      	ldrb	r3, [r7, #14]
 80052e8:	22ef      	movs	r2, #239	; 0xef
 80052ea:	2184      	movs	r1, #132	; 0x84
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f003 f895 	bl	800841c <VL53L0X_UpdateByte>
 80052f2:	4603      	mov	r3, r0
 80052f4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 80052f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d103      	bne.n	8005306 <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	787a      	ldrb	r2, [r7, #1]
 8005302:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 8005306:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d105      	bne.n	800531a <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 800530e:	2100      	movs	r1, #0
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f83f 	bl	8005394 <VL53L0X_ClearInterruptMask>
 8005316:	4603      	mov	r3, r0
 8005318:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 800531a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop

08005328 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	607a      	str	r2, [r7, #4]
 8005332:	603b      	str	r3, [r7, #0]
 8005334:	460b      	mov	r3, r1
 8005336:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005338:	2300      	movs	r3, #0
 800533a:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 800533c:	f107 0314 	add.w	r3, r7, #20
 8005340:	461a      	mov	r2, r3
 8005342:	210e      	movs	r1, #14
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f003 f8c7 	bl	80084d8 <VL53L0X_RdWord>
 800534a:	4603      	mov	r3, r0
 800534c:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800534e:	8abb      	ldrh	r3, [r7, #20]
 8005350:	045b      	lsls	r3, r3, #17
 8005352:	461a      	mov	r2, r3
 8005354:	4b0e      	ldr	r3, [pc, #56]	; (8005390 <VL53L0X_GetInterruptThresholds+0x68>)
 8005356:	4013      	ands	r3, r2
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 800535c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10f      	bne.n	8005384 <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 8005364:	f107 0314 	add.w	r3, r7, #20
 8005368:	461a      	mov	r2, r3
 800536a:	210c      	movs	r1, #12
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f003 f8b3 	bl	80084d8 <VL53L0X_RdWord>
 8005372:	4603      	mov	r3, r0
 8005374:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8005376:	8abb      	ldrh	r3, [r7, #20]
 8005378:	045b      	lsls	r3, r3, #17
 800537a:	461a      	mov	r2, r3
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <VL53L0X_GetInterruptThresholds+0x68>)
 800537e:	4013      	ands	r3, r2
		*pThresholdHigh =
 8005380:	683a      	ldr	r2, [r7, #0]
 8005382:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	1ffe0000 	.word	0x1ffe0000

08005394 <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800539e:	2300      	movs	r3, #0
 80053a0:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80053a6:	2201      	movs	r2, #1
 80053a8:	210b      	movs	r1, #11
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f002 ffe8 	bl	8008380 <VL53L0X_WrByte>
 80053b0:	4603      	mov	r3, r0
 80053b2:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80053b4:	2200      	movs	r2, #0
 80053b6:	210b      	movs	r1, #11
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f002 ffe1 	bl	8008380 <VL53L0X_WrByte>
 80053be:	4603      	mov	r3, r0
 80053c0:	461a      	mov	r2, r3
 80053c2:	7bfb      	ldrb	r3, [r7, #15]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80053c8:	f107 030d 	add.w	r3, r7, #13
 80053cc:	461a      	mov	r2, r3
 80053ce:	2113      	movs	r1, #19
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f003 f857 	bl	8008484 <VL53L0X_RdByte>
 80053d6:	4603      	mov	r3, r0
 80053d8:	461a      	mov	r2, r3
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	4313      	orrs	r3, r2
 80053de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80053e0:	7bbb      	ldrb	r3, [r7, #14]
 80053e2:	3301      	adds	r3, #1
 80053e4:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80053e6:	7b7b      	ldrb	r3, [r7, #13]
 80053e8:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d006      	beq.n	80053fe <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 80053f0:	7bbb      	ldrb	r3, [r7, #14]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d803      	bhi.n	80053fe <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 80053f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d0d3      	beq.n	80053a6 <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 80053fe:	7bbb      	ldrb	r3, [r7, #14]
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 8005404:	23f4      	movs	r3, #244	; 0xf4
 8005406:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8005408:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 8005422:	f107 030e 	add.w	r3, r7, #14
 8005426:	461a      	mov	r2, r3
 8005428:	2113      	movs	r1, #19
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f003 f82a 	bl	8008484 <VL53L0X_RdByte>
 8005430:	4603      	mov	r3, r0
 8005432:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 8005434:	7bbb      	ldrb	r3, [r7, #14]
 8005436:	f003 0207 	and.w	r2, r3, #7
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 800543e:	7bbb      	ldrb	r3, [r7, #14]
 8005440:	f003 0318 	and.w	r3, r3, #24
 8005444:	2b00      	cmp	r3, #0
 8005446:	d001      	beq.n	800544c <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8005448:	23fa      	movs	r3, #250	; 0xfa
 800544a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 800544c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005464:	2300      	movs	r3, #0
 8005466:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fa03 	bl	8005878 <VL53L0X_perform_ref_spad_management>
 8005472:	4603      	mov	r3, r0
 8005474:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 8005476:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b084      	sub	sp, #16
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
 800548a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800548c:	2300      	movs	r3, #0
 800548e:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 8005490:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005494:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 8005496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800549a:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	461a      	mov	r2, r3
 80054a2:	2128      	movs	r1, #40	; 0x28
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f003 f817 	bl	80084d8 <VL53L0X_RdWord>
 80054aa:	4603      	mov	r3, r0
 80054ac:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80054ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d11e      	bne.n	80054f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80054b6:	893b      	ldrh	r3, [r7, #8]
 80054b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054bc:	b29b      	uxth	r3, r3
 80054be:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80054c0:	893b      	ldrh	r3, [r7, #8]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	dd0b      	ble.n	80054e4 <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80054cc:	893a      	ldrh	r2, [r7, #8]
 80054ce:	897b      	ldrh	r3, [r7, #10]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	461a      	mov	r2, r3
					* 250;
 80054d8:	23fa      	movs	r3, #250	; 0xfa
 80054da:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	601a      	str	r2, [r3, #0]
 80054e2:	e007      	b.n	80054f4 <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80054e4:	893b      	ldrh	r3, [r7, #8]
 80054e6:	b21b      	sxth	r3, r3
 80054e8:	461a      	mov	r2, r3
 80054ea:	23fa      	movs	r3, #250	; 0xfa
 80054ec:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	601a      	str	r2, [r3, #0]

	}

	return Status;
 80054f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	3710      	adds	r7, #16
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8005500:	b480      	push	{r7}
 8005502:	b08b      	sub	sp, #44	; 0x2c
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
 800550c:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 800550e:	2308      	movs	r3, #8
 8005510:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 8005512:	2300      	movs	r3, #0
 8005514:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f04f 32ff 	mov.w	r2, #4294967295
 800551c:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	69bb      	ldr	r3, [r7, #24]
 8005522:	fbb2 f3f3 	udiv	r3, r2, r3
 8005526:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005530:	69b9      	ldr	r1, [r7, #24]
 8005532:	fb01 f202 	mul.w	r2, r1, r2
 8005536:	1a9b      	subs	r3, r3, r2
 8005538:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	627b      	str	r3, [r7, #36]	; 0x24
 800553e:	e030      	b.n	80055a2 <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8005540:	2300      	movs	r3, #0
 8005542:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	4413      	add	r3, r2
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 800554e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	429a      	cmp	r2, r3
 8005554:	d11e      	bne.n	8005594 <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 8005556:	7ffa      	ldrb	r2, [r7, #31]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	fa42 f303 	asr.w	r3, r2, r3
 800555e:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 8005564:	e016      	b.n	8005594 <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 8005566:	7ffb      	ldrb	r3, [r7, #31]
 8005568:	f003 0301 	and.w	r3, r3, #1
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00b      	beq.n	8005588 <get_next_good_spad+0x88>
				success = 1;
 8005570:	2301      	movs	r3, #1
 8005572:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 8005574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	fb02 f203 	mul.w	r2, r2, r3
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	4413      	add	r3, r2
 8005580:	461a      	mov	r2, r3
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	601a      	str	r2, [r3, #0]
				break;
 8005586:	e009      	b.n	800559c <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 8005588:	7ffb      	ldrb	r3, [r7, #31]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 800558e:	6a3b      	ldr	r3, [r7, #32]
 8005590:	3301      	adds	r3, #1
 8005592:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 8005594:	6a3a      	ldr	r2, [r7, #32]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	429a      	cmp	r2, r3
 800559a:	d3e4      	bcc.n	8005566 <get_next_good_spad+0x66>
				coarseIndex++) {
 800559c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559e:	3301      	adds	r3, #1
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80055a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d202      	bcs.n	80055b0 <get_next_good_spad+0xb0>
 80055aa:	7fbb      	ldrb	r3, [r7, #30]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d0c7      	beq.n	8005540 <get_next_good_spad+0x40>
		}
	}
}
 80055b0:	bf00      	nop
 80055b2:	372c      	adds	r7, #44	; 0x2c
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr

080055bc <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80055c4:	2301      	movs	r3, #1
 80055c6:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	099b      	lsrs	r3, r3, #6
 80055cc:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80055ce:	4a07      	ldr	r2, [pc, #28]	; (80055ec <is_aperture+0x30>)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <is_aperture+0x22>
		isAperture = 0;
 80055da:	2300      	movs	r3, #0
 80055dc:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80055de:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3714      	adds	r7, #20
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr
 80055ec:	200002b4 	.word	0x200002b4

080055f0 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b089      	sub	sp, #36	; 0x24
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60f8      	str	r0, [r7, #12]
 80055f8:	60b9      	str	r1, [r7, #8]
 80055fa:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80055fc:	2300      	movs	r3, #0
 80055fe:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8005600:	2308      	movs	r3, #8
 8005602:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	fbb3 f2f2 	udiv	r2, r3, r2
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	fb01 f202 	mul.w	r2, r1, r2
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	429a      	cmp	r2, r3
 8005626:	d302      	bcc.n	800562e <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005628:	23ce      	movs	r3, #206	; 0xce
 800562a:	77fb      	strb	r3, [r7, #31]
 800562c:	e010      	b.n	8005650 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	4413      	add	r3, r2
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	b25a      	sxtb	r2, r3
 8005638:	2101      	movs	r1, #1
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	fa01 f303 	lsl.w	r3, r1, r3
 8005640:	b25b      	sxtb	r3, r3
 8005642:	4313      	orrs	r3, r2
 8005644:	b259      	sxtb	r1, r3
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	4413      	add	r3, r2
 800564c:	b2ca      	uxtb	r2, r1
 800564e:	701a      	strb	r2, [r3, #0]

	return status;
 8005650:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005654:	4618      	mov	r0, r3
 8005656:	3724      	adds	r7, #36	; 0x24
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 800566a:	2306      	movs	r3, #6
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	21b0      	movs	r1, #176	; 0xb0
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f002 fe29 	bl	80082c8 <VL53L0X_WriteMulti>
 8005676:	4603      	mov	r3, r0
 8005678:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 800567a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3710      	adds	r7, #16
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
 800568e:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 8005690:	2306      	movs	r3, #6
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	21b0      	movs	r1, #176	; 0xb0
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f002 fe46 	bl	8008328 <VL53L0X_ReadMulti>
 800569c:	4603      	mov	r3, r0
 800569e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80056a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3710      	adds	r7, #16
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b08c      	sub	sp, #48	; 0x30
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	607a      	str	r2, [r7, #4]
 80056b6:	603b      	str	r3, [r7, #0]
 80056b8:	460b      	mov	r3, r1
 80056ba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80056bc:	2300      	movs	r3, #0
 80056be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80056c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c4:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80056c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c8:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80056ca:	2300      	movs	r3, #0
 80056cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80056ce:	e02b      	b.n	8005728 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80056d0:	f107 031c 	add.w	r3, r7, #28
 80056d4:	6a3a      	ldr	r2, [r7, #32]
 80056d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f7ff ff11 	bl	8005500 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d103      	bne.n	80056ee <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80056e6:	23ce      	movs	r3, #206	; 0xce
 80056e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 80056ec:	e020      	b.n	8005730 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	461a      	mov	r2, r3
 80056f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056f4:	4413      	add	r3, r2
 80056f6:	4618      	mov	r0, r3
 80056f8:	f7ff ff60 	bl	80055bc <is_aperture>
 80056fc:	4603      	mov	r3, r0
 80056fe:	461a      	mov	r2, r3
 8005700:	7afb      	ldrb	r3, [r7, #11]
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005706:	23ce      	movs	r3, #206	; 0xce
 8005708:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 800570c:	e010      	b.n	8005730 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 8005712:	6a3a      	ldr	r2, [r7, #32]
 8005714:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005716:	6838      	ldr	r0, [r7, #0]
 8005718:	f7ff ff6a 	bl	80055f0 <enable_spad_bit>
		currentSpad++;
 800571c:	6a3b      	ldr	r3, [r7, #32]
 800571e:	3301      	adds	r3, #1
 8005720:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	3301      	adds	r3, #1
 8005726:	62bb      	str	r3, [r7, #40]	; 0x28
 8005728:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800572a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800572c:	429a      	cmp	r2, r3
 800572e:	d3cf      	bcc.n	80056d0 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8005730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005732:	6a3a      	ldr	r2, [r7, #32]
 8005734:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 8005736:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800573a:	2b00      	cmp	r3, #0
 800573c:	d106      	bne.n	800574c <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 800573e:	6839      	ldr	r1, [r7, #0]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f7ff ff8d 	bl	8005660 <set_ref_spad_map>
 8005746:	4603      	mov	r3, r0
 8005748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 800574c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005750:	2b00      	cmp	r3, #0
 8005752:	d121      	bne.n	8005798 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 8005754:	f107 0314 	add.w	r3, r7, #20
 8005758:	4619      	mov	r1, r3
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f7ff ff93 	bl	8005686 <get_ref_spad_map>
 8005760:	4603      	mov	r3, r0
 8005762:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 800576a:	e011      	b.n	8005790 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005770:	4413      	add	r3, r2
 8005772:	781a      	ldrb	r2, [r3, #0]
 8005774:	f107 0114 	add.w	r1, r7, #20
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	440b      	add	r3, r1
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	429a      	cmp	r2, r3
 8005780:	d003      	beq.n	800578a <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005782:	23ce      	movs	r3, #206	; 0xce
 8005784:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 8005788:	e006      	b.n	8005798 <enable_ref_spads+0xec>
			}
			i++;
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	3301      	adds	r3, #1
 800578e:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 8005790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	429a      	cmp	r2, r3
 8005796:	d3e9      	bcc.n	800576c <enable_ref_spads+0xc0>
		}
	}
	return status;
 8005798:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800579c:	4618      	mov	r0, r3
 800579e:	3730      	adds	r7, #48	; 0x30
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08a      	sub	sp, #40	; 0x28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80057ae:	2300      	movs	r3, #0
 80057b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80057b4:	2300      	movs	r3, #0
 80057b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80057c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80057c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d107      	bne.n	80057dc <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80057cc:	22c0      	movs	r2, #192	; 0xc0
 80057ce:	2101      	movs	r1, #1
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f002 fdd5 	bl	8008380 <VL53L0X_WrByte>
 80057d6:	4603      	mov	r3, r0
 80057d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80057dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d108      	bne.n	80057f6 <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80057e4:	f107 0308 	add.w	r3, r7, #8
 80057e8:	4619      	mov	r1, r3
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff fc48 	bl	8005080 <VL53L0X_PerformSingleRangingMeasurement>
 80057f0:	4603      	mov	r3, r0
 80057f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 80057f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d107      	bne.n	800580e <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80057fe:	2201      	movs	r2, #1
 8005800:	21ff      	movs	r1, #255	; 0xff
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f002 fdbc 	bl	8008380 <VL53L0X_WrByte>
 8005808:	4603      	mov	r3, r0
 800580a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 800580e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005812:	2b00      	cmp	r3, #0
 8005814:	d107      	bne.n	8005826 <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	21b6      	movs	r1, #182	; 0xb6
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f002 fe5c 	bl	80084d8 <VL53L0X_RdWord>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 8005826:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800582a:	2b00      	cmp	r3, #0
 800582c:	d107      	bne.n	800583e <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800582e:	2200      	movs	r2, #0
 8005830:	21ff      	movs	r1, #255	; 0xff
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f002 fda4 	bl	8008380 <VL53L0X_WrByte>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 800583e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005842:	2b00      	cmp	r3, #0
 8005844:	d112      	bne.n	800586c <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005846:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800584a:	461a      	mov	r2, r3
 800584c:	2101      	movs	r1, #1
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f002 fd96 	bl	8008380 <VL53L0X_WrByte>
 8005854:	4603      	mov	r3, r0
 8005856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 800585a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800585e:	2b00      	cmp	r3, #0
 8005860:	d104      	bne.n	800586c <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8005868:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 800586c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8005870:	4618      	mov	r0, r3
 8005872:	3728      	adds	r7, #40	; 0x28
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8005878:	b590      	push	{r4, r7, lr}
 800587a:	b09d      	sub	sp, #116	; 0x74
 800587c:	af06      	add	r7, sp, #24
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005884:	2300      	movs	r3, #0
 8005886:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 800588a:	23b4      	movs	r3, #180	; 0xb4
 800588c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 8005890:	2303      	movs	r3, #3
 8005892:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 8005894:	232c      	movs	r3, #44	; 0x2c
 8005896:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 8005898:	2300      	movs	r3, #0
 800589a:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 800589c:	2300      	movs	r3, #0
 800589e:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80058a0:	2300      	movs	r3, #0
 80058a2:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80058a4:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80058a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80058aa:	2300      	movs	r3, #0
 80058ac:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80058ae:	2300      	movs	r3, #0
 80058b0:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80058b2:	2306      	movs	r3, #6
 80058b4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80058be:	2300      	movs	r3, #0
 80058c0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80058c4:	2300      	movs	r3, #0
 80058c6:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80058c8:	2300      	movs	r3, #0
 80058ca:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80058d0:	2300      	movs	r3, #0
 80058d2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f8b3 313c 	ldrh.w	r3, [r3, #316]	; 0x13c
 80058dc:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80058de:	2300      	movs	r3, #0
 80058e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e2:	e009      	b.n	80058f8 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 80058f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f4:	3301      	adds	r3, #1
 80058f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d3f1      	bcc.n	80058e4 <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005900:	2201      	movs	r2, #1
 8005902:	21ff      	movs	r1, #255	; 0xff
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f002 fd3b 	bl	8008380 <VL53L0X_WrByte>
 800590a:	4603      	mov	r3, r0
 800590c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005910:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005914:	2b00      	cmp	r3, #0
 8005916:	d107      	bne.n	8005928 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8005918:	2200      	movs	r2, #0
 800591a:	214f      	movs	r1, #79	; 0x4f
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f002 fd2f 	bl	8008380 <VL53L0X_WrByte>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005928:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800592c:	2b00      	cmp	r3, #0
 800592e:	d107      	bne.n	8005940 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8005930:	222c      	movs	r2, #44	; 0x2c
 8005932:	214e      	movs	r1, #78	; 0x4e
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f002 fd23 	bl	8008380 <VL53L0X_WrByte>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005940:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005944:	2b00      	cmp	r3, #0
 8005946:	d107      	bne.n	8005958 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005948:	2200      	movs	r2, #0
 800594a:	21ff      	movs	r1, #255	; 0xff
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f002 fd17 	bl	8008380 <VL53L0X_WrByte>
 8005952:	4603      	mov	r3, r0
 8005954:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8005958:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800595c:	2b00      	cmp	r3, #0
 800595e:	d109      	bne.n	8005974 <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8005960:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005964:	461a      	mov	r2, r3
 8005966:	21b6      	movs	r1, #182	; 0xb6
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f002 fd09 	bl	8008380 <VL53L0X_WrByte>
 800596e:	4603      	mov	r3, r0
 8005970:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8005974:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005978:	2b00      	cmp	r3, #0
 800597a:	d107      	bne.n	800598c <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 800597c:	2200      	movs	r2, #0
 800597e:	2180      	movs	r1, #128	; 0x80
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f002 fcfd 	bl	8008380 <VL53L0X_WrByte>
 8005986:	4603      	mov	r3, r0
 8005988:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 800598c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8005994:	f107 0210 	add.w	r2, r7, #16
 8005998:	f107 0111 	add.w	r1, r7, #17
 800599c:	2300      	movs	r3, #0
 800599e:	68f8      	ldr	r0, [r7, #12]
 80059a0:	f000 fbbb 	bl	800611a <VL53L0X_perform_ref_calibration>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 80059aa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d121      	bne.n	80059f6 <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 80059b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059b8:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 80059ba:	2300      	movs	r3, #0
 80059bc:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 80059be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c0:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 80059ce:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80059d2:	f107 0218 	add.w	r2, r7, #24
 80059d6:	9204      	str	r2, [sp, #16]
 80059d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059da:	9203      	str	r2, [sp, #12]
 80059dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059de:	9202      	str	r2, [sp, #8]
 80059e0:	9301      	str	r3, [sp, #4]
 80059e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4623      	mov	r3, r4
 80059e8:	4602      	mov	r2, r0
 80059ea:	68f8      	ldr	r0, [r7, #12]
 80059ec:	f7ff fe5e 	bl	80056ac <enable_ref_spads>
 80059f0:	4603      	mov	r3, r0
 80059f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80059f6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d174      	bne.n	8005ae8 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8005a02:	f107 0312 	add.w	r3, r7, #18
 8005a06:	4619      	mov	r1, r3
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff fecb 	bl	80057a4 <perform_ref_signal_measurement>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005a14:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d161      	bne.n	8005ae0 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8005a1c:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8005a1e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d25d      	bcs.n	8005ae0 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8005a24:	2300      	movs	r3, #0
 8005a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a28:	e009      	b.n	8005a3e <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005a2a:	68fa      	ldr	r2, [r7, #12]
 8005a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a2e:	4413      	add	r3, r2
 8005a30:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005a34:	2200      	movs	r2, #0
 8005a36:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8005a38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d3f1      	bcc.n	8005a2a <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8005a46:	e002      	b.n	8005a4e <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8005a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8005a4e:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8005a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a54:	4413      	add	r3, r2
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff fdb0 	bl	80055bc <is_aperture>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8005a62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d3ee      	bcc.n	8005a48 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8005a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a70:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8005a7e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005a82:	f107 0218 	add.w	r2, r7, #24
 8005a86:	9204      	str	r2, [sp, #16]
 8005a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a8a:	9203      	str	r2, [sp, #12]
 8005a8c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a8e:	9202      	str	r2, [sp, #8]
 8005a90:	9301      	str	r3, [sp, #4]
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	4623      	mov	r3, r4
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68f8      	ldr	r0, [r7, #12]
 8005a9c:	f7ff fe06 	bl	80056ac <enable_ref_spads>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005aa6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11b      	bne.n	8005ae6 <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8005aae:	69bb      	ldr	r3, [r7, #24]
 8005ab0:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8005ab2:	f107 0312 	add.w	r3, r7, #18
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff fe73 	bl	80057a4 <perform_ref_signal_measurement>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8005ac4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d10c      	bne.n	8005ae6 <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8005acc:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8005ace:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d208      	bcs.n	8005ae6 <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8005ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8005ade:	e002      	b.n	8005ae6 <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ae4:	e000      	b.n	8005ae8 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8005ae6:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005ae8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f040 80af 	bne.w	8005c50 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8005af2:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8005af4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005af6:	429a      	cmp	r2, r3
 8005af8:	f240 80aa 	bls.w	8005c50 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8005afc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005afe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8005b02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b04:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8005b0c:	f107 031c 	add.w	r3, r7, #28
 8005b10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b12:	4618      	mov	r0, r3
 8005b14:	f003 fea4 	bl	8009860 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8005b18:	8a7b      	ldrh	r3, [r7, #18]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bfb8      	it	lt
 8005b24:	425b      	neglt	r3, r3
 8005b26:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8005b2e:	e086      	b.n	8005c3e <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b3e:	f7ff fcdf 	bl	8005500 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b48:	d103      	bne.n	8005b52 <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8005b4a:	23ce      	movs	r3, #206	; 0xce
 8005b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8005b50:	e07e      	b.n	8005c50 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8005b52:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005b56:	697a      	ldr	r2, [r7, #20]
 8005b58:	4413      	add	r3, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff fd2e 	bl	80055bc <is_aperture>
 8005b60:	4603      	mov	r3, r0
 8005b62:	461a      	mov	r2, r3
 8005b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d003      	beq.n	8005b72 <VL53L0X_perform_ref_spad_management+0x2fa>
					needAptSpads) {
				/* At this point we have enabled the maximum
				 * number of Aperture spads.
				 */
				complete = 1;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
				break;
 8005b70:	e06e      	b.n	8005c50 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8005b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b74:	3301      	adds	r3, #1
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c

			currentSpadIndex = nextGoodSpad;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8005b82:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b86:	4618      	mov	r0, r3
 8005b88:	f7ff fd32 	bl	80055f0 <enable_spad_bit>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8005b92:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d10c      	bne.n	8005bb4 <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8005b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9c:	3301      	adds	r3, #1
 8005b9e:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f7ff fd59 	bl	8005660 <set_ref_spad_map>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8005bb4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d146      	bne.n	8005c4a <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8005bbc:	f107 0312 	add.w	r3, r7, #18
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f7ff fdee 	bl	80057a4 <perform_ref_signal_measurement>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8005bce:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d13b      	bne.n	8005c4e <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8005bd6:	8a7b      	ldrh	r3, [r7, #18]
 8005bd8:	461a      	mov	r2, r3
 8005bda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfb8      	it	lt
 8005be2:	425b      	neglt	r3, r3
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8005be6:	8a7b      	ldrh	r3, [r7, #18]
 8005be8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d21c      	bcs.n	8005c28 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8005bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d914      	bls.n	8005c20 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8005bf6:	f107 031c 	add.w	r3, r7, #28
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f7ff fd2f 	bl	8005660 <set_ref_spad_map>
 8005c02:	4603      	mov	r3, r0
 8005c04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8005c0e:	f107 011c 	add.w	r1, r7, #28
 8005c12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c14:	4618      	mov	r0, r3
 8005c16:	f003 fe23 	bl	8009860 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8005c1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c26:	e00a      	b.n	8005c3e <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8005c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c2a:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8005c32:	f107 031c 	add.w	r3, r7, #28
 8005c36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f003 fe11 	bl	8009860 <memcpy>
		while (!complete) {
 8005c3e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f43f af74 	beq.w	8005b30 <VL53L0X_perform_ref_spad_management+0x2b8>
 8005c48:	e002      	b.n	8005c50 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005c4a:	bf00      	nop
 8005c4c:	e000      	b.n	8005c50 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8005c4e:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8005c50:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d115      	bne.n	8005c84 <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c5c:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8005c64:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8005c84:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	375c      	adds	r7, #92	; 0x5c
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd90      	pop	{r4, r7, pc}

08005c90 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8005c90:	b590      	push	{r4, r7, lr}
 8005c92:	b093      	sub	sp, #76	; 0x4c
 8005c94:	af06      	add	r7, sp, #24
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8005ca8:	23b4      	movs	r3, #180	; 0xb4
 8005caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8005cae:	2306      	movs	r3, #6
 8005cb0:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8005cb2:	232c      	movs	r3, #44	; 0x2c
 8005cb4:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	21ff      	movs	r1, #255	; 0xff
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f002 fb60 	bl	8008380 <VL53L0X_WrByte>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005cc6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d107      	bne.n	8005cde <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8005cce:	2200      	movs	r2, #0
 8005cd0:	214f      	movs	r1, #79	; 0x4f
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f002 fb54 	bl	8008380 <VL53L0X_WrByte>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8005cde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d107      	bne.n	8005cf6 <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8005ce6:	222c      	movs	r2, #44	; 0x2c
 8005ce8:	214e      	movs	r1, #78	; 0x4e
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f002 fb48 	bl	8008380 <VL53L0X_WrByte>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8005cf6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d107      	bne.n	8005d0e <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005cfe:	2200      	movs	r2, #0
 8005d00:	21ff      	movs	r1, #255	; 0xff
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f002 fb3c 	bl	8008380 <VL53L0X_WrByte>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8005d0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8005d16:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	21b6      	movs	r1, #182	; 0xb6
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f002 fb2e 	bl	8008380 <VL53L0X_WrByte>
 8005d24:	4603      	mov	r3, r0
 8005d26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2e:	e009      	b.n	8005d44 <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d34:	4413      	add	r3, r2
 8005d36:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	3301      	adds	r3, #1
 8005d42:	627b      	str	r3, [r7, #36]	; 0x24
 8005d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d3f1      	bcc.n	8005d30 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8005d4c:	79fb      	ldrb	r3, [r7, #7]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d011      	beq.n	8005d76 <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005d52:	e002      	b.n	8005d5a <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8005d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d56:	3301      	adds	r3, #1
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8005d5a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d60:	4413      	add	r3, r2
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fc2a 	bl	80055bc <is_aperture>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d103      	bne.n	8005d76 <VL53L0X_set_reference_spads+0xe6>
 8005d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d70:	69bb      	ldr	r3, [r7, #24]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d3ee      	bcc.n	8005d54 <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8005d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005d86:	79f9      	ldrb	r1, [r7, #7]
 8005d88:	f107 0214 	add.w	r2, r7, #20
 8005d8c:	9204      	str	r2, [sp, #16]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	9203      	str	r2, [sp, #12]
 8005d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d94:	9202      	str	r2, [sp, #8]
 8005d96:	9301      	str	r3, [sp, #4]
 8005d98:	69fb      	ldr	r3, [r7, #28]
 8005d9a:	9300      	str	r3, [sp, #0]
 8005d9c:	4623      	mov	r3, r4
 8005d9e:	4602      	mov	r2, r0
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff fc83 	bl	80056ac <enable_ref_spads>
 8005da6:	4603      	mov	r3, r0
 8005da8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8005dac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10c      	bne.n	8005dce <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	79fa      	ldrb	r2, [r7, #7]
 8005dca:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8005dce:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3734      	adds	r7, #52	; 0x34
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd90      	pop	{r4, r7, pc}

08005dda <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10a      	bne.n	8005e08 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8005df2:	78fb      	ldrb	r3, [r7, #3]
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	b2db      	uxtb	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2100      	movs	r1, #0
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f002 fabe 	bl	8008380 <VL53L0X_WrByte>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8005e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d104      	bne.n	8005e1a <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f9bf 	bl	8006194 <VL53L0X_measurement_poll_for_completion>
 8005e16:	4603      	mov	r3, r0
 8005e18:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8005e22:	2100      	movs	r1, #0
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f7ff fab5 	bl	8005394 <VL53L0X_ClearInterruptMask>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8005e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d106      	bne.n	8005e44 <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8005e36:	2200      	movs	r2, #0
 8005e38:	2100      	movs	r1, #0
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f002 faa0 	bl	8008380 <VL53L0X_WrByte>
 8005e40:	4603      	mov	r3, r0
 8005e42:	73fb      	strb	r3, [r7, #15]

	return Status;
 8005e44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	4608      	mov	r0, r1
 8005e5a:	4611      	mov	r1, r2
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4603      	mov	r3, r0
 8005e60:	70fb      	strb	r3, [r7, #3]
 8005e62:	460b      	mov	r3, r1
 8005e64:	70bb      	strb	r3, [r7, #2]
 8005e66:	4613      	mov	r3, r2
 8005e68:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005e72:	2201      	movs	r2, #1
 8005e74:	21ff      	movs	r1, #255	; 0xff
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f002 fa82 	bl	8008380 <VL53L0X_WrByte>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	461a      	mov	r2, r3
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	4313      	orrs	r3, r2
 8005e84:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8005e86:	2200      	movs	r2, #0
 8005e88:	2100      	movs	r1, #0
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f002 fa78 	bl	8008380 <VL53L0X_WrByte>
 8005e90:	4603      	mov	r3, r0
 8005e92:	461a      	mov	r2, r3
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	21ff      	movs	r1, #255	; 0xff
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f002 fa6e 	bl	8008380 <VL53L0X_WrByte>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	7bfb      	ldrb	r3, [r7, #15]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8005eae:	78fb      	ldrb	r3, [r7, #3]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d01e      	beq.n	8005ef2 <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8005eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	21cb      	movs	r1, #203	; 0xcb
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f002 fadf 	bl	8008484 <VL53L0X_RdByte>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	461a      	mov	r2, r3
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005ed0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d02a      	beq.n	8005f2e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8005ed8:	f107 030e 	add.w	r3, r7, #14
 8005edc:	461a      	mov	r2, r3
 8005ede:	21ee      	movs	r1, #238	; 0xee
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f002 facf 	bl	8008484 <VL53L0X_RdByte>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	461a      	mov	r2, r3
 8005eea:	7bfb      	ldrb	r3, [r7, #15]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	73fb      	strb	r3, [r7, #15]
 8005ef0:	e01d      	b.n	8005f2e <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8005ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00a      	beq.n	8005f10 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005efa:	78bb      	ldrb	r3, [r7, #2]
 8005efc:	461a      	mov	r2, r3
 8005efe:	21cb      	movs	r1, #203	; 0xcb
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f002 fa3d 	bl	8008380 <VL53L0X_WrByte>
 8005f06:	4603      	mov	r3, r0
 8005f08:	461a      	mov	r2, r3
 8005f0a:	7bfb      	ldrb	r3, [r7, #15]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005f10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005f18:	787b      	ldrb	r3, [r7, #1]
 8005f1a:	2280      	movs	r2, #128	; 0x80
 8005f1c:	21ee      	movs	r1, #238	; 0xee
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f002 fa7c 	bl	800841c <VL53L0X_UpdateByte>
 8005f24:	4603      	mov	r3, r0
 8005f26:	461a      	mov	r2, r3
 8005f28:	7bfb      	ldrb	r3, [r7, #15]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005f2e:	2201      	movs	r2, #1
 8005f30:	21ff      	movs	r1, #255	; 0xff
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f002 fa24 	bl	8008380 <VL53L0X_WrByte>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	7bfb      	ldrb	r3, [r7, #15]
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005f42:	2201      	movs	r2, #1
 8005f44:	2100      	movs	r1, #0
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f002 fa1a 	bl	8008380 <VL53L0X_WrByte>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	461a      	mov	r2, r3
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005f56:	2200      	movs	r2, #0
 8005f58:	21ff      	movs	r1, #255	; 0xff
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f002 fa10 	bl	8008380 <VL53L0X_WrByte>
 8005f60:	4603      	mov	r3, r0
 8005f62:	461a      	mov	r2, r3
 8005f64:	7bfb      	ldrb	r3, [r7, #15]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005f6a:	7bbb      	ldrb	r3, [r7, #14]
 8005f6c:	f023 0310 	bic.w	r3, r3, #16
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	69fb      	ldr	r3, [r7, #28]
 8005f74:	701a      	strb	r2, [r3, #0]

	return Status;
 8005f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3710      	adds	r7, #16
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}

08005f82 <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b08a      	sub	sp, #40	; 0x28
 8005f86:	af04      	add	r7, sp, #16
 8005f88:	60f8      	str	r0, [r7, #12]
 8005f8a:	60b9      	str	r1, [r7, #8]
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	461a      	mov	r2, r3
 8005f90:	460b      	mov	r3, r1
 8005f92:	71fb      	strb	r3, [r7, #7]
 8005f94:	4613      	mov	r3, r2
 8005f96:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8005fac:	79bb      	ldrb	r3, [r7, #6]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d003      	beq.n	8005fba <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8005fb8:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8005fba:	2201      	movs	r2, #1
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f002 f9de 	bl	8008380 <VL53L0X_WrByte>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8005fc8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d105      	bne.n	8005fdc <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8005fd0:	2140      	movs	r1, #64	; 0x40
 8005fd2:	68f8      	ldr	r0, [r7, #12]
 8005fd4:	f7ff ff01 	bl	8005dda <VL53L0X_perform_single_ref_calibration>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8005fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d115      	bne.n	8006010 <VL53L0X_perform_vhv_calibration+0x8e>
 8005fe4:	79fb      	ldrb	r3, [r7, #7]
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d112      	bne.n	8006010 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005fea:	7d39      	ldrb	r1, [r7, #20]
 8005fec:	7d7a      	ldrb	r2, [r7, #21]
 8005fee:	2300      	movs	r3, #0
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	9302      	str	r3, [sp, #8]
 8005ff6:	f107 0313 	add.w	r3, r7, #19
 8005ffa:	9301      	str	r3, [sp, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	9300      	str	r3, [sp, #0]
 8006000:	460b      	mov	r3, r1
 8006002:	2101      	movs	r1, #1
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f7ff ff23 	bl	8005e50 <VL53L0X_ref_calibration_io>
 800600a:	4603      	mov	r3, r0
 800600c:	75fb      	strb	r3, [r7, #23]
 800600e:	e002      	b.n	8006016 <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2200      	movs	r2, #0
 8006014:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8006016:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d112      	bne.n	8006044 <VL53L0X_perform_vhv_calibration+0xc2>
 800601e:	79bb      	ldrb	r3, [r7, #6]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00f      	beq.n	8006044 <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006024:	7dbb      	ldrb	r3, [r7, #22]
 8006026:	461a      	mov	r2, r3
 8006028:	2101      	movs	r1, #1
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f002 f9a8 	bl	8008380 <VL53L0X_WrByte>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006034:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d103      	bne.n	8006044 <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	7dba      	ldrb	r2, [r7, #22]
 8006040:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006044:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006048:	4618      	mov	r0, r3
 800604a:	3718      	adds	r7, #24
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b08a      	sub	sp, #40	; 0x28
 8006054:	af04      	add	r7, sp, #16
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	4611      	mov	r1, r2
 800605c:	461a      	mov	r2, r3
 800605e:	460b      	mov	r3, r1
 8006060:	71fb      	strb	r3, [r7, #7]
 8006062:	4613      	mov	r3, r2
 8006064:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006066:	2300      	movs	r3, #0
 8006068:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800606a:	2300      	movs	r3, #0
 800606c:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 800606e:	2300      	movs	r3, #0
 8006070:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8006072:	2300      	movs	r3, #0
 8006074:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8006076:	79bb      	ldrb	r3, [r7, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d003      	beq.n	8006084 <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006082:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8006084:	2202      	movs	r2, #2
 8006086:	2101      	movs	r1, #1
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f002 f979 	bl	8008380 <VL53L0X_WrByte>
 800608e:	4603      	mov	r3, r0
 8006090:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8006092:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d105      	bne.n	80060a6 <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 800609a:	2100      	movs	r1, #0
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff fe9c 	bl	8005dda <VL53L0X_perform_single_ref_calibration>
 80060a2:	4603      	mov	r3, r0
 80060a4:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80060a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d115      	bne.n	80060da <VL53L0X_perform_phase_calibration+0x8a>
 80060ae:	79fb      	ldrb	r3, [r7, #7]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d112      	bne.n	80060da <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80060b4:	7d39      	ldrb	r1, [r7, #20]
 80060b6:	7d7a      	ldrb	r2, [r7, #21]
 80060b8:	2301      	movs	r3, #1
 80060ba:	9303      	str	r3, [sp, #12]
 80060bc:	2300      	movs	r3, #0
 80060be:	9302      	str	r3, [sp, #8]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	f107 0313 	add.w	r3, r7, #19
 80060c8:	9300      	str	r3, [sp, #0]
 80060ca:	460b      	mov	r3, r1
 80060cc:	2101      	movs	r1, #1
 80060ce:	68f8      	ldr	r0, [r7, #12]
 80060d0:	f7ff febe 	bl	8005e50 <VL53L0X_ref_calibration_io>
 80060d4:	4603      	mov	r3, r0
 80060d6:	75fb      	strb	r3, [r7, #23]
 80060d8:	e002      	b.n	80060e0 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2200      	movs	r2, #0
 80060de:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80060e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d112      	bne.n	800610e <VL53L0X_perform_phase_calibration+0xbe>
 80060e8:	79bb      	ldrb	r3, [r7, #6]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d00f      	beq.n	800610e <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80060ee:	7dbb      	ldrb	r3, [r7, #22]
 80060f0:	461a      	mov	r2, r3
 80060f2:	2101      	movs	r1, #1
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f002 f943 	bl	8008380 <VL53L0X_WrByte>
 80060fa:	4603      	mov	r3, r0
 80060fc:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 80060fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d103      	bne.n	800610e <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	7dba      	ldrb	r2, [r7, #22]
 800610a:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800610e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b086      	sub	sp, #24
 800611e:	af00      	add	r7, sp, #0
 8006120:	60f8      	str	r0, [r7, #12]
 8006122:	60b9      	str	r1, [r7, #8]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006128:	2300      	movs	r3, #0
 800612a:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8006136:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8006138:	78fa      	ldrb	r2, [r7, #3]
 800613a:	2300      	movs	r3, #0
 800613c:	68b9      	ldr	r1, [r7, #8]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7ff ff1f 	bl	8005f82 <VL53L0X_perform_vhv_calibration>
 8006144:	4603      	mov	r3, r0
 8006146:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8006148:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d107      	bne.n	8006160 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8006150:	78fa      	ldrb	r2, [r7, #3]
 8006152:	2300      	movs	r3, #0
 8006154:	6879      	ldr	r1, [r7, #4]
 8006156:	68f8      	ldr	r0, [r7, #12]
 8006158:	f7ff ff7a 	bl	8006050 <VL53L0X_perform_phase_calibration>
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8006160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10f      	bne.n	8006188 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8006168:	7dbb      	ldrb	r3, [r7, #22]
 800616a:	461a      	mov	r2, r3
 800616c:	2101      	movs	r1, #1
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f002 f906 	bl	8008380 <VL53L0X_WrByte>
 8006174:	4603      	mov	r3, r0
 8006176:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8006178:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d103      	bne.n	8006188 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	7dba      	ldrb	r2, [r7, #22]
 8006184:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8006188:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800619c:	2300      	movs	r3, #0
 800619e:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80061a4:	2300      	movs	r3, #0
 80061a6:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80061a8:	f107 030f 	add.w	r3, r7, #15
 80061ac:	4619      	mov	r1, r3
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7fe fdff 	bl	8004db2 <VL53L0X_GetMeasurementDataReady>
 80061b4:	4603      	mov	r3, r0
 80061b6:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80061b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d110      	bne.n	80061e2 <VL53L0X_measurement_poll_for_completion+0x4e>
			break; /* the error is set */

		if (NewDataReady == 1)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d00f      	beq.n	80061e6 <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */

		LoopNb++;
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3301      	adds	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80061d2:	d302      	bcc.n	80061da <VL53L0X_measurement_poll_for_completion+0x46>
			Status = VL53L0X_ERROR_TIME_OUT;
 80061d4:	23f9      	movs	r3, #249	; 0xf9
 80061d6:	75fb      	strb	r3, [r7, #23]
			break;
 80061d8:	e006      	b.n	80061e8 <VL53L0X_measurement_poll_for_completion+0x54>
		}

		VL53L0X_PollingDelay(Dev);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f002 f9f0 	bl	80085c0 <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80061e0:	e7e2      	b.n	80061a8 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80061e2:	bf00      	nop
 80061e4:	e000      	b.n	80061e8 <VL53L0X_measurement_poll_for_completion+0x54>
			break; /* done note that status == 0 */
 80061e6:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80061e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3718      	adds	r7, #24
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}

080061f4 <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	4603      	mov	r3, r0
 80061fc:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 80061fe:	2300      	movs	r3, #0
 8006200:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	3301      	adds	r3, #1
 8006206:	b2db      	uxtb	r3, r3
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr

0800621a <VL53L0X_isqrt>:
	return vcsel_period_reg;
}


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800621a:	b480      	push	{r7}
 800621c:	b085      	sub	sp, #20
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 8006222:	2300      	movs	r3, #0
 8006224:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8006226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800622a:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800622c:	e002      	b.n	8006234 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	089b      	lsrs	r3, r3, #2
 8006232:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	429a      	cmp	r2, r3
 800623a:	d8f8      	bhi.n	800622e <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800623c:	e017      	b.n	800626e <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4413      	add	r3, r2
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d30b      	bcc.n	8006262 <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	4413      	add	r3, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	1ad3      	subs	r3, r2, r3
 8006254:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	085b      	lsrs	r3, r3, #1
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
 8006260:	e002      	b.n	8006268 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	085b      	lsrs	r3, r3, #1
 8006266:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	089b      	lsrs	r3, r3, #2
 800626c:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1e4      	bne.n	800623e <VL53L0X_isqrt+0x24>
	}

	return res;
 8006274:	68fb      	ldr	r3, [r7, #12]
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b086      	sub	sp, #24
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800628a:	2300      	movs	r3, #0
 800628c:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800628e:	2200      	movs	r2, #0
 8006290:	2183      	movs	r1, #131	; 0x83
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f002 f874 	bl	8008380 <VL53L0X_WrByte>
 8006298:	4603      	mov	r3, r0
 800629a:	461a      	mov	r2, r3
 800629c:	7dfb      	ldrb	r3, [r7, #23]
 800629e:	4313      	orrs	r3, r2
 80062a0:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80062a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d11e      	bne.n	80062e8 <VL53L0X_device_read_strobe+0x66>
		LoopNb = 0;
 80062aa:	2300      	movs	r3, #0
 80062ac:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80062ae:	f107 030f 	add.w	r3, r7, #15
 80062b2:	461a      	mov	r2, r3
 80062b4:	2183      	movs	r1, #131	; 0x83
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f002 f8e4 	bl	8008484 <VL53L0X_RdByte>
 80062bc:	4603      	mov	r3, r0
 80062be:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d10a      	bne.n	80062dc <VL53L0X_device_read_strobe+0x5a>
 80062c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d106      	bne.n	80062dc <VL53L0X_device_read_strobe+0x5a>
					break;

			LoopNb = LoopNb + 1;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	3301      	adds	r3, #1
 80062d2:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062da:	d3e8      	bcc.n	80062ae <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80062e2:	d301      	bcc.n	80062e8 <VL53L0X_device_read_strobe+0x66>
			Status = VL53L0X_ERROR_TIME_OUT;
 80062e4:	23f9      	movs	r3, #249	; 0xf9
 80062e6:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 80062e8:	2201      	movs	r2, #1
 80062ea:	2183      	movs	r1, #131	; 0x83
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f002 f847 	bl	8008380 <VL53L0X_WrByte>
 80062f2:	4603      	mov	r3, r0
 80062f4:	461a      	mov	r2, r3
 80062f6:	7dfb      	ldrb	r3, [r7, #23]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 80062fc:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8006300:	4618      	mov	r0, r3
 8006302:	3718      	adds	r7, #24
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b098      	sub	sp, #96	; 0x60
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006314:	2300      	movs	r3, #0
 8006316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800631a:	2300      	movs	r3, #0
 800631c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 8006326:	2300      	movs	r3, #0
 8006328:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800632a:	2300      	movs	r3, #0
 800632c:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800632e:	2300      	movs	r3, #0
 8006330:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 8006332:	2300      	movs	r3, #0
 8006334:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8006338:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800633c:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800633e:	2300      	movs	r3, #0
 8006340:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8006350:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 8006354:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006358:	2b07      	cmp	r3, #7
 800635a:	f000 8408 	beq.w	8006b6e <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800635e:	2201      	movs	r2, #1
 8006360:	2180      	movs	r1, #128	; 0x80
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f002 f80c 	bl	8008380 <VL53L0X_WrByte>
 8006368:	4603      	mov	r3, r0
 800636a:	461a      	mov	r2, r3
 800636c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006370:	4313      	orrs	r3, r2
 8006372:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006376:	2201      	movs	r2, #1
 8006378:	21ff      	movs	r1, #255	; 0xff
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f002 f800 	bl	8008380 <VL53L0X_WrByte>
 8006380:	4603      	mov	r3, r0
 8006382:	461a      	mov	r2, r3
 8006384:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006388:	4313      	orrs	r3, r2
 800638a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800638e:	2200      	movs	r2, #0
 8006390:	2100      	movs	r1, #0
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f001 fff4 	bl	8008380 <VL53L0X_WrByte>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063a0:	4313      	orrs	r3, r2
 80063a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80063a6:	2206      	movs	r2, #6
 80063a8:	21ff      	movs	r1, #255	; 0xff
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 ffe8 	bl	8008380 <VL53L0X_WrByte>
 80063b0:	4603      	mov	r3, r0
 80063b2:	461a      	mov	r2, r3
 80063b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80063be:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80063c2:	461a      	mov	r2, r3
 80063c4:	2183      	movs	r1, #131	; 0x83
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f002 f85c 	bl	8008484 <VL53L0X_RdByte>
 80063cc:	4603      	mov	r3, r0
 80063ce:	461a      	mov	r2, r3
 80063d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063d4:	4313      	orrs	r3, r2
 80063d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 80063da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80063de:	f043 0304 	orr.w	r3, r3, #4
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	461a      	mov	r2, r3
 80063e6:	2183      	movs	r1, #131	; 0x83
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 ffc9 	bl	8008380 <VL53L0X_WrByte>
 80063ee:	4603      	mov	r3, r0
 80063f0:	461a      	mov	r2, r3
 80063f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 80063fc:	2207      	movs	r2, #7
 80063fe:	21ff      	movs	r1, #255	; 0xff
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f001 ffbd 	bl	8008380 <VL53L0X_WrByte>
 8006406:	4603      	mov	r3, r0
 8006408:	461a      	mov	r2, r3
 800640a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800640e:	4313      	orrs	r3, r2
 8006410:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 8006414:	2201      	movs	r2, #1
 8006416:	2181      	movs	r1, #129	; 0x81
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 ffb1 	bl	8008380 <VL53L0X_WrByte>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006426:	4313      	orrs	r3, r2
 8006428:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f002 f8c7 	bl	80085c0 <VL53L0X_PollingDelay>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800643a:	4313      	orrs	r3, r2
 800643c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8006440:	2201      	movs	r2, #1
 8006442:	2180      	movs	r1, #128	; 0x80
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 ff9b 	bl	8008380 <VL53L0X_WrByte>
 800644a:	4603      	mov	r3, r0
 800644c:	461a      	mov	r2, r3
 800644e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006452:	4313      	orrs	r3, r2
 8006454:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8006458:	78fb      	ldrb	r3, [r7, #3]
 800645a:	f003 0301 	and.w	r3, r3, #1
 800645e:	2b00      	cmp	r3, #0
 8006460:	f000 8098 	beq.w	8006594 <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006464:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006468:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 8091 	bne.w	8006594 <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 8006472:	226b      	movs	r2, #107	; 0x6b
 8006474:	2194      	movs	r1, #148	; 0x94
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 ff82 	bl	8008380 <VL53L0X_WrByte>
 800647c:	4603      	mov	r3, r0
 800647e:	461a      	mov	r2, r3
 8006480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006484:	4313      	orrs	r3, r2
 8006486:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7ff fef9 	bl	8006282 <VL53L0X_device_read_strobe>
 8006490:	4603      	mov	r3, r0
 8006492:	461a      	mov	r2, r3
 8006494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006498:	4313      	orrs	r3, r2
 800649a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800649e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80064a2:	461a      	mov	r2, r3
 80064a4:	2190      	movs	r1, #144	; 0x90
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f002 f84e 	bl	8008548 <VL53L0X_RdDWord>
 80064ac:	4603      	mov	r3, r0
 80064ae:	461a      	mov	r2, r3
 80064b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064b4:	4313      	orrs	r3, r2
 80064b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80064ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064bc:	0a1b      	lsrs	r3, r3, #8
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064c4:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 80064c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ca:	0bdb      	lsrs	r3, r3, #15
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 80064d6:	2224      	movs	r2, #36	; 0x24
 80064d8:	2194      	movs	r1, #148	; 0x94
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f001 ff50 	bl	8008380 <VL53L0X_WrByte>
 80064e0:	4603      	mov	r3, r0
 80064e2:	461a      	mov	r2, r3
 80064e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064e8:	4313      	orrs	r3, r2
 80064ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7ff fec7 	bl	8006282 <VL53L0X_device_read_strobe>
 80064f4:	4603      	mov	r3, r0
 80064f6:	461a      	mov	r2, r3
 80064f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80064fc:	4313      	orrs	r3, r2
 80064fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006502:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006506:	461a      	mov	r2, r3
 8006508:	2190      	movs	r1, #144	; 0x90
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f002 f81c 	bl	8008548 <VL53L0X_RdDWord>
 8006510:	4603      	mov	r3, r0
 8006512:	461a      	mov	r2, r3
 8006514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006518:	4313      	orrs	r3, r2
 800651a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	0e1b      	lsrs	r3, r3, #24
 8006522:	b2db      	uxtb	r3, r3
 8006524:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 8006526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	b2db      	uxtb	r3, r3
 800652c:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800652e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006530:	0a1b      	lsrs	r3, r3, #8
 8006532:	b2db      	uxtb	r3, r3
 8006534:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	b2db      	uxtb	r3, r3
 800653a:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800653c:	2225      	movs	r2, #37	; 0x25
 800653e:	2194      	movs	r1, #148	; 0x94
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 ff1d 	bl	8008380 <VL53L0X_WrByte>
 8006546:	4603      	mov	r3, r0
 8006548:	461a      	mov	r2, r3
 800654a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800654e:	4313      	orrs	r3, r2
 8006550:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f7ff fe94 	bl	8006282 <VL53L0X_device_read_strobe>
 800655a:	4603      	mov	r3, r0
 800655c:	461a      	mov	r2, r3
 800655e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006562:	4313      	orrs	r3, r2
 8006564:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006568:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800656c:	461a      	mov	r2, r3
 800656e:	2190      	movs	r1, #144	; 0x90
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 ffe9 	bl	8008548 <VL53L0X_RdDWord>
 8006576:	4603      	mov	r3, r0
 8006578:	461a      	mov	r2, r3
 800657a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800657e:	4313      	orrs	r3, r2
 8006580:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 8006584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006586:	0e1b      	lsrs	r3, r3, #24
 8006588:	b2db      	uxtb	r3, r3
 800658a:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800658c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	b2db      	uxtb	r3, r3
 8006592:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 8006594:	78fb      	ldrb	r3, [r7, #3]
 8006596:	f003 0302 	and.w	r3, r3, #2
 800659a:	2b00      	cmp	r3, #0
 800659c:	f000 8189 	beq.w	80068b2 <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80065a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80065a4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f040 8182 	bne.w	80068b2 <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80065ae:	2202      	movs	r2, #2
 80065b0:	2194      	movs	r1, #148	; 0x94
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f001 fee4 	bl	8008380 <VL53L0X_WrByte>
 80065b8:	4603      	mov	r3, r0
 80065ba:	461a      	mov	r2, r3
 80065bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065c0:	4313      	orrs	r3, r2
 80065c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f7ff fe5b 	bl	8006282 <VL53L0X_device_read_strobe>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065d4:	4313      	orrs	r3, r2
 80065d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 80065da:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80065de:	461a      	mov	r2, r3
 80065e0:	2190      	movs	r1, #144	; 0x90
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f001 ff4e 	bl	8008484 <VL53L0X_RdByte>
 80065e8:	4603      	mov	r3, r0
 80065ea:	461a      	mov	r2, r3
 80065ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80065f6:	227b      	movs	r2, #123	; 0x7b
 80065f8:	2194      	movs	r1, #148	; 0x94
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f001 fec0 	bl	8008380 <VL53L0X_WrByte>
 8006600:	4603      	mov	r3, r0
 8006602:	461a      	mov	r2, r3
 8006604:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006608:	4313      	orrs	r3, r2
 800660a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f7ff fe37 	bl	8006282 <VL53L0X_device_read_strobe>
 8006614:	4603      	mov	r3, r0
 8006616:	461a      	mov	r2, r3
 8006618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800661c:	4313      	orrs	r3, r2
 800661e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 8006622:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 8006626:	461a      	mov	r2, r3
 8006628:	2190      	movs	r1, #144	; 0x90
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f001 ff2a 	bl	8008484 <VL53L0X_RdByte>
 8006630:	4603      	mov	r3, r0
 8006632:	461a      	mov	r2, r3
 8006634:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006638:	4313      	orrs	r3, r2
 800663a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800663e:	2277      	movs	r2, #119	; 0x77
 8006640:	2194      	movs	r1, #148	; 0x94
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fe9c 	bl	8008380 <VL53L0X_WrByte>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006650:	4313      	orrs	r3, r2
 8006652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fe13 	bl	8006282 <VL53L0X_device_read_strobe>
 800665c:	4603      	mov	r3, r0
 800665e:	461a      	mov	r2, r3
 8006660:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006664:	4313      	orrs	r3, r2
 8006666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800666a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800666e:	461a      	mov	r2, r3
 8006670:	2190      	movs	r1, #144	; 0x90
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 ff68 	bl	8008548 <VL53L0X_RdDWord>
 8006678:	4603      	mov	r3, r0
 800667a:	461a      	mov	r2, r3
 800667c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006680:	4313      	orrs	r3, r2
 8006682:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 8006686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006688:	0e5b      	lsrs	r3, r3, #25
 800668a:	b2db      	uxtb	r3, r3
 800668c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006690:	b2db      	uxtb	r3, r3
 8006692:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 8006694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006696:	0c9b      	lsrs	r3, r3, #18
 8006698:	b2db      	uxtb	r3, r3
 800669a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80066a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a4:	0adb      	lsrs	r3, r3, #11
 80066a6:	b2db      	uxtb	r3, r3
 80066a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	091b      	lsrs	r3, r3, #4
 80066b4:	b2db      	uxtb	r3, r3
 80066b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	f003 0378 	and.w	r3, r3, #120	; 0x78
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 80066d0:	2278      	movs	r2, #120	; 0x78
 80066d2:	2194      	movs	r1, #148	; 0x94
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fe53 	bl	8008380 <VL53L0X_WrByte>
 80066da:	4603      	mov	r3, r0
 80066dc:	461a      	mov	r2, r3
 80066de:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066e2:	4313      	orrs	r3, r2
 80066e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f7ff fdca 	bl	8006282 <VL53L0X_device_read_strobe>
 80066ee:	4603      	mov	r3, r0
 80066f0:	461a      	mov	r2, r3
 80066f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80066fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006700:	461a      	mov	r2, r3
 8006702:	2190      	movs	r1, #144	; 0x90
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f001 ff1f 	bl	8008548 <VL53L0X_RdDWord>
 800670a:	4603      	mov	r3, r0
 800670c:	461a      	mov	r2, r3
 800670e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006712:	4313      	orrs	r3, r2
 8006714:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8006718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800671a:	0f5b      	lsrs	r3, r3, #29
 800671c:	b2db      	uxtb	r3, r3
 800671e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006722:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 8006724:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006728:	4413      	add	r3, r2
 800672a:	b2db      	uxtb	r3, r3
 800672c:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800672e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006730:	0d9b      	lsrs	r3, r3, #22
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006738:	b2db      	uxtb	r3, r3
 800673a:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800673c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800673e:	0bdb      	lsrs	r3, r3, #15
 8006740:	b2db      	uxtb	r3, r3
 8006742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006746:	b2db      	uxtb	r3, r3
 8006748:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800674a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674c:	0a1b      	lsrs	r3, r3, #8
 800674e:	b2db      	uxtb	r3, r3
 8006750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006754:	b2db      	uxtb	r3, r3
 8006756:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8006758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800675a:	085b      	lsrs	r3, r3, #1
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006762:	b2db      	uxtb	r3, r3
 8006764:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 8006766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006768:	b2db      	uxtb	r3, r3
 800676a:	019b      	lsls	r3, r3, #6
 800676c:	b2db      	uxtb	r3, r3
 800676e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 8006778:	2279      	movs	r2, #121	; 0x79
 800677a:	2194      	movs	r1, #148	; 0x94
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f001 fdff 	bl	8008380 <VL53L0X_WrByte>
 8006782:	4603      	mov	r3, r0
 8006784:	461a      	mov	r2, r3
 8006786:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800678a:	4313      	orrs	r3, r2
 800678c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f7ff fd76 	bl	8006282 <VL53L0X_device_read_strobe>
 8006796:	4603      	mov	r3, r0
 8006798:	461a      	mov	r2, r3
 800679a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800679e:	4313      	orrs	r3, r2
 80067a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80067a4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80067a8:	461a      	mov	r2, r3
 80067aa:	2190      	movs	r1, #144	; 0x90
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 fecb 	bl	8008548 <VL53L0X_RdDWord>
 80067b2:	4603      	mov	r3, r0
 80067b4:	461a      	mov	r2, r3
 80067b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80067ba:	4313      	orrs	r3, r2
 80067bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80067c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c2:	0e9b      	lsrs	r3, r3, #26
 80067c4:	b2db      	uxtb	r3, r3
 80067c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ca:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 80067cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80067d0:	4413      	add	r3, r2
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 80067d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d8:	0cdb      	lsrs	r3, r3, #19
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e6:	0b1b      	lsrs	r3, r3, #12
 80067e8:	b2db      	uxtb	r3, r3
 80067ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067ee:	b2db      	uxtb	r3, r3
 80067f0:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 80067f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8006800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006802:	b2db      	uxtb	r3, r3
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	b2db      	uxtb	r3, r3
 8006808:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800680c:	b2db      	uxtb	r3, r3
 800680e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 8006812:	227a      	movs	r2, #122	; 0x7a
 8006814:	2194      	movs	r1, #148	; 0x94
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f001 fdb2 	bl	8008380 <VL53L0X_WrByte>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006824:	4313      	orrs	r3, r2
 8006826:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f7ff fd29 	bl	8006282 <VL53L0X_device_read_strobe>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006838:	4313      	orrs	r3, r2
 800683a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800683e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006842:	461a      	mov	r2, r3
 8006844:	2190      	movs	r1, #144	; 0x90
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f001 fe7e 	bl	8008548 <VL53L0X_RdDWord>
 800684c:	4603      	mov	r3, r0
 800684e:	461a      	mov	r2, r3
 8006850:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006854:	4313      	orrs	r3, r2
 8006856:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800685a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800685c:	0f9b      	lsrs	r3, r3, #30
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006864:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 8006866:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800686a:	4413      	add	r3, r2
 800686c:	b2db      	uxtb	r3, r3
 800686e:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 8006870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006872:	0ddb      	lsrs	r3, r3, #23
 8006874:	b2db      	uxtb	r3, r3
 8006876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800687a:	b2db      	uxtb	r3, r3
 800687c:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800687e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006880:	0c1b      	lsrs	r3, r3, #16
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006888:	b2db      	uxtb	r3, r3
 800688a:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800688c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688e:	0a5b      	lsrs	r3, r3, #9
 8006890:	b2db      	uxtb	r3, r3
 8006892:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800689c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689e:	089b      	lsrs	r3, r3, #2
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80068ac:	2300      	movs	r3, #0
 80068ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80068b2:	78fb      	ldrb	r3, [r7, #3]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80f1 	beq.w	8006aa0 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80068be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068c2:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f040 80ea 	bne.w	8006aa0 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 80068cc:	227b      	movs	r2, #123	; 0x7b
 80068ce:	2194      	movs	r1, #148	; 0x94
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f001 fd55 	bl	8008380 <VL53L0X_WrByte>
 80068d6:	4603      	mov	r3, r0
 80068d8:	461a      	mov	r2, r3
 80068da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068de:	4313      	orrs	r3, r2
 80068e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f7ff fccc 	bl	8006282 <VL53L0X_device_read_strobe>
 80068ea:	4603      	mov	r3, r0
 80068ec:	461a      	mov	r2, r3
 80068ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80068f2:	4313      	orrs	r3, r2
 80068f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 80068f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068fc:	461a      	mov	r2, r3
 80068fe:	2190      	movs	r1, #144	; 0x90
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fe21 	bl	8008548 <VL53L0X_RdDWord>
 8006906:	4603      	mov	r3, r0
 8006908:	461a      	mov	r2, r3
 800690a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800690e:	4313      	orrs	r3, r2
 8006910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8006914:	227c      	movs	r2, #124	; 0x7c
 8006916:	2194      	movs	r1, #148	; 0x94
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f001 fd31 	bl	8008380 <VL53L0X_WrByte>
 800691e:	4603      	mov	r3, r0
 8006920:	461a      	mov	r2, r3
 8006922:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006926:	4313      	orrs	r3, r2
 8006928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff fca8 	bl	8006282 <VL53L0X_device_read_strobe>
 8006932:	4603      	mov	r3, r0
 8006934:	461a      	mov	r2, r3
 8006936:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800693a:	4313      	orrs	r3, r2
 800693c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8006940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006944:	461a      	mov	r2, r3
 8006946:	2190      	movs	r1, #144	; 0x90
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f001 fdfd 	bl	8008548 <VL53L0X_RdDWord>
 800694e:	4603      	mov	r3, r0
 8006950:	461a      	mov	r2, r3
 8006952:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006956:	4313      	orrs	r3, r2
 8006958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800695c:	2273      	movs	r2, #115	; 0x73
 800695e:	2194      	movs	r1, #148	; 0x94
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 fd0d 	bl	8008380 <VL53L0X_WrByte>
 8006966:	4603      	mov	r3, r0
 8006968:	461a      	mov	r2, r3
 800696a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800696e:	4313      	orrs	r3, r2
 8006970:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7ff fc84 	bl	8006282 <VL53L0X_device_read_strobe>
 800697a:	4603      	mov	r3, r0
 800697c:	461a      	mov	r2, r3
 800697e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006982:	4313      	orrs	r3, r2
 8006984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006988:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800698c:	461a      	mov	r2, r3
 800698e:	2190      	movs	r1, #144	; 0x90
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f001 fdd9 	bl	8008548 <VL53L0X_RdDWord>
 8006996:	4603      	mov	r3, r0
 8006998:	461a      	mov	r2, r3
 800699a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800699e:	4313      	orrs	r3, r2
 80069a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x0000000ff) << 8;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 80069a8:	b29b      	uxth	r3, r3
 80069aa:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 80069ac:	2274      	movs	r2, #116	; 0x74
 80069ae:	2194      	movs	r1, #148	; 0x94
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f001 fce5 	bl	8008380 <VL53L0X_WrByte>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069be:	4313      	orrs	r3, r2
 80069c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f7ff fc5c 	bl	8006282 <VL53L0X_device_read_strobe>
 80069ca:	4603      	mov	r3, r0
 80069cc:	461a      	mov	r2, r3
 80069ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069d2:	4313      	orrs	r3, r2
 80069d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80069d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80069dc:	461a      	mov	r2, r3
 80069de:	2190      	movs	r1, #144	; 0x90
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 fdb1 	bl	8008548 <VL53L0X_RdDWord>
 80069e6:	4603      	mov	r3, r0
 80069e8:	461a      	mov	r2, r3
 80069ea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069ee:	4313      	orrs	r3, r2
 80069f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 80069f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069f6:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 80069f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80069fa:	4313      	orrs	r3, r2
 80069fc:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 80069fe:	2275      	movs	r2, #117	; 0x75
 8006a00:	2194      	movs	r1, #148	; 0x94
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fcbc 	bl	8008380 <VL53L0X_WrByte>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a10:	4313      	orrs	r3, r2
 8006a12:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff fc33 	bl	8006282 <VL53L0X_device_read_strobe>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a24:	4313      	orrs	r3, r2
 8006a26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a2a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a2e:	461a      	mov	r2, r3
 8006a30:	2190      	movs	r1, #144	; 0x90
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f001 fd88 	bl	8008548 <VL53L0X_RdDWord>
 8006a38:	4603      	mov	r3, r0
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a40:	4313      	orrs	r3, r2
 8006a42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
							<< 8;
 8006a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a48:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x0000000ff)
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8006a4e:	2276      	movs	r2, #118	; 0x76
 8006a50:	2194      	movs	r1, #148	; 0x94
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f001 fc94 	bl	8008380 <VL53L0X_WrByte>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	461a      	mov	r2, r3
 8006a5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a60:	4313      	orrs	r3, r2
 8006a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fc0b 	bl	8006282 <VL53L0X_device_read_strobe>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a74:	4313      	orrs	r3, r2
 8006a76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8006a7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2190      	movs	r1, #144	; 0x90
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f001 fd60 	bl	8008548 <VL53L0X_RdDWord>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a90:	4313      	orrs	r3, r2
 8006a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8006a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a98:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8006a9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	2181      	movs	r1, #129	; 0x81
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 fc6b 	bl	8008380 <VL53L0X_WrByte>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	461a      	mov	r2, r3
 8006aae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8006ab8:	2206      	movs	r2, #6
 8006aba:	21ff      	movs	r1, #255	; 0xff
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fc5f 	bl	8008380 <VL53L0X_WrByte>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006aca:	4313      	orrs	r3, r2
 8006acc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8006ad0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	2183      	movs	r1, #131	; 0x83
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f001 fcd3 	bl	8008484 <VL53L0X_RdByte>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8006aec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006af0:	f023 0304 	bic.w	r3, r3, #4
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	461a      	mov	r2, r3
 8006af8:	2183      	movs	r1, #131	; 0x83
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f001 fc40 	bl	8008380 <VL53L0X_WrByte>
 8006b00:	4603      	mov	r3, r0
 8006b02:	461a      	mov	r2, r3
 8006b04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8006b0e:	2201      	movs	r2, #1
 8006b10:	21ff      	movs	r1, #255	; 0xff
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 fc34 	bl	8008380 <VL53L0X_WrByte>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b20:	4313      	orrs	r3, r2
 8006b22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8006b26:	2201      	movs	r2, #1
 8006b28:	2100      	movs	r1, #0
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f001 fc28 	bl	8008380 <VL53L0X_WrByte>
 8006b30:	4603      	mov	r3, r0
 8006b32:	461a      	mov	r2, r3
 8006b34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8006b3e:	2200      	movs	r2, #0
 8006b40:	21ff      	movs	r1, #255	; 0xff
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fc1c 	bl	8008380 <VL53L0X_WrByte>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8006b56:	2200      	movs	r2, #0
 8006b58:	2180      	movs	r1, #128	; 0x80
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fc10 	bl	8008380 <VL53L0X_WrByte>
 8006b60:	4603      	mov	r3, r0
 8006b62:	461a      	mov	r2, r3
 8006b64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8006b6e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f040 808f 	bne.w	8006c96 <VL53L0X_get_info_from_device+0x98e>
 8006b78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b7c:	2b07      	cmp	r3, #7
 8006b7e:	f000 808a 	beq.w	8006c96 <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8006b82:	78fb      	ldrb	r3, [r7, #3]
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d024      	beq.n	8006bd6 <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8006b8c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b90:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d11e      	bne.n	8006bd6 <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8006b9e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8006ba8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006bac:	2300      	movs	r3, #0
 8006bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bb0:	e00e      	b.n	8006bd0 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8006bb2:	f107 0208 	add.w	r2, r7, #8
 8006bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bb8:	4413      	add	r3, r2
 8006bba:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8006bc6:	460a      	mov	r2, r1
 8006bc8:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8006bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bcc:	3301      	adds	r3, #1
 8006bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd2:	2b05      	cmp	r3, #5
 8006bd4:	dded      	ble.n	8006bb2 <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8006bd6:	78fb      	ldrb	r3, [r7, #3]
 8006bd8:	f003 0302 	and.w	r3, r3, #2
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d018      	beq.n	8006c12 <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8006be0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006be4:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d112      	bne.n	8006c12 <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006bf6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	33f3      	adds	r3, #243	; 0xf3
 8006c04:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8006c06:	f107 0310 	add.w	r3, r7, #16
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c0e:	f002 fe3a 	bl	8009886 <strcpy>

		}

		if (((option & 4) == 4) &&
 8006c12:	78fb      	ldrb	r3, [r7, #3]
 8006c14:	f003 0304 	and.w	r3, r3, #4
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d030      	beq.n	8006c7e <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8006c1c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c20:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d12a      	bne.n	8006c7e <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8006c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c3a:	025b      	lsls	r3, r3, #9
 8006c3c:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c42:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8006c46:	2300      	movs	r3, #0
 8006c48:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8006c4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d011      	beq.n	8006c76 <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8006c52:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006c54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8006c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c5c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c60:	fb02 f303 	mul.w	r3, r2, r3
 8006c64:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8006c66:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8006c6a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8006c6e:	425b      	negs	r3, r3
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8006c76:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8006c7e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006c82:	78fb      	ldrb	r3, [r7, #3]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8006c8c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006c96:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3760      	adds	r7, #96	; 0x60
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}

08006ca2 <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8006ca2:	b490      	push	{r4, r7}
 8006ca4:	b086      	sub	sp, #24
 8006ca6:	af00      	add	r7, sp, #0
 8006ca8:	6078      	str	r0, [r7, #4]
 8006caa:	460b      	mov	r3, r1
 8006cac:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8006cae:	f240 6377 	movw	r3, #1655	; 0x677
 8006cb2:	f04f 0400 	mov.w	r4, #0
 8006cb6:	e9c7 3404 	strd	r3, r4, [r7, #16]

	macro_period_vclks = 2304;
 8006cba:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8006cbe:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8006cc0:	78fb      	ldrb	r3, [r7, #3]
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8006cc8:	693a      	ldr	r2, [r7, #16]
 8006cca:	fb02 f303 	mul.w	r3, r2, r3
 8006cce:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bc90      	pop	{r4, r7}
 8006cda:	4770      	bx	lr

08006cdc <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b087      	sub	sp, #28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8006cec:	2300      	movs	r3, #0
 8006cee:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	3b01      	subs	r3, #1
 8006cfa:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006cfc:	e005      	b.n	8006d0a <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8006cfe:	693b      	ldr	r3, [r7, #16]
 8006d00:	085b      	lsrs	r3, r3, #1
 8006d02:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8006d04:	89fb      	ldrh	r3, [r7, #14]
 8006d06:	3301      	adds	r3, #1
 8006d08:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d1f4      	bne.n	8006cfe <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8006d14:	89fb      	ldrh	r3, [r7, #14]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8006d22:	4413      	add	r3, r2
 8006d24:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8006d26:	8afb      	ldrh	r3, [r7, #22]

}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	371c      	adds	r7, #28
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006d42:	88fb      	ldrh	r3, [r7, #6]
 8006d44:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8006d46:	88fa      	ldrh	r2, [r7, #6]
 8006d48:	0a12      	lsrs	r2, r2, #8
 8006d4a:	b292      	uxth	r2, r2
 8006d4c:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8006d4e:	3301      	adds	r3, #1
 8006d50:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8006d52:	68fb      	ldr	r3, [r7, #12]
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006d72:	79fb      	ldrb	r3, [r7, #7]
 8006d74:	4619      	mov	r1, r3
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff ff93 	bl	8006ca2 <VL53L0X_calc_macro_period_ps>
 8006d7c:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006d84:	4a0a      	ldr	r2, [pc, #40]	; (8006db0 <VL53L0X_calc_timeout_mclks+0x50>)
 8006d86:	fba2 2303 	umull	r2, r3, r2, r3
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d94:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	085b      	lsrs	r3, r3, #1
 8006d9c:	441a      	add	r2, r3
	timeout_period_mclks =
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da4:	61fb      	str	r3, [r7, #28]

    return timeout_period_mclks;
 8006da6:	69fb      	ldr	r3, [r7, #28]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	10624dd3 	.word	0x10624dd3

08006db4 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b086      	sub	sp, #24
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	807b      	strh	r3, [r7, #2]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8006dc8:	787b      	ldrb	r3, [r7, #1]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f7ff ff68 	bl	8006ca2 <VL53L0X_calc_macro_period_ps>
 8006dd2:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006dda:	4a0a      	ldr	r2, [pc, #40]	; (8006e04 <VL53L0X_calc_timeout_us+0x50>)
 8006ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8006de0:	099b      	lsrs	r3, r3, #6
 8006de2:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns) + 500) / 1000;
 8006de4:	887b      	ldrh	r3, [r7, #2]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
 8006dec:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
	actual_timeout_period_us =
 8006df0:	4a04      	ldr	r2, [pc, #16]	; (8006e04 <VL53L0X_calc_timeout_us+0x50>)
 8006df2:	fba2 2303 	umull	r2, r3, r2, r3
 8006df6:	099b      	lsrs	r3, r3, #6
 8006df8:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8006dfa:	697b      	ldr	r3, [r7, #20]
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3718      	adds	r7, #24
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}
 8006e04:	10624dd3 	.word	0x10624dd3

08006e08 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b08c      	sub	sp, #48	; 0x30
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	60f8      	str	r0, [r7, #12]
 8006e10:	460b      	mov	r3, r1
 8006e12:	607a      	str	r2, [r7, #4]
 8006e14:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8006e22:	2300      	movs	r3, #0
 8006e24:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006e2e:	7afb      	ldrb	r3, [r7, #11]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <get_sequence_step_timeout+0x38>
 8006e34:	7afb      	ldrb	r3, [r7, #11]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d002      	beq.n	8006e40 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006e3a:	7afb      	ldrb	r3, [r7, #11]
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d128      	bne.n	8006e92 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e40:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e44:	461a      	mov	r2, r3
 8006e46:	2100      	movs	r1, #0
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f7fd fa91 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8006e54:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d109      	bne.n	8006e70 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8006e5c:	f107 0320 	add.w	r3, r7, #32
 8006e60:	461a      	mov	r2, r3
 8006e62:	2146      	movs	r1, #70	; 0x46
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f001 fb0d 	bl	8008484 <VL53L0X_RdByte>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8006e70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e74:	b29b      	uxth	r3, r3
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7ff ff5c 	bl	8006d34 <VL53L0X_decode_timeout>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006e80:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006e84:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006e86:	4619      	mov	r1, r3
 8006e88:	68f8      	ldr	r0, [r7, #12]
 8006e8a:	f7ff ff93 	bl	8006db4 <VL53L0X_calc_timeout_us>
 8006e8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8006e90:	e092      	b.n	8006fb8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8006e92:	7afb      	ldrb	r3, [r7, #11]
 8006e94:	2b03      	cmp	r3, #3
 8006e96:	d135      	bne.n	8006f04 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006e98:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	68f8      	ldr	r0, [r7, #12]
 8006ea2:	f7fd fa65 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006eac:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	f040 8081 	bne.w	8006fb8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006eb6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006eba:	461a      	mov	r2, r3
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	68f8      	ldr	r0, [r7, #12]
 8006ec0:	f7fd fa56 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 8006eca:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006ed2:	f107 031e 	add.w	r3, r7, #30
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	2151      	movs	r1, #81	; 0x51
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f001 fafc 	bl	80084d8 <VL53L0X_RdWord>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006ee6:	8bfb      	ldrh	r3, [r7, #30]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f7ff ff23 	bl	8006d34 <VL53L0X_decode_timeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006ef2:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006ef6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006ef8:	4619      	mov	r1, r3
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff ff5a 	bl	8006db4 <VL53L0X_calc_timeout_us>
 8006f00:	62b8      	str	r0, [r7, #40]	; 0x28
 8006f02:	e059      	b.n	8006fb8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006f04:	7afb      	ldrb	r3, [r7, #11]
 8006f06:	2b04      	cmp	r3, #4
 8006f08:	d156      	bne.n	8006fb8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006f0a:	f107 0314 	add.w	r3, r7, #20
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fd fb39 	bl	8004588 <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d01d      	beq.n	8006f5c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f20:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f24:	461a      	mov	r2, r3
 8006f26:	2100      	movs	r1, #0
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f7fd fa21 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006f34:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10f      	bne.n	8006f5c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 8006f3c:	f107 031e 	add.w	r3, r7, #30
 8006f40:	461a      	mov	r2, r3
 8006f42:	2151      	movs	r1, #81	; 0x51
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f001 fac7 	bl	80084d8 <VL53L0X_RdWord>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f50:	8bfb      	ldrh	r3, [r7, #30]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7ff feee 	bl	8006d34 <VL53L0X_decode_timeout>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006f5c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d109      	bne.n	8006f78 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006f64:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006f68:	461a      	mov	r2, r3
 8006f6a:	2101      	movs	r1, #1
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fd f9ff 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8006f72:	4603      	mov	r3, r0
 8006f74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8006f78:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10f      	bne.n	8006fa0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 8006f80:	f107 031c 	add.w	r3, r7, #28
 8006f84:	461a      	mov	r2, r3
 8006f86:	2171      	movs	r1, #113	; 0x71
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f001 faa5 	bl	80084d8 <VL53L0X_RdWord>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006f94:	8bbb      	ldrh	r3, [r7, #28]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7ff fecc 	bl	8006d34 <VL53L0X_decode_timeout>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 8006fa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006fa2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006fa8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006fac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fae:	4619      	mov	r1, r3
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f7ff feff 	bl	8006db4 <VL53L0X_calc_timeout_us>
 8006fb6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fbc:	601a      	str	r2, [r3, #0]

	return Status;
 8006fbe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3730      	adds	r7, #48	; 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 8006fca:	b580      	push	{r7, lr}
 8006fcc:	b08a      	sub	sp, #40	; 0x28
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	60f8      	str	r0, [r7, #12]
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	607a      	str	r2, [r7, #4]
 8006fd6:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006fd8:	2300      	movs	r3, #0
 8006fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint32_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8006fde:	7afb      	ldrb	r3, [r7, #11]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d005      	beq.n	8006ff0 <set_sequence_step_timeout+0x26>
 8006fe4:	7afb      	ldrb	r3, [r7, #11]
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d002      	beq.n	8006ff0 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d138      	bne.n	8007062 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006ff0:	f107 031b 	add.w	r3, r7, #27
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f7fd f9b9 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8006ffe:	4603      	mov	r3, r0
 8007000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8007004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007008:	2b00      	cmp	r3, #0
 800700a:	d11a      	bne.n	8007042 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800700c:	7efb      	ldrb	r3, [r7, #27]
 800700e:	461a      	mov	r2, r3
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7ff fea4 	bl	8006d60 <VL53L0X_calc_timeout_mclks>
 8007018:	4603      	mov	r3, r0
 800701a:	83bb      	strh	r3, [r7, #28]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800701c:	8bbb      	ldrh	r3, [r7, #28]
 800701e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007022:	d903      	bls.n	800702c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8007024:	23ff      	movs	r3, #255	; 0xff
 8007026:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800702a:	e004      	b.n	8007036 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800702c:	8bbb      	ldrh	r3, [r7, #28]
 800702e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8007030:	3b01      	subs	r3, #1
 8007032:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8007036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800703a:	b29a      	uxth	r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8007042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007046:	2b00      	cmp	r3, #0
 8007048:	f040 80ab 	bne.w	80071a2 <set_sequence_step_timeout+0x1d8>
			Status = VL53L0X_WrByte(Dev,
 800704c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007050:	461a      	mov	r2, r3
 8007052:	2146      	movs	r1, #70	; 0x46
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f001 f993 	bl	8008380 <VL53L0X_WrByte>
 800705a:	4603      	mov	r3, r0
 800705c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 8007060:	e09f      	b.n	80071a2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8007062:	7afb      	ldrb	r3, [r7, #11]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d135      	bne.n	80070d4 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 8007068:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800706c:	2b00      	cmp	r3, #0
 800706e:	d11b      	bne.n	80070a8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007070:	f107 031b 	add.w	r3, r7, #27
 8007074:	461a      	mov	r2, r3
 8007076:	2100      	movs	r1, #0
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7fd f979 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 800707e:	4603      	mov	r3, r0
 8007080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007084:	7efb      	ldrb	r3, [r7, #27]
 8007086:	461a      	mov	r2, r3
 8007088:	6879      	ldr	r1, [r7, #4]
 800708a:	68f8      	ldr	r0, [r7, #12]
 800708c:	f7ff fe68 	bl	8006d60 <VL53L0X_calc_timeout_mclks>
 8007090:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 8007092:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 8007094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fe20 	bl	8006cdc <VL53L0X_encode_timeout>
 800709c:	4603      	mov	r3, r0
 800709e:	833b      	strh	r3, [r7, #24]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80070a0:	8b3a      	ldrh	r2, [r7, #24]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80070a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d108      	bne.n	80070c2 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80070b0:	8b3b      	ldrh	r3, [r7, #24]
 80070b2:	461a      	mov	r2, r3
 80070b4:	2151      	movs	r1, #81	; 0x51
 80070b6:	68f8      	ldr	r0, [r7, #12]
 80070b8:	f001 f986 	bl	80083c8 <VL53L0X_WrWord>
 80070bc:	4603      	mov	r3, r0
 80070be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80070c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d16b      	bne.n	80071a2 <set_sequence_step_timeout+0x1d8>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 80070d2:	e066      	b.n	80071a2 <set_sequence_step_timeout+0x1d8>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 80070d4:	7afb      	ldrb	r3, [r7, #11]
 80070d6:	2b04      	cmp	r3, #4
 80070d8:	d160      	bne.n	800719c <set_sequence_step_timeout+0x1d2>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 80070da:	f107 0310 	add.w	r3, r7, #16
 80070de:	4619      	mov	r1, r3
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7fd fa51 	bl	8004588 <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 80070e6:	2300      	movs	r3, #0
 80070e8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 80070ea:	7cfb      	ldrb	r3, [r7, #19]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d01d      	beq.n	800712c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80070f0:	f107 031b 	add.w	r3, r7, #27
 80070f4:	461a      	mov	r2, r3
 80070f6:	2100      	movs	r1, #0
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f7fd f939 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8007104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10f      	bne.n	800712c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	461a      	mov	r2, r3
 8007112:	2151      	movs	r1, #81	; 0x51
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f001 f9df 	bl	80084d8 <VL53L0X_RdWord>
 800711a:	4603      	mov	r3, r0
 800711c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8007120:	8b3b      	ldrh	r3, [r7, #24]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff fe06 	bl	8006d34 <VL53L0X_decode_timeout>
 8007128:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800712a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800712c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007130:	2b00      	cmp	r3, #0
 8007132:	d109      	bne.n	8007148 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8007134:	f107 031b 	add.w	r3, r7, #27
 8007138:	461a      	mov	r2, r3
 800713a:	2101      	movs	r1, #1
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7fd f917 	bl	8004370 <VL53L0X_GetVcselPulsePeriod>
 8007142:	4603      	mov	r3, r0
 8007144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8007148:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800714c:	2b00      	cmp	r3, #0
 800714e:	d128      	bne.n	80071a2 <set_sequence_step_timeout+0x1d8>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8007150:	7efb      	ldrb	r3, [r7, #27]
				FinalRangeTimeOutMClks =
 8007152:	461a      	mov	r2, r3
 8007154:	6879      	ldr	r1, [r7, #4]
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fe02 	bl	8006d60 <VL53L0X_calc_timeout_mclks>
 800715c:	6238      	str	r0, [r7, #32]
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800715e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007160:	6a3a      	ldr	r2, [r7, #32]
 8007162:	4413      	add	r3, r2
 8007164:	623b      	str	r3, [r7, #32]

				FinalRangeEncodedTimeOut =
 8007166:	6a38      	ldr	r0, [r7, #32]
 8007168:	f7ff fdb8 	bl	8006cdc <VL53L0X_encode_timeout>
 800716c:	4603      	mov	r3, r0
 800716e:	83fb      	strh	r3, [r7, #30]
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);

				if (Status == VL53L0X_ERROR_NONE) {
 8007170:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007174:	2b00      	cmp	r3, #0
 8007176:	d108      	bne.n	800718a <set_sequence_step_timeout+0x1c0>
					Status = VL53L0X_WrWord(Dev, 0x71,
 8007178:	8bfb      	ldrh	r3, [r7, #30]
 800717a:	461a      	mov	r2, r3
 800717c:	2171      	movs	r1, #113	; 0x71
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f001 f922 	bl	80083c8 <VL53L0X_WrWord>
 8007184:	4603      	mov	r3, r0
 8007186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800718a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800718e:	2b00      	cmp	r3, #0
 8007190:	d107      	bne.n	80071a2 <set_sequence_step_timeout+0x1d8>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800719a:	e002      	b.n	80071a2 <set_sequence_step_timeout+0x1d8>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800719c:	23fc      	movs	r3, #252	; 0xfc
 800719e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80071a2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3728      	adds	r7, #40	; 0x28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <VL53L0X_get_vcsel_pulse_period>:
	return Status;
}

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80071ae:	b580      	push	{r7, lr}
 80071b0:	b086      	sub	sp, #24
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	60f8      	str	r0, [r7, #12]
 80071b6:	460b      	mov	r3, r1
 80071b8:	607a      	str	r2, [r7, #4]
 80071ba:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <VL53L0X_get_vcsel_pulse_period+0x1e>
 80071c6:	2b01      	cmp	r3, #1
 80071c8:	d00a      	beq.n	80071e0 <VL53L0X_get_vcsel_pulse_period+0x32>
 80071ca:	e013      	b.n	80071f4 <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80071cc:	f107 0316 	add.w	r3, r7, #22
 80071d0:	461a      	mov	r2, r3
 80071d2:	2150      	movs	r1, #80	; 0x50
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f001 f955 	bl	8008484 <VL53L0X_RdByte>
 80071da:	4603      	mov	r3, r0
 80071dc:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80071de:	e00b      	b.n	80071f8 <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 80071e0:	f107 0316 	add.w	r3, r7, #22
 80071e4:	461a      	mov	r2, r3
 80071e6:	2170      	movs	r1, #112	; 0x70
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f001 f94b 	bl	8008484 <VL53L0X_RdByte>
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 80071f2:	e001      	b.n	80071f8 <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80071f4:	23fc      	movs	r3, #252	; 0xfc
 80071f6:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 80071f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d107      	bne.n	8007210 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8007200:	7dbb      	ldrb	r3, [r7, #22]
 8007202:	4618      	mov	r0, r3
 8007204:	f7fe fff6 	bl	80061f4 <VL53L0X_decode_vcsel_period>
 8007208:	4603      	mov	r3, r0
 800720a:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	701a      	strb	r2, [r3, #0]

	return Status;
 8007210:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b092      	sub	sp, #72	; 0x48
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007226:	2300      	movs	r3, #0
 8007228:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800722c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007230:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8007232:	f240 7376 	movw	r3, #1910	; 0x776
 8007236:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 8007238:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800723e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007242:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 8007244:	f240 234e 	movw	r3, #590	; 0x24e
 8007248:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800724a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800724e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007250:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007254:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007256:	f240 2326 	movw	r3, #550	; 0x226
 800725a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 8007260:	f644 6320 	movw	r3, #20000	; 0x4e20
 8007264:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	429a      	cmp	r2, r3
 8007270:	d205      	bcs.n	800727e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007272:	23fc      	movs	r3, #252	; 0xfc
 8007274:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 8007278:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800727c:	e0aa      	b.n	80073d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800727e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007282:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 8007284:	683a      	ldr	r2, [r7, #0]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800728a:	f107 0314 	add.w	r3, r7, #20
 800728e:	4619      	mov	r1, r3
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7fd f979 	bl	8004588 <VL53L0X_GetSequenceStepEnables>
 8007296:	4603      	mov	r3, r0
 8007298:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800729c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d15b      	bne.n	800735c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80072a4:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d105      	bne.n	80072b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 80072aa:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d102      	bne.n	80072b6 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 80072b0:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d052      	beq.n	800735c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 80072b6:	f107 0310 	add.w	r3, r7, #16
 80072ba:	461a      	mov	r2, r3
 80072bc:	2102      	movs	r1, #2
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f7ff fda2 	bl	8006e08 <get_sequence_step_timeout>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 80072ca:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d002      	beq.n	80072d8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 80072d2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80072d6:	e07d      	b.n	80073d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 80072d8:	7d3b      	ldrb	r3, [r7, #20]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00f      	beq.n	80072fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 80072de:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 80072e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072e2:	4413      	add	r3, r2
 80072e4:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 80072e6:	69fa      	ldr	r2, [r7, #28]
 80072e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d204      	bcs.n	80072f8 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 80072ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	643b      	str	r3, [r7, #64]	; 0x40
 80072f6:	e002      	b.n	80072fe <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80072f8:	23fc      	movs	r3, #252	; 0xfc
 80072fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 80072fe:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007302:	2b00      	cmp	r3, #0
 8007304:	d002      	beq.n	800730c <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 8007306:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800730a:	e063      	b.n	80073d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800730c:	7dbb      	ldrb	r3, [r7, #22]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d011      	beq.n	8007336 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	4413      	add	r3, r2
 8007318:	005b      	lsls	r3, r3, #1
 800731a:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800731c:	69fa      	ldr	r2, [r7, #28]
 800731e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007320:	429a      	cmp	r2, r3
 8007322:	d204      	bcs.n	800732e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 8007324:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	1ad3      	subs	r3, r2, r3
 800732a:	643b      	str	r3, [r7, #64]	; 0x40
 800732c:	e016      	b.n	800735c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800732e:	23fc      	movs	r3, #252	; 0xfc
 8007330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007334:	e012      	b.n	800735c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 8007336:	7d7b      	ldrb	r3, [r7, #21]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00f      	beq.n	800735c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007340:	4413      	add	r3, r2
 8007342:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007348:	429a      	cmp	r2, r3
 800734a:	d204      	bcs.n	8007356 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800734c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	643b      	str	r3, [r7, #64]	; 0x40
 8007354:	e002      	b.n	800735c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007356:	23fc      	movs	r3, #252	; 0xfc
 8007358:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800735c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007360:	2b00      	cmp	r3, #0
 8007362:	d002      	beq.n	800736a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007364:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8007368:	e034      	b.n	80073d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d019      	beq.n	80073a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 8007370:	f107 030c 	add.w	r3, r7, #12
 8007374:	461a      	mov	r2, r3
 8007376:	2103      	movs	r1, #3
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7ff fd45 	bl	8006e08 <get_sequence_step_timeout>
 800737e:	4603      	mov	r3, r0
 8007380:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007388:	4413      	add	r3, r2
 800738a:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800738c:	69fa      	ldr	r2, [r7, #28]
 800738e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007390:	429a      	cmp	r2, r3
 8007392:	d204      	bcs.n	800739e <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 8007394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	643b      	str	r3, [r7, #64]	; 0x40
 800739c:	e002      	b.n	80073a4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800739e:	23fc      	movs	r3, #252	; 0xfc
 80073a0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80073a4:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d111      	bne.n	80073d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 80073ac:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00e      	beq.n	80073d0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 80073b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	1ad3      	subs	r3, r2, r3
 80073b8:	643b      	str	r3, [r7, #64]	; 0x40
		 * budget and the sum of all other timeouts within the sequence.
		 * If there is no room for the final range timeout, then an error
		 * will be set. Otherwise the remaining time will be applied to
		 * the final range.
		 */
		Status = set_sequence_step_timeout(Dev,
 80073ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073bc:	2104      	movs	r1, #4
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fe03 	bl	8006fca <set_sequence_step_timeout>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	683a      	ldr	r2, [r7, #0]
 80073ce:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80073d0:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3748      	adds	r7, #72	; 0x48
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b090      	sub	sp, #64	; 0x40
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 80073ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80073f0:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 80073f2:	f240 7376 	movw	r3, #1910	; 0x776
 80073f6:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 80073f8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80073fc:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 80073fe:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007402:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8007404:	f240 234e 	movw	r3, #590	; 0x24e
 8007408:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800740a:	f240 23b2 	movw	r3, #690	; 0x2b2
 800740e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8007410:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007414:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8007416:	f240 2326 	movw	r3, #550	; 0x226
 800741a:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8007420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007424:	441a      	add	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800742a:	f107 0318 	add.w	r3, r7, #24
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7fd f8a9 	bl	8004588 <VL53L0X_GetSequenceStepEnables>
 8007436:	4603      	mov	r3, r0
 8007438:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800743c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007440:	2b00      	cmp	r3, #0
 8007442:	d002      	beq.n	800744a <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8007444:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007448:	e075      	b.n	8007536 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800744a:	7e3b      	ldrb	r3, [r7, #24]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d105      	bne.n	800745c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8007450:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8007452:	2b00      	cmp	r3, #0
 8007454:	d102      	bne.n	800745c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8007456:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8007458:	2b00      	cmp	r3, #0
 800745a:	d030      	beq.n	80074be <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800745c:	f107 0310 	add.w	r3, r7, #16
 8007460:	461a      	mov	r2, r3
 8007462:	2102      	movs	r1, #2
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff fccf 	bl	8006e08 <get_sequence_step_timeout>
 800746a:	4603      	mov	r3, r0
 800746c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8007470:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007474:	2b00      	cmp	r3, #0
 8007476:	d122      	bne.n	80074be <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8007478:	7e3b      	ldrb	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d007      	beq.n	800748e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8007482:	6939      	ldr	r1, [r7, #16]
 8007484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007486:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8007488:	441a      	add	r2, r3
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800748e:	7ebb      	ldrb	r3, [r7, #26]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d009      	beq.n	80074a8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8007498:	6939      	ldr	r1, [r7, #16]
 800749a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749c:	440b      	add	r3, r1
 800749e:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 80074a0:	441a      	add	r2, r3
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	601a      	str	r2, [r3, #0]
 80074a6:	e00a      	b.n	80074be <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 80074a8:	7e7b      	ldrb	r3, [r7, #25]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d007      	beq.n	80074be <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 80074b2:	6939      	ldr	r1, [r7, #16]
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 80074b8:	441a      	add	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d114      	bne.n	80074f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 80074c6:	7efb      	ldrb	r3, [r7, #27]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d011      	beq.n	80074f0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 80074cc:	f107 030c 	add.w	r3, r7, #12
 80074d0:	461a      	mov	r2, r3
 80074d2:	2103      	movs	r1, #3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7ff fc97 	bl	8006e08 <get_sequence_step_timeout>
 80074da:	4603      	mov	r3, r0
 80074dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 80074e4:	68f9      	ldr	r1, [r7, #12]
 80074e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e8:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 80074ea:	441a      	add	r2, r3
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80074f0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d114      	bne.n	8007522 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 80074f8:	7f3b      	ldrb	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d011      	beq.n	8007522 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 80074fe:	f107 0314 	add.w	r3, r7, #20
 8007502:	461a      	mov	r2, r3
 8007504:	2104      	movs	r1, #4
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f7ff fc7e 	bl	8006e08 <get_sequence_step_timeout>
 800750c:	4603      	mov	r3, r0
 800750e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8007516:	6979      	ldr	r1, [r7, #20]
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800751c:	441a      	add	r2, r3
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007522:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007526:	2b00      	cmp	r3, #0
 8007528:	d103      	bne.n	8007532 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681a      	ldr	r2, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007532:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007536:	4618      	mov	r0, r3
 8007538:	3740      	adds	r7, #64	; 0x40
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
	...

08007540 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800754a:	2300      	movs	r3, #0
 800754c:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8007552:	e0c6      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	4413      	add	r3, r2
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	74fb      	strb	r3, [r7, #19]
		Index++;
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	3301      	adds	r3, #1
 8007562:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8007564:	7cfb      	ldrb	r3, [r7, #19]
 8007566:	2bff      	cmp	r3, #255	; 0xff
 8007568:	f040 808d 	bne.w	8007686 <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	4413      	add	r3, r2
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	747b      	strb	r3, [r7, #17]
			Index++;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	3301      	adds	r3, #1
 800757a:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800757c:	7c7b      	ldrb	r3, [r7, #17]
 800757e:	2b03      	cmp	r3, #3
 8007580:	d87e      	bhi.n	8007680 <VL53L0X_load_tuning_settings+0x140>
 8007582:	a201      	add	r2, pc, #4	; (adr r2, 8007588 <VL53L0X_load_tuning_settings+0x48>)
 8007584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007588:	08007599 	.word	0x08007599
 800758c:	080075d3 	.word	0x080075d3
 8007590:	0800760d 	.word	0x0800760d
 8007594:	08007647 	.word	0x08007647
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	683a      	ldr	r2, [r7, #0]
 800759c:	4413      	add	r3, r2
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	743b      	strb	r3, [r7, #16]
				Index++;
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	3301      	adds	r3, #1
 80075a6:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	683a      	ldr	r2, [r7, #0]
 80075ac:	4413      	add	r3, r2
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3301      	adds	r3, #1
 80075b6:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075b8:	7c3b      	ldrb	r3, [r7, #16]
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	021b      	lsls	r3, r3, #8
 80075be:	b29a      	uxth	r2, r3
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4413      	add	r3, r2
 80075c6:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	89ba      	ldrh	r2, [r7, #12]
 80075cc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 80075d0:	e087      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	683a      	ldr	r2, [r7, #0]
 80075d6:	4413      	add	r3, r2
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	743b      	strb	r3, [r7, #16]
				Index++;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	3301      	adds	r3, #1
 80075e0:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	4413      	add	r3, r2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	73fb      	strb	r3, [r7, #15]
				Index++;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	3301      	adds	r3, #1
 80075f0:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 80075f2:	7c3b      	ldrb	r3, [r7, #16]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	b29b      	uxth	r3, r3
 80075fe:	4413      	add	r3, r2
 8007600:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	89ba      	ldrh	r2, [r7, #12]
 8007606:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800760a:	e06a      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	683a      	ldr	r2, [r7, #0]
 8007610:	4413      	add	r3, r2
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	743b      	strb	r3, [r7, #16]
				Index++;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	3301      	adds	r3, #1
 800761a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	683a      	ldr	r2, [r7, #0]
 8007620:	4413      	add	r3, r2
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	3301      	adds	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800762c:	7c3b      	ldrb	r3, [r7, #16]
 800762e:	b29b      	uxth	r3, r3
 8007630:	021b      	lsls	r3, r3, #8
 8007632:	b29a      	uxth	r2, r3
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	b29b      	uxth	r3, r3
 8007638:	4413      	add	r3, r2
 800763a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	89ba      	ldrh	r2, [r7, #12]
 8007640:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8007644:	e04d      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	683a      	ldr	r2, [r7, #0]
 800764a:	4413      	add	r3, r2
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	743b      	strb	r3, [r7, #16]
				Index++;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	3301      	adds	r3, #1
 8007654:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	4413      	add	r3, r2
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	3301      	adds	r3, #1
 8007664:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8007666:	7c3b      	ldrb	r3, [r7, #16]
 8007668:	b29b      	uxth	r3, r3
 800766a:	021b      	lsls	r3, r3, #8
 800766c:	b29a      	uxth	r2, r3
 800766e:	7bfb      	ldrb	r3, [r7, #15]
 8007670:	b29b      	uxth	r3, r3
 8007672:	4413      	add	r3, r2
 8007674:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	89ba      	ldrh	r2, [r7, #12]
 800767a:	f8a3 213c 	strh.w	r2, [r3, #316]	; 0x13c
				break;
 800767e:	e030      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8007680:	23fc      	movs	r3, #252	; 0xfc
 8007682:	77fb      	strb	r3, [r7, #31]
 8007684:	e02d      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8007686:	7cfb      	ldrb	r3, [r7, #19]
 8007688:	2b04      	cmp	r3, #4
 800768a:	d828      	bhi.n	80076de <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	683a      	ldr	r2, [r7, #0]
 8007690:	4413      	add	r3, r2
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	74bb      	strb	r3, [r7, #18]
			Index++;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	3301      	adds	r3, #1
 800769a:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800769c:	2300      	movs	r3, #0
 800769e:	61bb      	str	r3, [r7, #24]
 80076a0:	e00f      	b.n	80076c2 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	683a      	ldr	r2, [r7, #0]
 80076a6:	4413      	add	r3, r2
 80076a8:	7819      	ldrb	r1, [r3, #0]
 80076aa:	f107 0208 	add.w	r2, r7, #8
 80076ae:	69bb      	ldr	r3, [r7, #24]
 80076b0:	4413      	add	r3, r2
 80076b2:	460a      	mov	r2, r1
 80076b4:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	3301      	adds	r3, #1
 80076ba:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 80076bc:	69bb      	ldr	r3, [r7, #24]
 80076be:	3301      	adds	r3, #1
 80076c0:	61bb      	str	r3, [r7, #24]
 80076c2:	7cfb      	ldrb	r3, [r7, #19]
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	dbeb      	blt.n	80076a2 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 80076ca:	7cfb      	ldrb	r3, [r7, #19]
 80076cc:	f107 0208 	add.w	r2, r7, #8
 80076d0:	7cb9      	ldrb	r1, [r7, #18]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 fdf8 	bl	80082c8 <VL53L0X_WriteMulti>
 80076d8:	4603      	mov	r3, r0
 80076da:	77fb      	strb	r3, [r7, #31]
 80076dc:	e001      	b.n	80076e2 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80076de:	23fc      	movs	r3, #252	; 0xfc
 80076e0:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	683a      	ldr	r2, [r7, #0]
 80076e6:	4413      	add	r3, r2
 80076e8:	781b      	ldrb	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d004      	beq.n	80076f8 <VL53L0X_load_tuning_settings+0x1b8>
 80076ee:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f43f af2e 	beq.w	8007554 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80076f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3720      	adds	r7, #32
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b088      	sub	sp, #32
 8007708:	af00      	add	r7, sp, #0
 800770a:	60f8      	str	r0, [r7, #12]
 800770c:	60b9      	str	r1, [r7, #8]
 800770e:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007710:	2300      	movs	r3, #0
 8007712:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800771a:	f107 0313 	add.w	r3, r7, #19
 800771e:	4619      	mov	r1, r3
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7fc ffbd 	bl	80046a0 <VL53L0X_GetXTalkCompensationEnable>
 8007726:	4603      	mov	r3, r0
 8007728:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800772a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d111      	bne.n	8007756 <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8007732:	7cfb      	ldrb	r3, [r7, #19]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00e      	beq.n	8007756 <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	8a9b      	ldrh	r3, [r3, #20]
 8007742:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	fb02 f303 	mul.w	r3, r2, r3
 800774a:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	3380      	adds	r3, #128	; 0x80
 8007750:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8007756:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b086      	sub	sp, #24
 8007766:	af00      	add	r7, sp, #0
 8007768:	60f8      	str	r0, [r7, #12]
 800776a:	60b9      	str	r1, [r7, #8]
 800776c:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800776e:	2300      	movs	r3, #0
 8007770:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800777a:	f107 0310 	add.w	r3, r7, #16
 800777e:	461a      	mov	r2, r3
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f7ff ffbe 	bl	8007704 <VL53L0X_get_total_xtalk_rate>
 8007788:	4603      	mov	r3, r0
 800778a:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800778c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	441a      	add	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]

	return Status;
 80077a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3718      	adds	r7, #24
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b09a      	sub	sp, #104	; 0x68
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
 80077b8:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 80077ba:	2312      	movs	r3, #18
 80077bc:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 80077be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077c2:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 80077c4:	2342      	movs	r3, #66	; 0x42
 80077c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 80077c8:	2306      	movs	r3, #6
 80077ca:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 80077cc:	2307      	movs	r3, #7
 80077ce:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	f8b3 3154 	ldrh.w	r3, [r3, #340]	; 0x154
	dmaxCalRange_mm =
 80077dc:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 80077e4:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 80077e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 80077f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f2:	3380      	adds	r3, #128	; 0x80
 80077f4:	0a1b      	lsrs	r3, r3, #8
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 80077f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80077fc:	fb02 f303 	mul.w	r3, r2, r3
 8007800:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01b      	beq.n	8007844 <VL53L0X_calc_dmax+0x98>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8007816:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007818:	4413      	add	r3, r2
 800781a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800781c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	fbb2 f3f3 	udiv	r3, r2, r3
 8007824:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8007826:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007828:	4613      	mov	r3, r2
 800782a:	005b      	lsls	r3, r3, #1
 800782c:	4413      	add	r3, r2
 800782e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8007830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007832:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007834:	fb02 f303 	mul.w	r3, r2, r3
 8007838:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800783a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800783c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007840:	0c1b      	lsrs	r3, r3, #16
 8007842:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007854:	0c1b      	lsrs	r3, r3, #16
 8007856:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8007858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800785c:	fb02 f303 	mul.w	r3, r2, r3
 8007860:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8007862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007864:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800786c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800786e:	085a      	lsrs	r2, r3, #1
 8007870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007872:	441a      	add	r2, r3
 8007874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007876:	fbb2 f3f3 	udiv	r3, r2, r3
 800787a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800787c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007880:	fb02 f303 	mul.w	r3, r2, r3
 8007884:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800788c:	d302      	bcc.n	8007894 <VL53L0X_calc_dmax+0xe8>
		minSignalNeeded_p3 = 0xfff00000;
 800788e:	4b55      	ldr	r3, [pc, #340]	; (80079e4 <VL53L0X_calc_dmax+0x238>)
 8007890:	663b      	str	r3, [r7, #96]	; 0x60
 8007892:	e016      	b.n	80078c2 <VL53L0X_calc_dmax+0x116>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8007894:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007896:	085a      	lsrs	r2, r3, #1
 8007898:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800789a:	441a      	add	r2, r3
 800789c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800789e:	fbb2 f3f3 	udiv	r3, r2, r3
 80078a2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 80078a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80078a8:	fb02 f303 	mul.w	r3, r2, r3
 80078ac:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 80078ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 80078b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078ba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078bc:	fb02 f303 	mul.w	r3, r2, r3
 80078c0:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 80078c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078c4:	039b      	lsls	r3, r3, #14
 80078c6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80078ca:	4a47      	ldr	r2, [pc, #284]	; (80079e8 <VL53L0X_calc_dmax+0x23c>)
 80078cc:	fba2 2303 	umull	r2, r3, r2, r3
 80078d0:	099b      	lsrs	r3, r3, #6
 80078d2:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078d8:	fb02 f303 	mul.w	r3, r2, r3
 80078dc:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 80078de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078e2:	fb02 f303 	mul.w	r3, r2, r3
 80078e6:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 80078e8:	6a3b      	ldr	r3, [r7, #32]
 80078ea:	3308      	adds	r3, #8
 80078ec:	091b      	lsrs	r3, r3, #4
 80078ee:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 80078f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f2:	6a3b      	ldr	r3, [r7, #32]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 80078f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800790a:	0b9b      	lsrs	r3, r3, #14
 800790c:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800790e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007910:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007912:	4413      	add	r3, r2
 8007914:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8007916:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007918:	085b      	lsrs	r3, r3, #1
 800791a:	69ba      	ldr	r2, [r7, #24]
 800791c:	4413      	add	r3, r2
 800791e:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8007920:	69ba      	ldr	r2, [r7, #24]
 8007922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007924:	fbb2 f3f3 	udiv	r3, r2, r3
 8007928:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	039b      	lsls	r3, r3, #14
 800792e:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	69ba      	ldr	r2, [r7, #24]
 8007936:	4413      	add	r3, r2
 8007938:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800793a:	69ba      	ldr	r2, [r7, #24]
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007942:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007948:	fb02 f303 	mul.w	r3, r2, r3
 800794c:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007954:	4a24      	ldr	r2, [pc, #144]	; (80079e8 <VL53L0X_calc_dmax+0x23c>)
 8007956:	fba2 2303 	umull	r2, r3, r2, r3
 800795a:	099b      	lsrs	r3, r3, #6
 800795c:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	011b      	lsls	r3, r3, #4
 8007962:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800796a:	4a1f      	ldr	r2, [pc, #124]	; (80079e8 <VL53L0X_calc_dmax+0x23c>)
 800796c:	fba2 2303 	umull	r2, r3, r2, r3
 8007970:	099b      	lsrs	r3, r3, #6
 8007972:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8007974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007976:	3380      	adds	r3, #128	; 0x80
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d008      	beq.n	8007994 <VL53L0X_calc_dmax+0x1e8>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	085a      	lsrs	r2, r3, #1
 8007986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007988:	441a      	add	r2, r3
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007990:	65bb      	str	r3, [r7, #88]	; 0x58
 8007992:	e001      	b.n	8007998 <VL53L0X_calc_dmax+0x1ec>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8007994:	2300      	movs	r3, #0
 8007996:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8007998:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800799a:	f7fe fc3e 	bl	800621a <VL53L0X_isqrt>
 800799e:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d008      	beq.n	80079b8 <VL53L0X_calc_dmax+0x20c>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	085a      	lsrs	r2, r3, #1
 80079aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079ac:	441a      	add	r2, r3
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80079b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80079b6:	e001      	b.n	80079bc <VL53L0X_calc_dmax+0x210>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 80079b8:	2300      	movs	r3, #0
 80079ba:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 80079bc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80079be:	f7fe fc2c 	bl	800621a <VL53L0X_isqrt>
 80079c2:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 80079c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079c6:	693a      	ldr	r2, [r7, #16]
 80079c8:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d902      	bls.n	80079d8 <VL53L0X_calc_dmax+0x22c>
		*pdmax_mm = dmaxAmbient;
 80079d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80079d6:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 80079d8:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3768      	adds	r7, #104	; 0x68
 80079e0:	46bd      	mov	sp, r7
 80079e2:	bd80      	pop	{r7, pc}
 80079e4:	fff00000 	.word	0xfff00000
 80079e8:	10624dd3 	.word	0x10624dd3

080079ec <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b0b4      	sub	sp, #208	; 0xd0
 80079f0:	af04      	add	r7, sp, #16
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 80079fa:	f44f 7348 	mov.w	r3, #800	; 0x320
 80079fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 8007a02:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007a06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const FixPoint1616_t cDfltFinalRangeIntegrationTimeMilliSecs	= 0x00190000; /* 25ms */
 8007a0a:	f44f 13c8 	mov.w	r3, #1638400	; 0x190000
 8007a0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 8007a12:	f241 235c 	movw	r3, #4700	; 0x125c
 8007a16:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007a1a:	4b9e      	ldr	r3, [pc, #632]	; (8007c94 <VL53L0X_calc_sigma_estimate+0x2a8>)
 8007a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 8007a20:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007a24:	67fb      	str	r3, [r7, #124]	; 0x7c
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007a26:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007a2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a32:	67bb      	str	r3, [r7, #120]	; 0x78
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007a34:	4b98      	ldr	r3, [pc, #608]	; (8007c98 <VL53L0X_calc_sigma_estimate+0x2ac>)
 8007a36:	677b      	str	r3, [r7, #116]	; 0x74
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a3c:	673b      	str	r3, [r7, #112]	; 0x70
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 8007a3e:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8007a42:	66fb      	str	r3, [r7, #108]	; 0x6c
	const uint32_t cPllPeriod_ps			= 1655;
 8007a44:	f240 6377 	movw	r3, #1655	; 0x677
 8007a48:	66bb      	str	r3, [r7, #104]	; 0x68
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	 * Estimates the range sigma
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a5e:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 8007a62:	0c1b      	lsrs	r3, r3, #16
 8007a64:	667b      	str	r3, [r7, #100]	; 0x64

	correctedSignalRate_mcps =
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	663b      	str	r3, [r7, #96]	; 0x60
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 8007a6c:	f107 0310 	add.w	r3, r7, #16
 8007a70:	461a      	mov	r2, r3
 8007a72:	68b9      	ldr	r1, [r7, #8]
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff fe74 	bl	8007762 <VL53L0X_get_total_signal_rate>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 8007a80:	f107 0314 	add.w	r3, r7, #20
 8007a84:	461a      	mov	r2, r3
 8007a86:	68b9      	ldr	r1, [r7, #8]
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f7ff fe3b 	bl	8007704 <VL53L0X_get_total_xtalk_rate>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007a9a:	fb02 f303 	mul.w	r3, r2, r3
 8007a9e:	65fb      	str	r3, [r7, #92]	; 0x5c
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 8007aa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007aa2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007aa6:	0c1b      	lsrs	r3, r3, #16
 8007aa8:	65fb      	str	r3, [r7, #92]	; 0x5c

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007ab0:	fb02 f303 	mul.w	r3, r2, r3
 8007ab4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007ab8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d902      	bls.n	8007ac8 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 8007ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ac4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

	if (Status == VL53L0X_ERROR_NONE) {
 8007ac8:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d168      	bne.n	8007ba2 <VL53L0X_calc_sigma_estimate+0x1b6>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007ad6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 8007ae0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007ae4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007ae8:	461a      	mov	r2, r3
 8007aea:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8007aee:	68f8      	ldr	r0, [r7, #12]
 8007af0:	f7ff f936 	bl	8006d60 <VL53L0X_calc_timeout_mclks>
 8007af4:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007afc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 8007b06:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007b0a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f7ff f923 	bl	8006d60 <VL53L0X_calc_timeout_mclks>
 8007b1a:	64f8      	str	r0, [r7, #76]	; 0x4c
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		if (finalRangeVcselPCLKS == 8)
 8007b22:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007b26:	2b08      	cmp	r3, #8
 8007b28:	d102      	bne.n	8007b30 <VL53L0X_calc_sigma_estimate+0x144>
			vcselWidth = 2;
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007b30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b34:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 8007b36:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007b3a:	fb02 f303 	mul.w	r3, r2, r3
 8007b3e:	02db      	lsls	r3, r3, #11
 8007b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b48:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b4c:	4a53      	ldr	r2, [pc, #332]	; (8007c9c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b52:	099b      	lsrs	r3, r3, #6
 8007b54:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us *= cPllPeriod_ps;
 8007b58:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b5e:	fb02 f303 	mul.w	r3, r2, r3
 8007b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007b66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b6a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007b6e:	4a4b      	ldr	r2, [pc, #300]	; (8007c9c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007b70:	fba2 2303 	umull	r2, r3, r2, r3
 8007b74:	099b      	lsrs	r3, r3, #6
 8007b76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	3380      	adds	r3, #128	; 0x80
 8007b7e:	0a1b      	lsrs	r3, r3, #8
 8007b80:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007b88:	fb02 f303 	mul.w	r3, r2, r3
 8007b8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 8007b90:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b94:	3380      	adds	r3, #128	; 0x80
 8007b96:	0a1b      	lsrs	r3, r3, #8
 8007b98:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	021b      	lsls	r3, r3, #8
 8007ba0:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 8007ba2:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d002      	beq.n	8007bb0 <VL53L0X_calc_sigma_estimate+0x1c4>
		LOG_FUNCTION_END(Status);
		return Status;
 8007baa:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
 8007bae:	e165      	b.n	8007e7c <VL53L0X_calc_sigma_estimate+0x490>
	}

	if (peakSignalRate_kcps == 0) {
 8007bb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d10c      	bne.n	8007bd0 <VL53L0X_calc_sigma_estimate+0x1e4>
		*pSigmaEstimate = cSigmaEstMax;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bbc:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007bc4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		*pDmax_mm = 0;
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	601a      	str	r2, [r3, #0]
 8007bce:	e153      	b.n	8007e78 <VL53L0X_calc_sigma_estimate+0x48c>
	} else {
		if (vcselTotalEventsRtn < 1)
 8007bd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d102      	bne.n	8007bde <VL53L0X_calc_sigma_estimate+0x1f2>
			vcselTotalEventsRtn = 1;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 8007bde:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007be2:	64bb      	str	r3, [r7, #72]	; 0x48

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007be4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007be6:	041a      	lsls	r2, r3, #16
 8007be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007bf2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d902      	bls.n	8007c02 <VL53L0X_calc_sigma_estimate+0x216>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 8007bfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007bfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007c02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007c06:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8007c0a:	fb02 f303 	mul.w	r3, r2, r3
 8007c0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007c12:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c16:	4613      	mov	r3, r2
 8007c18:	005b      	lsls	r3, r3, #1
 8007c1a:	4413      	add	r3, r2
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fafb 	bl	800621a <VL53L0X_isqrt>
 8007c24:	4603      	mov	r3, r0
 8007c26:	005b      	lsls	r3, r3, #1
 8007c28:	647b      	str	r3, [r7, #68]	; 0x44

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	891b      	ldrh	r3, [r3, #8]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c32:	fb02 f303 	mul.w	r3, r2, r3
 8007c36:	643b      	str	r3, [r7, #64]	; 0x40
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c3a:	041a      	lsls	r2, r3, #16
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007c3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c40:	005b      	lsls	r3, r3, #1
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c42:	1ad3      	subs	r3, r2, r3
			2 * xTalkCompRate_kcps) + 500)/1000;
 8007c44:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007c48:	4a14      	ldr	r2, [pc, #80]	; (8007c9c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8007c4e:	099b      	lsrs	r3, r3, #6
 8007c50:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* vcselRate + xtalkCompRate */
		diff2_mcps = ((peakSignalRate_kcps << 16) + 500)/1000;
 8007c52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c54:	041b      	lsls	r3, r3, #16
 8007c56:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007c5a:	4a10      	ldr	r2, [pc, #64]	; (8007c9c <VL53L0X_calc_sigma_estimate+0x2b0>)
 8007c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8007c60:	099b      	lsrs	r3, r3, #6
 8007c62:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 8007c64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 8007c6a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	bfb8      	it	lt
 8007c76:	425b      	neglt	r3, r3
 8007c78:	637b      	str	r3, [r7, #52]	; 0x34

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c7c:	021b      	lsls	r3, r3, #8
 8007c7e:	637b      	str	r3, [r7, #52]	; 0x34

		if(pRangingMeasurementData->RangeStatus != 0){
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	7e1b      	ldrb	r3, [r3, #24]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d00b      	beq.n	8007ca0 <VL53L0X_calc_sigma_estimate+0x2b4>
			pwMult = 1 << 16;
 8007c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c90:	e035      	b.n	8007cfe <VL53L0X_calc_sigma_estimate+0x312>
 8007c92:	bf00      	nop
 8007c94:	028f87ae 	.word	0x028f87ae
 8007c98:	0006999a 	.word	0x0006999a
 8007c9c:	10624dd3 	.word	0x10624dd3
		} else {
			/* FixPoint1616/uint32 = FixPoint1616 */
			pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 8007ca0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
			 * values are small enough such that32 bits will not be
			 * exceeded.
			 */
			pwMult *= ((1 << 16) - xTalkCorrection);
 8007cae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cb0:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 8007cb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cb8:	fb02 f303 	mul.w	r3, r2, r3
 8007cbc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3232 >> 16) = FixPoint1616 */
			pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 8007cc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cc6:	4413      	add	r3, r2
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
			pwMult += (1 << 16);
 8007cce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cd2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8007cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/*
			 * At this point the value will be 1.xx, therefore if we square
			 * the value this will exceed 32 bits. To address this perform
			 * a single shift to the right before the multiplication.
			 */
			pwMult >>= 1;
 8007cda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cde:	085b      	lsrs	r3, r3, #1
 8007ce0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
			pwMult = pwMult * pwMult;
 8007ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ce8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cec:	fb02 f303 	mul.w	r3, r2, r3
 8007cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

			/* (FixPoint3430 >> 14) = Fix1616 */
			pwMult >>= 14;
 8007cf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007cf8:	0b9b      	lsrs	r3, r3, #14
 8007cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d04:	fb02 f303 	mul.w	r3, r2, r3
 8007d08:	633b      	str	r3, [r7, #48]	; 0x30

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d10:	0c1b      	lsrs	r3, r3, #16
 8007d12:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d18:	fb02 f303 	mul.w	r3, r2, r3
 8007d1c:	633b      	str	r3, [r7, #48]	; 0x30

		sqr2 = sigmaEstimateP2;
 8007d1e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007d22:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d26:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007d2a:	0c1b      	lsrs	r3, r3, #16
 8007d2c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d32:	fb02 f303 	mul.w	r3, r2, r3
 8007d36:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d3c:	4413      	add	r3, r2
 8007d3e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007d40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d42:	f7fe fa6a 	bl	800621a <VL53L0X_isqrt>
 8007d46:	6278      	str	r0, [r7, #36]	; 0x24

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4a:	041b      	lsls	r3, r3, #16
 8007d4c:	627b      	str	r3, [r7, #36]	; 0x24
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 8007d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d50:	3332      	adds	r3, #50	; 0x32
 8007d52:	4a4c      	ldr	r2, [pc, #304]	; (8007e84 <VL53L0X_calc_sigma_estimate+0x498>)
 8007d54:	fba2 2303 	umull	r2, r3, r2, r3
 8007d58:	095a      	lsrs	r2, r3, #5
 8007d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007d64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d68:	f640 32b5 	movw	r2, #2997	; 0xbb5
 8007d6c:	fb02 f303 	mul.w	r3, r2, r3
 8007d70:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007d74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d78:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		sigmaEstRtn		 /= 10000;
 8007d82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007d86:	4a40      	ldr	r2, [pc, #256]	; (8007e88 <VL53L0X_calc_sigma_estimate+0x49c>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	0b5b      	lsrs	r3, r3, #13
 8007d8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 8007d92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d902      	bls.n	8007da2 <VL53L0X_calc_sigma_estimate+0x3b6>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 8007d9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007d9e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}
		finalRangeIntegrationTimeMilliSecs =
			(finalRangeTimeoutMicroSecs + preRangeTimeoutMicroSecs + 500)/1000;
 8007da2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007da6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		finalRangeIntegrationTimeMilliSecs =
 8007db0:	4a36      	ldr	r2, [pc, #216]	; (8007e8c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8007db2:	fba2 2303 	umull	r2, r3, r2, r3
 8007db6:	099b      	lsrs	r3, r3, #6
 8007db8:	623b      	str	r3, [r7, #32]
		/* sigmaEstRef = 1mm * 25ms/final range integration time (inc pre-range)
		 * sqrt(FixPoint1616/int) = FixPoint2408)
		 */
		sigmaEstRef =
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
				finalRangeIntegrationTimeMilliSecs/2)/
 8007dba:	6a3b      	ldr	r3, [r7, #32]
 8007dbc:	085a      	lsrs	r2, r3, #1
			VL53L0X_isqrt((cDfltFinalRangeIntegrationTimeMilliSecs +
 8007dbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007dc2:	441a      	add	r2, r3
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	fbb2 f3f3 	udiv	r3, r2, r3
		sigmaEstRef =
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe fa25 	bl	800621a <VL53L0X_isqrt>
 8007dd0:	61f8      	str	r0, [r7, #28]
				finalRangeIntegrationTimeMilliSecs);

		/* FixPoint2408 << 8 = FixPoint1616 */
		sigmaEstRef <<= 8;
 8007dd2:	69fb      	ldr	r3, [r7, #28]
 8007dd4:	021b      	lsls	r3, r3, #8
 8007dd6:	61fb      	str	r3, [r7, #28]
		sigmaEstRef = (sigmaEstRef + 500)/1000;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007dde:	4a2b      	ldr	r2, [pc, #172]	; (8007e8c <VL53L0X_calc_sigma_estimate+0x4a0>)
 8007de0:	fba2 2303 	umull	r2, r3, r2, r3
 8007de4:	099b      	lsrs	r3, r3, #6
 8007de6:	61fb      	str	r3, [r7, #28]

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 8007de8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007dec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007df0:	fb02 f303 	mul.w	r3, r2, r3
 8007df4:	633b      	str	r3, [r7, #48]	; 0x30
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = sigmaEstRef * sigmaEstRef;
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	fb02 f303 	mul.w	r3, r2, r3
 8007dfe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 8007e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e04:	4413      	add	r3, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fa07 	bl	800621a <VL53L0X_isqrt>
 8007e0c:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007e14:	fb02 f303 	mul.w	r3, r2, r3
 8007e18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 8007e1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d009      	beq.n	8007e36 <VL53L0X_calc_sigma_estimate+0x44a>
 8007e22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d005      	beq.n	8007e36 <VL53L0X_calc_sigma_estimate+0x44a>
 8007e2a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007e2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e32:	429a      	cmp	r2, r3
 8007e34:	d903      	bls.n	8007e3e <VL53L0X_calc_sigma_estimate+0x452>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007e36:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007e3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007e44:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
		Status = VL53L0X_calc_dmax(
 8007e50:	6939      	ldr	r1, [r7, #16]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	9303      	str	r3, [sp, #12]
 8007e56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007e60:	9301      	str	r3, [sp, #4]
 8007e62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e64:	9300      	str	r3, [sp, #0]
 8007e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007e6a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007e6c:	68f8      	ldr	r0, [r7, #12]
 8007e6e:	f7ff fc9d 	bl	80077ac <VL53L0X_calc_dmax>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007e78:	f997 309f 	ldrsb.w	r3, [r7, #159]	; 0x9f
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	37c0      	adds	r7, #192	; 0xc0
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}
 8007e84:	51eb851f 	.word	0x51eb851f
 8007e88:	d1b71759 	.word	0xd1b71759
 8007e8c:	10624dd3 	.word	0x10624dd3

08007e90 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b090      	sub	sp, #64	; 0x40
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	607a      	str	r2, [r7, #4]
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	460b      	mov	r3, r1
 8007e9e:	72fb      	strb	r3, [r7, #11]
 8007ea0:	4613      	mov	r3, r2
 8007ea2:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 8007eda:	2300      	movs	r3, #0
 8007edc:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 8007ee2:	7afb      	ldrb	r3, [r7, #11]
 8007ee4:	10db      	asrs	r3, r3, #3
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	f003 030f 	and.w	r3, r3, #15
 8007eec:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 8007ef0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d017      	beq.n	8007f28 <VL53L0X_get_pal_range_status+0x98>
 8007ef8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d013      	beq.n	8007f28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 8007f00:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f04:	2b07      	cmp	r3, #7
 8007f06:	d00f      	beq.n	8007f28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 8007f08:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f0c:	2b0c      	cmp	r3, #12
 8007f0e:	d00b      	beq.n	8007f28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 8007f10:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f14:	2b0d      	cmp	r3, #13
 8007f16:	d007      	beq.n	8007f28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 8007f18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f1c:	2b0e      	cmp	r3, #14
 8007f1e:	d003      	beq.n	8007f28 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 8007f20:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007f24:	2b0f      	cmp	r3, #15
 8007f26:	d103      	bne.n	8007f30 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 8007f28:	2301      	movs	r3, #1
 8007f2a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8007f2e:	e002      	b.n	8007f36 <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 8007f30:	2300      	movs	r3, #0
 8007f32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007f36:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d109      	bne.n	8007f52 <VL53L0X_get_pal_range_status+0xc2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007f3e:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007f42:	461a      	mov	r2, r3
 8007f44:	2100      	movs	r1, #0
 8007f46:	68f8      	ldr	r0, [r7, #12]
 8007f48:	f7fc fc7e 	bl	8004848 <VL53L0X_GetLimitCheckEnable>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d02e      	beq.n	8007fb8 <VL53L0X_get_pal_range_status+0x128>
 8007f5a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d12a      	bne.n	8007fb8 <VL53L0X_get_pal_range_status+0x128>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007f62:	f107 0310 	add.w	r3, r7, #16
 8007f66:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007f6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007f6c:	68f8      	ldr	r0, [r7, #12]
 8007f6e:	f7ff fd3d 	bl	80079ec <VL53L0X_calc_sigma_estimate>
 8007f72:	4603      	mov	r3, r0
 8007f74:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 8007f78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <VL53L0X_get_pal_range_status+0xf8>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	b29a      	uxth	r2, r3
 8007f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f86:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 8007f88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d113      	bne.n	8007fb8 <VL53L0X_get_pal_range_status+0x128>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 8007f90:	f107 0320 	add.w	r3, r7, #32
 8007f94:	461a      	mov	r2, r3
 8007f96:	2100      	movs	r1, #0
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7fc fcdb 	bl	8004954 <VL53L0X_GetLimitCheckValue>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d006      	beq.n	8007fb8 <VL53L0X_get_pal_range_status+0x128>
				(SigmaEstimate > SigmaLimitValue))
 8007faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fac:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d902      	bls.n	8007fb8 <VL53L0X_get_pal_range_status+0x128>
					/* Limit Fail */
					SigmaLimitflag = 1;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007fb8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d109      	bne.n	8007fd4 <VL53L0X_get_pal_range_status+0x144>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007fc0:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	2102      	movs	r1, #2
 8007fc8:	68f8      	ldr	r0, [r7, #12]
 8007fca:	f7fc fc3d 	bl	8004848 <VL53L0X_GetLimitCheckEnable>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 8007fd4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d044      	beq.n	8008066 <VL53L0X_get_pal_range_status+0x1d6>
 8007fdc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d140      	bne.n	8008066 <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007fe4:	f107 031c 	add.w	r3, r7, #28
 8007fe8:	461a      	mov	r2, r3
 8007fea:	2102      	movs	r1, #2
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7fc fcb1 	bl	8004954 <VL53L0X_GetLimitCheckValue>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		/* Read LastSignalRefMcps from device */
		if (Status == VL53L0X_ERROR_NONE)
 8007ff8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d107      	bne.n	8008010 <VL53L0X_get_pal_range_status+0x180>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8008000:	2201      	movs	r2, #1
 8008002:	21ff      	movs	r1, #255	; 0xff
 8008004:	68f8      	ldr	r0, [r7, #12]
 8008006:	f000 f9bb 	bl	8008380 <VL53L0X_WrByte>
 800800a:	4603      	mov	r3, r0
 800800c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		if (Status == VL53L0X_ERROR_NONE)
 8008010:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008014:	2b00      	cmp	r3, #0
 8008016:	d109      	bne.n	800802c <VL53L0X_get_pal_range_status+0x19c>
			Status = VL53L0X_RdWord(Dev,
 8008018:	f107 0316 	add.w	r3, r7, #22
 800801c:	461a      	mov	r2, r3
 800801e:	21b6      	movs	r1, #182	; 0xb6
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 fa59 	bl	80084d8 <VL53L0X_RdWord>
 8008026:	4603      	mov	r3, r0
 8008028:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
				&tmpWord);

		if (Status == VL53L0X_ERROR_NONE)
 800802c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008030:	2b00      	cmp	r3, #0
 8008032:	d107      	bne.n	8008044 <VL53L0X_get_pal_range_status+0x1b4>
			Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008034:	2200      	movs	r2, #0
 8008036:	21ff      	movs	r1, #255	; 0xff
 8008038:	68f8      	ldr	r0, [r7, #12]
 800803a:	f000 f9a1 	bl	8008380 <VL53L0X_WrByte>
 800803e:	4603      	mov	r3, r0
 8008040:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8008044:	8afb      	ldrh	r3, [r7, #22]
 8008046:	025b      	lsls	r3, r3, #9
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
		PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800804e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

		if ((SignalRefClipValue > 0) &&
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d006      	beq.n	8008066 <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8008058:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800805a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d902      	bls.n	8008066 <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8008060:	2301      	movs	r3, #1
 8008062:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8008066:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800806a:	2b00      	cmp	r3, #0
 800806c:	d109      	bne.n	8008082 <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800806e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008072:	461a      	mov	r2, r3
 8008074:	2103      	movs	r1, #3
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f7fc fbe6 	bl	8004848 <VL53L0X_GetLimitCheckEnable>
 800807c:	4603      	mov	r3, r0
 800807e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 8008082:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008086:	2b00      	cmp	r3, #0
 8008088:	d023      	beq.n	80080d2 <VL53L0X_get_pal_range_status+0x242>
 800808a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800808e:	2b00      	cmp	r3, #0
 8008090:	d11f      	bne.n	80080d2 <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 8008092:	893b      	ldrh	r3, [r7, #8]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8008098:	2300      	movs	r3, #0
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
 800809c:	e005      	b.n	80080aa <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	021a      	lsls	r2, r3, #8
 80080a2:	893b      	ldrh	r3, [r7, #8]
 80080a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80080a8:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 80080aa:	f107 0318 	add.w	r3, r7, #24
 80080ae:	461a      	mov	r2, r3
 80080b0:	2103      	movs	r1, #3
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f7fc fc4e 	bl	8004954 <VL53L0X_GetLimitCheckValue>
 80080b8:	4603      	mov	r3, r0
 80080ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 80080be:	69bb      	ldr	r3, [r7, #24]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 80080c4:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 80080c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d202      	bcs.n	80080d2 <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 80080cc:	2301      	movs	r3, #1
 80080ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80080d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d14a      	bne.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80080da:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d103      	bne.n	80080ea <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80080e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080e4:	22ff      	movs	r2, #255	; 0xff
 80080e6:	701a      	strb	r2, [r3, #0]
 80080e8:	e042      	b.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80080ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d007      	beq.n	8008102 <VL53L0X_get_pal_range_status+0x272>
 80080f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d003      	beq.n	8008102 <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80080fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80080fe:	2b03      	cmp	r3, #3
 8008100:	d103      	bne.n	800810a <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 8008102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008104:	2205      	movs	r2, #5
 8008106:	701a      	strb	r2, [r3, #0]
 8008108:	e032      	b.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800810a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800810e:	2b06      	cmp	r3, #6
 8008110:	d003      	beq.n	800811a <VL53L0X_get_pal_range_status+0x28a>
 8008112:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008116:	2b09      	cmp	r3, #9
 8008118:	d103      	bne.n	8008122 <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800811a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800811c:	2204      	movs	r2, #4
 800811e:	701a      	strb	r2, [r3, #0]
 8008120:	e026      	b.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 8008122:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008126:	2b08      	cmp	r3, #8
 8008128:	d007      	beq.n	800813a <VL53L0X_get_pal_range_status+0x2aa>
 800812a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800812e:	2b0a      	cmp	r3, #10
 8008130:	d003      	beq.n	800813a <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 8008132:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8008136:	2b01      	cmp	r3, #1
 8008138:	d103      	bne.n	8008142 <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800813a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800813c:	2203      	movs	r2, #3
 800813e:	701a      	strb	r2, [r3, #0]
 8008140:	e016      	b.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 8008142:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008146:	2b04      	cmp	r3, #4
 8008148:	d003      	beq.n	8008152 <VL53L0X_get_pal_range_status+0x2c2>
 800814a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800814e:	2b01      	cmp	r3, #1
 8008150:	d103      	bne.n	800815a <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 8008152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008154:	2202      	movs	r2, #2
 8008156:	701a      	strb	r2, [r3, #0]
 8008158:	e00a      	b.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800815a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800815e:	2b01      	cmp	r3, #1
 8008160:	d103      	bne.n	800816a <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 8008162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008164:	2201      	movs	r2, #1
 8008166:	701a      	strb	r2, [r3, #0]
 8008168:	e002      	b.n	8008170 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800816a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800816c:	2200      	movs	r2, #0
 800816e:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8008170:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d102      	bne.n	800817e <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8008178:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800817a:	2200      	movs	r2, #0
 800817c:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800817e:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 8008182:	461a      	mov	r2, r3
 8008184:	2101      	movs	r1, #1
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f7fc fb5e 	bl	8004848 <VL53L0X_GetLimitCheckEnable>
 800818c:	4603      	mov	r3, r0
 800818e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 8008192:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8008196:	2b00      	cmp	r3, #0
 8008198:	d14f      	bne.n	800823a <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800819a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <VL53L0X_get_pal_range_status+0x31a>
 80081a2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d103      	bne.n	80081b2 <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 80081aa:	2301      	movs	r3, #1
 80081ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081b0:	e002      	b.n	80081b8 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 80081b2:	2300      	movs	r3, #0
 80081b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80081be:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 80081c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d003      	beq.n	80081d2 <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 80081ca:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d103      	bne.n	80081da <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 80081d2:	2301      	movs	r3, #1
 80081d4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80081d8:	e002      	b.n	80081e0 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80081da:	2300      	movs	r3, #0
 80081dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80081e6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80081ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <VL53L0X_get_pal_range_status+0x36a>
 80081f2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d103      	bne.n	8008202 <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80081fa:	2301      	movs	r3, #1
 80081fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008200:	e002      	b.n	8008208 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800820e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 8008212:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008216:	2b00      	cmp	r3, #0
 8008218:	d003      	beq.n	8008222 <VL53L0X_get_pal_range_status+0x392>
 800821a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800821e:	2b01      	cmp	r3, #1
 8008220:	d103      	bne.n	800822a <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 8008222:	2301      	movs	r3, #1
 8008224:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8008228:	e002      	b.n	8008230 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800822a:	2300      	movs	r3, #0
 800822c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8008236:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800823a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800823e:	4618      	mov	r0, r3
 8008240:	3740      	adds	r7, #64	; 0x40
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}

08008246 <_I2CWrite>:
#endif


uint8_t _I2CBuffer[64];

int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008246:	b580      	push	{r7, lr}
 8008248:	b088      	sub	sp, #32
 800824a:	af02      	add	r7, sp, #8
 800824c:	60f8      	str	r0, [r7, #12]
 800824e:	60b9      	str	r1, [r7, #8]
 8008250:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	330a      	adds	r3, #10
 8008256:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8008264:	b299      	uxth	r1, r3
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	b29a      	uxth	r2, r3
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	9300      	str	r3, [sp, #0]
 800826e:	4613      	mov	r3, r2
 8008270:	68ba      	ldr	r2, [r7, #8]
 8008272:	f7f9 fd05 	bl	8001c80 <HAL_I2C_Master_Transmit>
 8008276:	4603      	mov	r3, r0
 8008278:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 800827a:	693b      	ldr	r3, [r7, #16]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3718      	adds	r7, #24
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b088      	sub	sp, #32
 8008288:	af02      	add	r7, sp, #8
 800828a:	60f8      	str	r0, [r7, #12]
 800828c:	60b9      	str	r1, [r7, #8]
 800828e:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	330a      	adds	r3, #10
 8008294:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8d3 015c 	ldr.w	r0, [r3, #348]	; 0x15c
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 80082a2:	f043 0301 	orr.w	r3, r3, #1
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	b299      	uxth	r1, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	9300      	str	r3, [sp, #0]
 80082b2:	4613      	mov	r3, r2
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	f7f9 fde1 	bl	8001e7c <HAL_I2C_Master_Receive>
 80082ba:	4603      	mov	r3, r0
 80082bc:	613b      	str	r3, [r7, #16]
    if (status) {
        //VL6180x_ErrLog("I2C error 0x%x %d len", dev->I2cAddr, len);
        //XNUCLEO6180XA1_I2C1_Init(&hi2c1);
    }
    return status;
 80082be:	693b      	ldr	r3, [r7, #16]
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3718      	adds	r7, #24
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <VL53L0X_WriteMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b086      	sub	sp, #24
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	607a      	str	r2, [r7, #4]
 80082d2:	603b      	str	r3, [r7, #0]
 80082d4:	460b      	mov	r3, r1
 80082d6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082d8:	2300      	movs	r3, #0
 80082da:	75fb      	strb	r3, [r7, #23]
    if (count > sizeof(_I2CBuffer) - 1) {
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	2b3f      	cmp	r3, #63	; 0x3f
 80082e0:	d902      	bls.n	80082e8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 80082e2:	f06f 0303 	mvn.w	r3, #3
 80082e6:	e016      	b.n	8008316 <VL53L0X_WriteMulti+0x4e>
    }
    _I2CBuffer[0] = index;
 80082e8:	4a0d      	ldr	r2, [pc, #52]	; (8008320 <VL53L0X_WriteMulti+0x58>)
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 80082ee:	683a      	ldr	r2, [r7, #0]
 80082f0:	6879      	ldr	r1, [r7, #4]
 80082f2:	480c      	ldr	r0, [pc, #48]	; (8008324 <VL53L0X_WriteMulti+0x5c>)
 80082f4:	f001 fab4 	bl	8009860 <memcpy>
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	3301      	adds	r3, #1
 80082fc:	461a      	mov	r2, r3
 80082fe:	4908      	ldr	r1, [pc, #32]	; (8008320 <VL53L0X_WriteMulti+0x58>)
 8008300:	68f8      	ldr	r0, [r7, #12]
 8008302:	f7ff ffa0 	bl	8008246 <_I2CWrite>
 8008306:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d001      	beq.n	8008312 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800830e:	23ec      	movs	r3, #236	; 0xec
 8008310:	75fb      	strb	r3, [r7, #23]
    }
    VL53L0X_PutI2cBus();
    return Status;
 8008312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3718      	adds	r7, #24
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	20000318 	.word	0x20000318
 8008324:	20000319 	.word	0x20000319

08008328 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	603b      	str	r3, [r7, #0]
 8008334:	460b      	mov	r3, r1
 8008336:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008338:	2300      	movs	r3, #0
 800833a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800833c:	f107 030b 	add.w	r3, r7, #11
 8008340:	2201      	movs	r2, #1
 8008342:	4619      	mov	r1, r3
 8008344:	68f8      	ldr	r0, [r7, #12]
 8008346:	f7ff ff7e 	bl	8008246 <_I2CWrite>
 800834a:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008352:	23ec      	movs	r3, #236	; 0xec
 8008354:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008356:	e00c      	b.n	8008372 <VL53L0X_ReadMulti+0x4a>
    }
    status_int = _I2CRead(Dev, pdata, count);
 8008358:	683a      	ldr	r2, [r7, #0]
 800835a:	6879      	ldr	r1, [r7, #4]
 800835c:	68f8      	ldr	r0, [r7, #12]
 800835e:	f7ff ff91 	bl	8008284 <_I2CRead>
 8008362:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d002      	beq.n	8008370 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800836a:	23ec      	movs	r3, #236	; 0xec
 800836c:	75fb      	strb	r3, [r7, #23]
 800836e:	e000      	b.n	8008372 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8008370:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 8008372:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008376:	4618      	mov	r0, r3
 8008378:	3718      	adds	r7, #24
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
	...

08008380 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b084      	sub	sp, #16
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	460b      	mov	r3, r1
 800838a:	70fb      	strb	r3, [r7, #3]
 800838c:	4613      	mov	r3, r2
 800838e:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8008394:	4a0b      	ldr	r2, [pc, #44]	; (80083c4 <VL53L0X_WrByte+0x44>)
 8008396:	78fb      	ldrb	r3, [r7, #3]
 8008398:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800839a:	4a0a      	ldr	r2, [pc, #40]	; (80083c4 <VL53L0X_WrByte+0x44>)
 800839c:	78bb      	ldrb	r3, [r7, #2]
 800839e:	7053      	strb	r3, [r2, #1]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 80083a0:	2202      	movs	r2, #2
 80083a2:	4908      	ldr	r1, [pc, #32]	; (80083c4 <VL53L0X_WrByte+0x44>)
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f7ff ff4e 	bl	8008246 <_I2CWrite>
 80083aa:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80083b2:	23ec      	movs	r3, #236	; 0xec
 80083b4:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 80083b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20000318 	.word	0x20000318

080083c8 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
 80083d4:	4613      	mov	r3, r2
 80083d6:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80083d8:	2300      	movs	r3, #0
 80083da:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 80083dc:	4a0e      	ldr	r2, [pc, #56]	; (8008418 <VL53L0X_WrWord+0x50>)
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 80083e2:	883b      	ldrh	r3, [r7, #0]
 80083e4:	0a1b      	lsrs	r3, r3, #8
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	b2da      	uxtb	r2, r3
 80083ea:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <VL53L0X_WrWord+0x50>)
 80083ec:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 80083ee:	883b      	ldrh	r3, [r7, #0]
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	4b09      	ldr	r3, [pc, #36]	; (8008418 <VL53L0X_WrWord+0x50>)
 80083f4:	709a      	strb	r2, [r3, #2]

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 80083f6:	2203      	movs	r2, #3
 80083f8:	4907      	ldr	r1, [pc, #28]	; (8008418 <VL53L0X_WrWord+0x50>)
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff ff23 	bl	8008246 <_I2CWrite>
 8008400:	60b8      	str	r0, [r7, #8]
    if (status_int != 0) {
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d001      	beq.n	800840c <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008408:	23ec      	movs	r3, #236	; 0xec
 800840a:	73fb      	strb	r3, [r7, #15]
    }
    VL53L0X_PutI2cBus();
    return Status;
 800840c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008410:	4618      	mov	r0, r3
 8008412:	3710      	adds	r7, #16
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	20000318 	.word	0x20000318

0800841c <VL53L0X_UpdateByte>:
    }
    VL53L0X_PutI2cBus();
    return Status;
}

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	4608      	mov	r0, r1
 8008426:	4611      	mov	r1, r2
 8008428:	461a      	mov	r2, r3
 800842a:	4603      	mov	r3, r0
 800842c:	70fb      	strb	r3, [r7, #3]
 800842e:	460b      	mov	r3, r1
 8008430:	70bb      	strb	r3, [r7, #2]
 8008432:	4613      	mov	r3, r2
 8008434:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800843a:	f107 020e 	add.w	r2, r7, #14
 800843e:	78fb      	ldrb	r3, [r7, #3]
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 f81e 	bl	8008484 <VL53L0X_RdByte>
 8008448:	4603      	mov	r3, r0
 800844a:	73fb      	strb	r3, [r7, #15]
    if (Status) {
 800844c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d110      	bne.n	8008476 <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    data = (data & AndData) | OrData;
 8008454:	7bba      	ldrb	r2, [r7, #14]
 8008456:	78bb      	ldrb	r3, [r7, #2]
 8008458:	4013      	ands	r3, r2
 800845a:	b2da      	uxtb	r2, r3
 800845c:	787b      	ldrb	r3, [r7, #1]
 800845e:	4313      	orrs	r3, r2
 8008460:	b2db      	uxtb	r3, r3
 8008462:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8008464:	7bba      	ldrb	r2, [r7, #14]
 8008466:	78fb      	ldrb	r3, [r7, #3]
 8008468:	4619      	mov	r1, r3
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff ff88 	bl	8008380 <VL53L0X_WrByte>
 8008470:	4603      	mov	r3, r0
 8008472:	73fb      	strb	r3, [r7, #15]
 8008474:	e000      	b.n	8008478 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8008476:	bf00      	nop
done:
    return Status;
 8008478:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800847c:	4618      	mov	r0, r3
 800847e:	3710      	adds	r7, #16
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	460b      	mov	r3, r1
 800848e:	607a      	str	r2, [r7, #4]
 8008490:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008492:	2300      	movs	r3, #0
 8008494:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 8008496:	f107 030b 	add.w	r3, r7, #11
 800849a:	2201      	movs	r2, #1
 800849c:	4619      	mov	r1, r3
 800849e:	68f8      	ldr	r0, [r7, #12]
 80084a0:	f7ff fed1 	bl	8008246 <_I2CWrite>
 80084a4:	6138      	str	r0, [r7, #16]
    if( status_int ){
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d002      	beq.n	80084b2 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80084ac:	23ec      	movs	r3, #236	; 0xec
 80084ae:	75fb      	strb	r3, [r7, #23]
        goto done;
 80084b0:	e00c      	b.n	80084cc <VL53L0X_RdByte+0x48>
    }
    status_int = _I2CRead(Dev, data, 1);
 80084b2:	2201      	movs	r2, #1
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	68f8      	ldr	r0, [r7, #12]
 80084b8:	f7ff fee4 	bl	8008284 <_I2CRead>
 80084bc:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d002      	beq.n	80084ca <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 80084c4:	23ec      	movs	r3, #236	; 0xec
 80084c6:	75fb      	strb	r3, [r7, #23]
 80084c8:	e000      	b.n	80084cc <VL53L0X_RdByte+0x48>
    }
done:
 80084ca:	bf00      	nop
    VL53L0X_PutI2cBus();
    return Status;
 80084cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3718      	adds	r7, #24
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <VL53L0X_RdWord>:

VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	460b      	mov	r3, r1
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084e6:	2300      	movs	r3, #0
 80084e8:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 80084ea:	f107 030b 	add.w	r3, r7, #11
 80084ee:	2201      	movs	r2, #1
 80084f0:	4619      	mov	r1, r3
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fea7 	bl	8008246 <_I2CWrite>
 80084f8:	6138      	str	r0, [r7, #16]

    if( status_int ){
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d002      	beq.n	8008506 <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008500:	23ec      	movs	r3, #236	; 0xec
 8008502:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008504:	e017      	b.n	8008536 <VL53L0X_RdWord+0x5e>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8008506:	2202      	movs	r2, #2
 8008508:	490e      	ldr	r1, [pc, #56]	; (8008544 <VL53L0X_RdWord+0x6c>)
 800850a:	68f8      	ldr	r0, [r7, #12]
 800850c:	f7ff feba 	bl	8008284 <_I2CRead>
 8008510:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d002      	beq.n	800851e <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008518:	23ec      	movs	r3, #236	; 0xec
 800851a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800851c:	e00b      	b.n	8008536 <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800851e:	4b09      	ldr	r3, [pc, #36]	; (8008544 <VL53L0X_RdWord+0x6c>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	021b      	lsls	r3, r3, #8
 8008526:	b29a      	uxth	r2, r3
 8008528:	4b06      	ldr	r3, [pc, #24]	; (8008544 <VL53L0X_RdWord+0x6c>)
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	b29b      	uxth	r3, r3
 800852e:	4413      	add	r3, r2
 8008530:	b29a      	uxth	r2, r3
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	801a      	strh	r2, [r3, #0]
done:
    VL53L0X_PutI2cBus();
    return Status;
 8008536:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800853a:	4618      	mov	r0, r3
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	20000318 	.word	0x20000318

08008548 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8008548:	b580      	push	{r7, lr}
 800854a:	b086      	sub	sp, #24
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	460b      	mov	r3, r1
 8008552:	607a      	str	r2, [r7, #4]
 8008554:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008556:	2300      	movs	r3, #0
 8008558:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    VL53L0X_GetI2cBus();
    status_int = _I2CWrite(Dev, &index, 1);
 800855a:	f107 030b 	add.w	r3, r7, #11
 800855e:	2201      	movs	r2, #1
 8008560:	4619      	mov	r1, r3
 8008562:	68f8      	ldr	r0, [r7, #12]
 8008564:	f7ff fe6f 	bl	8008246 <_I2CWrite>
 8008568:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d002      	beq.n	8008576 <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008570:	23ec      	movs	r3, #236	; 0xec
 8008572:	75fb      	strb	r3, [r7, #23]
        goto done;
 8008574:	e01b      	b.n	80085ae <VL53L0X_RdDWord+0x66>
    }
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8008576:	2204      	movs	r2, #4
 8008578:	4910      	ldr	r1, [pc, #64]	; (80085bc <VL53L0X_RdDWord+0x74>)
 800857a:	68f8      	ldr	r0, [r7, #12]
 800857c:	f7ff fe82 	bl	8008284 <_I2CRead>
 8008580:	6138      	str	r0, [r7, #16]
    if (status_int != 0) {
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d002      	beq.n	800858e <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8008588:	23ec      	movs	r3, #236	; 0xec
 800858a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800858c:	e00f      	b.n	80085ae <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800858e:	4b0b      	ldr	r3, [pc, #44]	; (80085bc <VL53L0X_RdDWord+0x74>)
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	061a      	lsls	r2, r3, #24
 8008594:	4b09      	ldr	r3, [pc, #36]	; (80085bc <VL53L0X_RdDWord+0x74>)
 8008596:	785b      	ldrb	r3, [r3, #1]
 8008598:	041b      	lsls	r3, r3, #16
 800859a:	441a      	add	r2, r3
 800859c:	4b07      	ldr	r3, [pc, #28]	; (80085bc <VL53L0X_RdDWord+0x74>)
 800859e:	789b      	ldrb	r3, [r3, #2]
 80085a0:	021b      	lsls	r3, r3, #8
 80085a2:	4413      	add	r3, r2
 80085a4:	4a05      	ldr	r2, [pc, #20]	; (80085bc <VL53L0X_RdDWord+0x74>)
 80085a6:	78d2      	ldrb	r2, [r2, #3]
 80085a8:	441a      	add	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	601a      	str	r2, [r3, #0]

done:
    VL53L0X_PutI2cBus();
    return Status;
 80085ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	20000318 	.word	0x20000318

080085c0 <VL53L0X_PollingDelay>:

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80085c8:	2300      	movs	r3, #0
 80085ca:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 80085cc:	2002      	movs	r0, #2
 80085ce:	f7f7 fff3 	bl	80005b8 <HAL_Delay>
    return status;
 80085d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 80085e6:	463b      	mov	r3, r7
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	605a      	str	r2, [r3, #4]
 80085ee:	609a      	str	r2, [r3, #8]
 80085f0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80085f2:	4b28      	ldr	r3, [pc, #160]	; (8008694 <MX_ADC1_Init+0xb4>)
 80085f4:	4a28      	ldr	r2, [pc, #160]	; (8008698 <MX_ADC1_Init+0xb8>)
 80085f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80085f8:	4b26      	ldr	r3, [pc, #152]	; (8008694 <MX_ADC1_Init+0xb4>)
 80085fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80085fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8008600:	4b24      	ldr	r3, [pc, #144]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008602:	2200      	movs	r2, #0
 8008604:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008608:	2201      	movs	r2, #1
 800860a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800860c:	4b21      	ldr	r3, [pc, #132]	; (8008694 <MX_ADC1_Init+0xb4>)
 800860e:	2201      	movs	r2, #1
 8008610:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8008612:	4b20      	ldr	r3, [pc, #128]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800861a:	4b1e      	ldr	r3, [pc, #120]	; (8008694 <MX_ADC1_Init+0xb4>)
 800861c:	2200      	movs	r2, #0
 800861e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8008620:	4b1c      	ldr	r3, [pc, #112]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008622:	4a1e      	ldr	r2, [pc, #120]	; (800869c <MX_ADC1_Init+0xbc>)
 8008624:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8008626:	4b1b      	ldr	r3, [pc, #108]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008628:	2200      	movs	r2, #0
 800862a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800862c:	4b19      	ldr	r3, [pc, #100]	; (8008694 <MX_ADC1_Init+0xb4>)
 800862e:	2202      	movs	r2, #2
 8008630:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8008632:	4b18      	ldr	r3, [pc, #96]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008634:	2201      	movs	r2, #1
 8008636:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800863a:	4b16      	ldr	r3, [pc, #88]	; (8008694 <MX_ADC1_Init+0xb4>)
 800863c:	2201      	movs	r2, #1
 800863e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8008640:	4814      	ldr	r0, [pc, #80]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008642:	f7f7 ffdb 	bl	80005fc <HAL_ADC_Init>
 8008646:	4603      	mov	r3, r0
 8008648:	2b00      	cmp	r3, #0
 800864a:	d001      	beq.n	8008650 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800864c:	f000 fd7e 	bl	800914c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8008650:	230a      	movs	r3, #10
 8008652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8008654:	2301      	movs	r3, #1
 8008656:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8008658:	2307      	movs	r3, #7
 800865a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800865c:	463b      	mov	r3, r7
 800865e:	4619      	mov	r1, r3
 8008660:	480c      	ldr	r0, [pc, #48]	; (8008694 <MX_ADC1_Init+0xb4>)
 8008662:	f7f8 f901 	bl	8000868 <HAL_ADC_ConfigChannel>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d001      	beq.n	8008670 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800866c:	f000 fd6e 	bl	800914c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8008670:	230b      	movs	r3, #11
 8008672:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8008674:	2302      	movs	r3, #2
 8008676:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8008678:	463b      	mov	r3, r7
 800867a:	4619      	mov	r1, r3
 800867c:	4805      	ldr	r0, [pc, #20]	; (8008694 <MX_ADC1_Init+0xb4>)
 800867e:	f7f8 f8f3 	bl	8000868 <HAL_ADC_ConfigChannel>
 8008682:	4603      	mov	r3, r0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d001      	beq.n	800868c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8008688:	f000 fd60 	bl	800914c <Error_Handler>
  }

}
 800868c:	bf00      	nop
 800868e:	3710      	adds	r7, #16
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}
 8008694:	20000358 	.word	0x20000358
 8008698:	40012000 	.word	0x40012000
 800869c:	0f000001 	.word	0x0f000001

080086a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08a      	sub	sp, #40	; 0x28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086a8:	f107 0314 	add.w	r3, r7, #20
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	609a      	str	r2, [r3, #8]
 80086b4:	60da      	str	r2, [r3, #12]
 80086b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a2f      	ldr	r2, [pc, #188]	; (800877c <HAL_ADC_MspInit+0xdc>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d157      	bne.n	8008772 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80086c2:	2300      	movs	r3, #0
 80086c4:	613b      	str	r3, [r7, #16]
 80086c6:	4b2e      	ldr	r3, [pc, #184]	; (8008780 <HAL_ADC_MspInit+0xe0>)
 80086c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ca:	4a2d      	ldr	r2, [pc, #180]	; (8008780 <HAL_ADC_MspInit+0xe0>)
 80086cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086d0:	6453      	str	r3, [r2, #68]	; 0x44
 80086d2:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <HAL_ADC_MspInit+0xe0>)
 80086d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086da:	613b      	str	r3, [r7, #16]
 80086dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80086de:	2300      	movs	r3, #0
 80086e0:	60fb      	str	r3, [r7, #12]
 80086e2:	4b27      	ldr	r3, [pc, #156]	; (8008780 <HAL_ADC_MspInit+0xe0>)
 80086e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e6:	4a26      	ldr	r2, [pc, #152]	; (8008780 <HAL_ADC_MspInit+0xe0>)
 80086e8:	f043 0304 	orr.w	r3, r3, #4
 80086ec:	6313      	str	r3, [r2, #48]	; 0x30
 80086ee:	4b24      	ldr	r3, [pc, #144]	; (8008780 <HAL_ADC_MspInit+0xe0>)
 80086f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f2:	f003 0304 	and.w	r3, r3, #4
 80086f6:	60fb      	str	r3, [r7, #12]
 80086f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11 
    */
    GPIO_InitStruct.Pin = LS1_Pin|LS2_Pin;
 80086fa:	2303      	movs	r3, #3
 80086fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80086fe:	2303      	movs	r3, #3
 8008700:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008702:	2300      	movs	r3, #0
 8008704:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008706:	f107 0314 	add.w	r3, r7, #20
 800870a:	4619      	mov	r1, r3
 800870c:	481d      	ldr	r0, [pc, #116]	; (8008784 <HAL_ADC_MspInit+0xe4>)
 800870e:	f7f8 ffcb 	bl	80016a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8008712:	4b1d      	ldr	r3, [pc, #116]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008714:	4a1d      	ldr	r2, [pc, #116]	; (800878c <HAL_ADC_MspInit+0xec>)
 8008716:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008718:	4b1b      	ldr	r3, [pc, #108]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 800871a:	2200      	movs	r2, #0
 800871c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800871e:	4b1a      	ldr	r3, [pc, #104]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008720:	2200      	movs	r2, #0
 8008722:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008724:	4b18      	ldr	r3, [pc, #96]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008726:	2200      	movs	r2, #0
 8008728:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800872a:	4b17      	ldr	r3, [pc, #92]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 800872c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008730:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008734:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008738:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800873a:	4b13      	ldr	r3, [pc, #76]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 800873c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008740:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8008742:	4b11      	ldr	r3, [pc, #68]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008744:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008748:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800874a:	4b0f      	ldr	r3, [pc, #60]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 800874c:	2200      	movs	r2, #0
 800874e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008750:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008752:	2200      	movs	r2, #0
 8008754:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008756:	480c      	ldr	r0, [pc, #48]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 8008758:	f7f8 fc38 	bl	8000fcc <HAL_DMA_Init>
 800875c:	4603      	mov	r3, r0
 800875e:	2b00      	cmp	r3, #0
 8008760:	d001      	beq.n	8008766 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8008762:	f000 fcf3 	bl	800914c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a07      	ldr	r2, [pc, #28]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 800876a:	639a      	str	r2, [r3, #56]	; 0x38
 800876c:	4a06      	ldr	r2, [pc, #24]	; (8008788 <HAL_ADC_MspInit+0xe8>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8008772:	bf00      	nop
 8008774:	3728      	adds	r7, #40	; 0x28
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	40012000 	.word	0x40012000
 8008780:	40023800 	.word	0x40023800
 8008784:	40020800 	.word	0x40020800
 8008788:	200003a0 	.word	0x200003a0
 800878c:	40026410 	.word	0x40026410

08008790 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b082      	sub	sp, #8
 8008794:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8008796:	2300      	movs	r3, #0
 8008798:	607b      	str	r3, [r7, #4]
 800879a:	4b0c      	ldr	r3, [pc, #48]	; (80087cc <MX_DMA_Init+0x3c>)
 800879c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879e:	4a0b      	ldr	r2, [pc, #44]	; (80087cc <MX_DMA_Init+0x3c>)
 80087a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80087a4:	6313      	str	r3, [r2, #48]	; 0x30
 80087a6:	4b09      	ldr	r3, [pc, #36]	; (80087cc <MX_DMA_Init+0x3c>)
 80087a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ae:	607b      	str	r3, [r7, #4]
 80087b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80087b2:	2200      	movs	r2, #0
 80087b4:	2100      	movs	r1, #0
 80087b6:	2038      	movs	r0, #56	; 0x38
 80087b8:	f7f8 fbd1 	bl	8000f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80087bc:	2038      	movs	r0, #56	; 0x38
 80087be:	f7f8 fbea 	bl	8000f96 <HAL_NVIC_EnableIRQ>

}
 80087c2:	bf00      	nop
 80087c4:	3708      	adds	r7, #8
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
 80087ca:	bf00      	nop
 80087cc:	40023800 	.word	0x40023800

080087d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	605a      	str	r2, [r3, #4]
 80087e0:	609a      	str	r2, [r3, #8]
 80087e2:	60da      	str	r2, [r3, #12]
 80087e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80087e6:	2300      	movs	r3, #0
 80087e8:	60bb      	str	r3, [r7, #8]
 80087ea:	4b41      	ldr	r3, [pc, #260]	; (80088f0 <MX_GPIO_Init+0x120>)
 80087ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ee:	4a40      	ldr	r2, [pc, #256]	; (80088f0 <MX_GPIO_Init+0x120>)
 80087f0:	f043 0304 	orr.w	r3, r3, #4
 80087f4:	6313      	str	r3, [r2, #48]	; 0x30
 80087f6:	4b3e      	ldr	r3, [pc, #248]	; (80088f0 <MX_GPIO_Init+0x120>)
 80087f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087fa:	f003 0304 	and.w	r3, r3, #4
 80087fe:	60bb      	str	r3, [r7, #8]
 8008800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008802:	2300      	movs	r3, #0
 8008804:	607b      	str	r3, [r7, #4]
 8008806:	4b3a      	ldr	r3, [pc, #232]	; (80088f0 <MX_GPIO_Init+0x120>)
 8008808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880a:	4a39      	ldr	r2, [pc, #228]	; (80088f0 <MX_GPIO_Init+0x120>)
 800880c:	f043 0301 	orr.w	r3, r3, #1
 8008810:	6313      	str	r3, [r2, #48]	; 0x30
 8008812:	4b37      	ldr	r3, [pc, #220]	; (80088f0 <MX_GPIO_Init+0x120>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	607b      	str	r3, [r7, #4]
 800881c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	603b      	str	r3, [r7, #0]
 8008822:	4b33      	ldr	r3, [pc, #204]	; (80088f0 <MX_GPIO_Init+0x120>)
 8008824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008826:	4a32      	ldr	r2, [pc, #200]	; (80088f0 <MX_GPIO_Init+0x120>)
 8008828:	f043 0302 	orr.w	r3, r3, #2
 800882c:	6313      	str	r3, [r2, #48]	; 0x30
 800882e:	4b30      	ldr	r3, [pc, #192]	; (80088f0 <MX_GPIO_Init+0x120>)
 8008830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008832:	f003 0302 	and.w	r3, r3, #2
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(X1_GPIO_Port, X1_Pin, GPIO_PIN_RESET);
 800883a:	2200      	movs	r2, #0
 800883c:	2104      	movs	r1, #4
 800883e:	482d      	ldr	r0, [pc, #180]	; (80088f4 <MX_GPIO_Init+0x124>)
 8008840:	f7f9 f8cc 	bl	80019dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, I1_1_Pin|I1_2_Pin|LED3_Pin|LED2_Pin 
 8008844:	2200      	movs	r2, #0
 8008846:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 800884a:	482b      	ldr	r0, [pc, #172]	; (80088f8 <MX_GPIO_Init+0x128>)
 800884c:	f7f9 f8c6 	bl	80019dc <HAL_GPIO_WritePin>
                          |LED1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, I2_1_Pin|I2_2_Pin|X5_Pin|X4_Pin 
 8008850:	2200      	movs	r2, #0
 8008852:	f241 01ab 	movw	r1, #4267	; 0x10ab
 8008856:	4829      	ldr	r0, [pc, #164]	; (80088fc <MX_GPIO_Init+0x12c>)
 8008858:	f7f9 f8c0 	bl	80019dc <HAL_GPIO_WritePin>
                          |X3_Pin|X2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = START_Pin;
 800885c:	2304      	movs	r3, #4
 800885e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008860:	2300      	movs	r3, #0
 8008862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008864:	2300      	movs	r3, #0
 8008866:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(START_GPIO_Port, &GPIO_InitStruct);
 8008868:	f107 030c 	add.w	r3, r7, #12
 800886c:	4619      	mov	r1, r3
 800886e:	4822      	ldr	r0, [pc, #136]	; (80088f8 <MX_GPIO_Init+0x128>)
 8008870:	f7f8 ff1a 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = X1_Pin;
 8008874:	2304      	movs	r3, #4
 8008876:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008878:	2301      	movs	r3, #1
 800887a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008880:	2300      	movs	r3, #0
 8008882:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(X1_GPIO_Port, &GPIO_InitStruct);
 8008884:	f107 030c 	add.w	r3, r7, #12
 8008888:	4619      	mov	r1, r3
 800888a:	481a      	ldr	r0, [pc, #104]	; (80088f4 <MX_GPIO_Init+0x124>)
 800888c:	f7f8 ff0c 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = I1_1_Pin|I1_2_Pin|LED3_Pin|LED2_Pin 
 8008890:	f44f 736c 	mov.w	r3, #944	; 0x3b0
 8008894:	60fb      	str	r3, [r7, #12]
                          |LED1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008896:	2301      	movs	r3, #1
 8008898:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889a:	2300      	movs	r3, #0
 800889c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800889e:	2300      	movs	r3, #0
 80088a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088a2:	f107 030c 	add.w	r3, r7, #12
 80088a6:	4619      	mov	r1, r3
 80088a8:	4813      	ldr	r0, [pc, #76]	; (80088f8 <MX_GPIO_Init+0x128>)
 80088aa:	f7f8 fefd 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = I2_1_Pin|I2_2_Pin|X5_Pin|X4_Pin 
 80088ae:	f241 03ab 	movw	r3, #4267	; 0x10ab
 80088b2:	60fb      	str	r3, [r7, #12]
                          |X3_Pin|X2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088b4:	2301      	movs	r3, #1
 80088b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088bc:	2300      	movs	r3, #0
 80088be:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088c0:	f107 030c 	add.w	r3, r7, #12
 80088c4:	4619      	mov	r1, r3
 80088c6:	480d      	ldr	r0, [pc, #52]	; (80088fc <MX_GPIO_Init+0x12c>)
 80088c8:	f7f8 feee 	bl	80016a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SW3_Pin|SW2_Pin|SW1_Pin;
 80088cc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80088d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088d2:	2300      	movs	r3, #0
 80088d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80088d6:	2301      	movs	r3, #1
 80088d8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088da:	f107 030c 	add.w	r3, r7, #12
 80088de:	4619      	mov	r1, r3
 80088e0:	4804      	ldr	r0, [pc, #16]	; (80088f4 <MX_GPIO_Init+0x124>)
 80088e2:	f7f8 fee1 	bl	80016a8 <HAL_GPIO_Init>

}
 80088e6:	bf00      	nop
 80088e8:	3720      	adds	r7, #32
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	40023800 	.word	0x40023800
 80088f4:	40020000 	.word	0x40020000
 80088f8:	40020800 	.word	0x40020800
 80088fc:	40020400 	.word	0x40020400

08008900 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008904:	4b12      	ldr	r3, [pc, #72]	; (8008950 <MX_I2C1_Init+0x50>)
 8008906:	4a13      	ldr	r2, [pc, #76]	; (8008954 <MX_I2C1_Init+0x54>)
 8008908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800890a:	4b11      	ldr	r3, [pc, #68]	; (8008950 <MX_I2C1_Init+0x50>)
 800890c:	4a12      	ldr	r2, [pc, #72]	; (8008958 <MX_I2C1_Init+0x58>)
 800890e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008910:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <MX_I2C1_Init+0x50>)
 8008912:	2200      	movs	r2, #0
 8008914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008916:	4b0e      	ldr	r3, [pc, #56]	; (8008950 <MX_I2C1_Init+0x50>)
 8008918:	2200      	movs	r2, #0
 800891a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800891c:	4b0c      	ldr	r3, [pc, #48]	; (8008950 <MX_I2C1_Init+0x50>)
 800891e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008924:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <MX_I2C1_Init+0x50>)
 8008926:	2200      	movs	r2, #0
 8008928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800892a:	4b09      	ldr	r3, [pc, #36]	; (8008950 <MX_I2C1_Init+0x50>)
 800892c:	2200      	movs	r2, #0
 800892e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008930:	4b07      	ldr	r3, [pc, #28]	; (8008950 <MX_I2C1_Init+0x50>)
 8008932:	2200      	movs	r2, #0
 8008934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008936:	4b06      	ldr	r3, [pc, #24]	; (8008950 <MX_I2C1_Init+0x50>)
 8008938:	2200      	movs	r2, #0
 800893a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800893c:	4804      	ldr	r0, [pc, #16]	; (8008950 <MX_I2C1_Init+0x50>)
 800893e:	f7f9 f867 	bl	8001a10 <HAL_I2C_Init>
 8008942:	4603      	mov	r3, r0
 8008944:	2b00      	cmp	r3, #0
 8008946:	d001      	beq.n	800894c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008948:	f000 fc00 	bl	800914c <Error_Handler>
  }

}
 800894c:	bf00      	nop
 800894e:	bd80      	pop	{r7, pc}
 8008950:	20000400 	.word	0x20000400
 8008954:	40005400 	.word	0x40005400
 8008958:	00061a80 	.word	0x00061a80

0800895c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08a      	sub	sp, #40	; 0x28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008964:	f107 0314 	add.w	r3, r7, #20
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	605a      	str	r2, [r3, #4]
 800896e:	609a      	str	r2, [r3, #8]
 8008970:	60da      	str	r2, [r3, #12]
 8008972:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a19      	ldr	r2, [pc, #100]	; (80089e0 <HAL_I2C_MspInit+0x84>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d12c      	bne.n	80089d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800897e:	2300      	movs	r3, #0
 8008980:	613b      	str	r3, [r7, #16]
 8008982:	4b18      	ldr	r3, [pc, #96]	; (80089e4 <HAL_I2C_MspInit+0x88>)
 8008984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008986:	4a17      	ldr	r2, [pc, #92]	; (80089e4 <HAL_I2C_MspInit+0x88>)
 8008988:	f043 0302 	orr.w	r3, r3, #2
 800898c:	6313      	str	r3, [r2, #48]	; 0x30
 800898e:	4b15      	ldr	r3, [pc, #84]	; (80089e4 <HAL_I2C_MspInit+0x88>)
 8008990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008992:	f003 0302 	and.w	r3, r3, #2
 8008996:	613b      	str	r3, [r7, #16]
 8008998:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800899a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800899e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80089a0:	2312      	movs	r3, #18
 80089a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80089a4:	2301      	movs	r3, #1
 80089a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80089a8:	2303      	movs	r3, #3
 80089aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80089ac:	2304      	movs	r3, #4
 80089ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80089b0:	f107 0314 	add.w	r3, r7, #20
 80089b4:	4619      	mov	r1, r3
 80089b6:	480c      	ldr	r0, [pc, #48]	; (80089e8 <HAL_I2C_MspInit+0x8c>)
 80089b8:	f7f8 fe76 	bl	80016a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80089bc:	2300      	movs	r3, #0
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <HAL_I2C_MspInit+0x88>)
 80089c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c4:	4a07      	ldr	r2, [pc, #28]	; (80089e4 <HAL_I2C_MspInit+0x88>)
 80089c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80089ca:	6413      	str	r3, [r2, #64]	; 0x40
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <HAL_I2C_MspInit+0x88>)
 80089ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089d4:	60fb      	str	r3, [r7, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80089d8:	bf00      	nop
 80089da:	3728      	adds	r7, #40	; 0x28
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}
 80089e0:	40005400 	.word	0x40005400
 80089e4:	40023800 	.word	0x40023800
 80089e8:	40020400 	.word	0x40020400

080089ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */


	HAL_Init();
 80089f0:	f7f7 fd70 	bl	80004d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80089f4:	f000 f986 	bl	8008d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80089f8:	f7ff feea 	bl	80087d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80089fc:	f7ff fec8 	bl	8008790 <MX_DMA_Init>
  MX_ADC1_Init();
 8008a00:	f7ff fdee 	bl	80085e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8008a04:	f7ff ff7c 	bl	8008900 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008a08:	f000 fcf6 	bl	80093f8 <MX_TIM1_Init>
  MX_TIM2_Init();
 8008a0c:	f000 fd4c 	bl	80094a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8008a10:	f000 fd9e 	bl	8009550 <MX_TIM3_Init>
  while(1) //petla wyboru taktyki
  {
//	  przod();
//	  zad_V_L=200;
//	  zad_V_P=200;
	  takt=wybor(takt);
 8008a14:	4baa      	ldr	r3, [pc, #680]	; (8008cc0 <main+0x2d4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 faf7 	bl	800900c <wybor>
 8008a1e:	4602      	mov	r2, r0
 8008a20:	4ba7      	ldr	r3, [pc, #668]	; (8008cc0 <main+0x2d4>)
 8008a22:	601a      	str	r2, [r3, #0]
	  if(SW2==RESET)
 8008a24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008a28:	48a6      	ldr	r0, [pc, #664]	; (8008cc4 <main+0x2d8>)
 8008a2a:	f7f8 ffbf 	bl	80019ac <HAL_GPIO_ReadPin>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1ef      	bne.n	8008a14 <main+0x28>
	  {
		  start = 1;
 8008a34:	4ba4      	ldr	r3, [pc, #656]	; (8008cc8 <main+0x2dc>)
 8008a36:	2201      	movs	r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
		  break;
 8008a3a:	bf00      	nop
	  }
  }

  //////////////////Inicjalizacja czujnikow i ustawianie adresow//////////////////
  led(1);
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	f000 fa85 	bl	8008f4c <led>

  HAL_GPIO_WritePin(X1_GPIO_Port, X1_Pin, RESET); //XS wyl
 8008a42:	2200      	movs	r2, #0
 8008a44:	2104      	movs	r1, #4
 8008a46:	489f      	ldr	r0, [pc, #636]	; (8008cc4 <main+0x2d8>)
 8008a48:	f7f8 ffc8 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X2_GPIO_Port, X2_Pin, RESET);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	2180      	movs	r1, #128	; 0x80
 8008a50:	489e      	ldr	r0, [pc, #632]	; (8008ccc <main+0x2e0>)
 8008a52:	f7f8 ffc3 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X3_GPIO_Port, X3_Pin, RESET);
 8008a56:	2200      	movs	r2, #0
 8008a58:	2120      	movs	r1, #32
 8008a5a:	489c      	ldr	r0, [pc, #624]	; (8008ccc <main+0x2e0>)
 8008a5c:	f7f8 ffbe 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X4_GPIO_Port, X4_Pin, RESET);
 8008a60:	2200      	movs	r2, #0
 8008a62:	2108      	movs	r1, #8
 8008a64:	4899      	ldr	r0, [pc, #612]	; (8008ccc <main+0x2e0>)
 8008a66:	f7f8 ffb9 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(X5_GPIO_Port, X5_Pin, RESET);
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008a70:	4896      	ldr	r0, [pc, #600]	; (8008ccc <main+0x2e0>)
 8008a72:	f7f8 ffb3 	bl	80019dc <HAL_GPIO_WritePin>

  Dev1->I2cHandle = &hi2c1; //zmienna I2C
 8008a76:	4b96      	ldr	r3, [pc, #600]	; (8008cd0 <main+0x2e4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a96      	ldr	r2, [pc, #600]	; (8008cd4 <main+0x2e8>)
 8008a7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev1->I2cDevAddr = 0x52; //standardowy adres
 8008a80:	4b93      	ldr	r3, [pc, #588]	; (8008cd0 <main+0x2e4>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2252      	movs	r2, #82	; 0x52
 8008a86:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  Dev2->I2cHandle = &hi2c1; //zmienna I2C
 8008a8a:	4b93      	ldr	r3, [pc, #588]	; (8008cd8 <main+0x2ec>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	4a91      	ldr	r2, [pc, #580]	; (8008cd4 <main+0x2e8>)
 8008a90:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev2->I2cDevAddr = 0x52; //standardowy adres
 8008a94:	4b90      	ldr	r3, [pc, #576]	; (8008cd8 <main+0x2ec>)
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2252      	movs	r2, #82	; 0x52
 8008a9a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  Dev3->I2cHandle = &hi2c1; //zmienna I2C
 8008a9e:	4b8f      	ldr	r3, [pc, #572]	; (8008cdc <main+0x2f0>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a8c      	ldr	r2, [pc, #560]	; (8008cd4 <main+0x2e8>)
 8008aa4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev3->I2cDevAddr = 0x52; //standardowy adres
 8008aa8:	4b8c      	ldr	r3, [pc, #560]	; (8008cdc <main+0x2f0>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	2252      	movs	r2, #82	; 0x52
 8008aae:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  Dev4->I2cHandle = &hi2c1; //zmienna I2C
 8008ab2:	4b8b      	ldr	r3, [pc, #556]	; (8008ce0 <main+0x2f4>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a87      	ldr	r2, [pc, #540]	; (8008cd4 <main+0x2e8>)
 8008ab8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev4->I2cDevAddr = 0x52; //standardowy adres
 8008abc:	4b88      	ldr	r3, [pc, #544]	; (8008ce0 <main+0x2f4>)
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2252      	movs	r2, #82	; 0x52
 8008ac2:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  Dev5->I2cHandle = &hi2c1; //zmienna I2C
 8008ac6:	4b87      	ldr	r3, [pc, #540]	; (8008ce4 <main+0x2f8>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4a82      	ldr	r2, [pc, #520]	; (8008cd4 <main+0x2e8>)
 8008acc:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  Dev5->I2cDevAddr = 0x52; //standardowy adres
 8008ad0:	4b84      	ldr	r3, [pc, #528]	; (8008ce4 <main+0x2f8>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	2252      	movs	r2, #82	; 0x52
 8008ad6:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  HAL_Delay(100);
 8008ada:	2064      	movs	r0, #100	; 0x64
 8008adc:	f7f7 fd6c 	bl	80005b8 <HAL_Delay>
  HAL_GPIO_WritePin(X1_GPIO_Port, X1_Pin, SET); //XS wl
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	2104      	movs	r1, #4
 8008ae4:	4877      	ldr	r0, [pc, #476]	; (8008cc4 <main+0x2d8>)
 8008ae6:	f7f8 ff79 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008aea:	2064      	movs	r0, #100	; 0x64
 8008aec:	f7f7 fd64 	bl	80005b8 <HAL_Delay>
  config(Dev1);
 8008af0:	4b77      	ldr	r3, [pc, #476]	; (8008cd0 <main+0x2e4>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4618      	mov	r0, r3
 8008af6:	f000 f96f 	bl	8008dd8 <config>
  HAL_Delay(100);
 8008afa:	2064      	movs	r0, #100	; 0x64
 8008afc:	f7f7 fd5c 	bl	80005b8 <HAL_Delay>
  VL53L0X_SetDeviceAddress(Dev1, 0x62);
 8008b00:	4b73      	ldr	r3, [pc, #460]	; (8008cd0 <main+0x2e4>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2162      	movs	r1, #98	; 0x62
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fa fff5 	bl	8003af6 <VL53L0X_SetDeviceAddress>
  HAL_Delay(100);
 8008b0c:	2064      	movs	r0, #100	; 0x64
 8008b0e:	f7f7 fd53 	bl	80005b8 <HAL_Delay>
  Dev1->I2cDevAddr = 0x62; //ustawienie nowego adresu
 8008b12:	4b6f      	ldr	r3, [pc, #444]	; (8008cd0 <main+0x2e4>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2262      	movs	r2, #98	; 0x62
 8008b18:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  HAL_Delay(100);
 8008b1c:	2064      	movs	r0, #100	; 0x64
 8008b1e:	f7f7 fd4b 	bl	80005b8 <HAL_Delay>
  HAL_GPIO_WritePin(X2_GPIO_Port, X2_Pin, SET); //XS wl
 8008b22:	2201      	movs	r2, #1
 8008b24:	2180      	movs	r1, #128	; 0x80
 8008b26:	4869      	ldr	r0, [pc, #420]	; (8008ccc <main+0x2e0>)
 8008b28:	f7f8 ff58 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008b2c:	2064      	movs	r0, #100	; 0x64
 8008b2e:	f7f7 fd43 	bl	80005b8 <HAL_Delay>
  config(Dev2);
 8008b32:	4b69      	ldr	r3, [pc, #420]	; (8008cd8 <main+0x2ec>)
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	f000 f94e 	bl	8008dd8 <config>
  HAL_Delay(100);
 8008b3c:	2064      	movs	r0, #100	; 0x64
 8008b3e:	f7f7 fd3b 	bl	80005b8 <HAL_Delay>
  VL53L0X_SetDeviceAddress(Dev2, 0x64);
 8008b42:	4b65      	ldr	r3, [pc, #404]	; (8008cd8 <main+0x2ec>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2164      	movs	r1, #100	; 0x64
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7fa ffd4 	bl	8003af6 <VL53L0X_SetDeviceAddress>
  HAL_Delay(100);
 8008b4e:	2064      	movs	r0, #100	; 0x64
 8008b50:	f7f7 fd32 	bl	80005b8 <HAL_Delay>
  Dev2->I2cDevAddr = 0x64; //ustawienie nowego adresu
 8008b54:	4b60      	ldr	r3, [pc, #384]	; (8008cd8 <main+0x2ec>)
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	2264      	movs	r2, #100	; 0x64
 8008b5a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160

  HAL_Delay(100);
 8008b5e:	2064      	movs	r0, #100	; 0x64
 8008b60:	f7f7 fd2a 	bl	80005b8 <HAL_Delay>
  HAL_GPIO_WritePin(X3_GPIO_Port, X3_Pin, SET); //XS wl
 8008b64:	2201      	movs	r2, #1
 8008b66:	2120      	movs	r1, #32
 8008b68:	4858      	ldr	r0, [pc, #352]	; (8008ccc <main+0x2e0>)
 8008b6a:	f7f8 ff37 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008b6e:	2064      	movs	r0, #100	; 0x64
 8008b70:	f7f7 fd22 	bl	80005b8 <HAL_Delay>
  config(Dev3);
 8008b74:	4b59      	ldr	r3, [pc, #356]	; (8008cdc <main+0x2f0>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f92d 	bl	8008dd8 <config>
  HAL_Delay(100);
 8008b7e:	2064      	movs	r0, #100	; 0x64
 8008b80:	f7f7 fd1a 	bl	80005b8 <HAL_Delay>
  VL53L0X_SetDeviceAddress(Dev3, 0x66);
 8008b84:	4b55      	ldr	r3, [pc, #340]	; (8008cdc <main+0x2f0>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	2166      	movs	r1, #102	; 0x66
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f7fa ffb3 	bl	8003af6 <VL53L0X_SetDeviceAddress>
  HAL_Delay(100);
 8008b90:	2064      	movs	r0, #100	; 0x64
 8008b92:	f7f7 fd11 	bl	80005b8 <HAL_Delay>
  Dev3->I2cDevAddr = 0x66; //ustawienie nowego adresu
 8008b96:	4b51      	ldr	r3, [pc, #324]	; (8008cdc <main+0x2f0>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	2266      	movs	r2, #102	; 0x66
 8008b9c:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  HAL_Delay(100);
 8008ba0:	2064      	movs	r0, #100	; 0x64
 8008ba2:	f7f7 fd09 	bl	80005b8 <HAL_Delay>

  HAL_Delay(100);
 8008ba6:	2064      	movs	r0, #100	; 0x64
 8008ba8:	f7f7 fd06 	bl	80005b8 <HAL_Delay>
  HAL_GPIO_WritePin(X4_GPIO_Port, X4_Pin, SET); //XS wl
 8008bac:	2201      	movs	r2, #1
 8008bae:	2108      	movs	r1, #8
 8008bb0:	4846      	ldr	r0, [pc, #280]	; (8008ccc <main+0x2e0>)
 8008bb2:	f7f8 ff13 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008bb6:	2064      	movs	r0, #100	; 0x64
 8008bb8:	f7f7 fcfe 	bl	80005b8 <HAL_Delay>
  config(Dev4);
 8008bbc:	4b48      	ldr	r3, [pc, #288]	; (8008ce0 <main+0x2f4>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f909 	bl	8008dd8 <config>
  HAL_Delay(100);
 8008bc6:	2064      	movs	r0, #100	; 0x64
 8008bc8:	f7f7 fcf6 	bl	80005b8 <HAL_Delay>
  VL53L0X_SetDeviceAddress(Dev4, 0x68);
 8008bcc:	4b44      	ldr	r3, [pc, #272]	; (8008ce0 <main+0x2f4>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2168      	movs	r1, #104	; 0x68
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fa ff8f 	bl	8003af6 <VL53L0X_SetDeviceAddress>
  HAL_Delay(100);
 8008bd8:	2064      	movs	r0, #100	; 0x64
 8008bda:	f7f7 fced 	bl	80005b8 <HAL_Delay>
  Dev4->I2cDevAddr = 0x68; //ustawienie nowego adresu
 8008bde:	4b40      	ldr	r3, [pc, #256]	; (8008ce0 <main+0x2f4>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2268      	movs	r2, #104	; 0x68
 8008be4:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  HAL_Delay(100);
 8008be8:	2064      	movs	r0, #100	; 0x64
 8008bea:	f7f7 fce5 	bl	80005b8 <HAL_Delay>

  HAL_Delay(100);
 8008bee:	2064      	movs	r0, #100	; 0x64
 8008bf0:	f7f7 fce2 	bl	80005b8 <HAL_Delay>
  HAL_GPIO_WritePin(X5_GPIO_Port, X5_Pin, SET); //XS wl
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008bfa:	4834      	ldr	r0, [pc, #208]	; (8008ccc <main+0x2e0>)
 8008bfc:	f7f8 feee 	bl	80019dc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8008c00:	2064      	movs	r0, #100	; 0x64
 8008c02:	f7f7 fcd9 	bl	80005b8 <HAL_Delay>
  config(Dev5);
 8008c06:	4b37      	ldr	r3, [pc, #220]	; (8008ce4 <main+0x2f8>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 f8e4 	bl	8008dd8 <config>
  HAL_Delay(100);
 8008c10:	2064      	movs	r0, #100	; 0x64
 8008c12:	f7f7 fcd1 	bl	80005b8 <HAL_Delay>
  VL53L0X_SetDeviceAddress(Dev5, 0x6A);
 8008c16:	4b33      	ldr	r3, [pc, #204]	; (8008ce4 <main+0x2f8>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	216a      	movs	r1, #106	; 0x6a
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f7fa ff6a 	bl	8003af6 <VL53L0X_SetDeviceAddress>
  HAL_Delay(100);
 8008c22:	2064      	movs	r0, #100	; 0x64
 8008c24:	f7f7 fcc8 	bl	80005b8 <HAL_Delay>
  Dev5->I2cDevAddr = 0x6A; //ustawienie nowego adresu
 8008c28:	4b2e      	ldr	r3, [pc, #184]	; (8008ce4 <main+0x2f8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	226a      	movs	r2, #106	; 0x6a
 8008c2e:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
  HAL_Delay(100);
 8008c32:	2064      	movs	r0, #100	; 0x64
 8008c34:	f7f7 fcc0 	bl	80005b8 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc1, linia, 2); //działanie DMA
 8008c38:	2202      	movs	r2, #2
 8008c3a:	492b      	ldr	r1, [pc, #172]	; (8008ce8 <main+0x2fc>)
 8008c3c:	482b      	ldr	r0, [pc, #172]	; (8008cec <main+0x300>)
 8008c3e:	f7f7 fd21 	bl	8000684 <HAL_ADC_Start_DMA>

  stoj(); //silniki stan niski
 8008c42:	f000 f973 	bl	8008f2c <stoj>

  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8008c46:	213c      	movs	r1, #60	; 0x3c
 8008c48:	4829      	ldr	r0, [pc, #164]	; (8008cf0 <main+0x304>)
 8008c4a:	f7fa fb83 	bl	8003354 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL); //start enkodery
 8008c4e:	213c      	movs	r1, #60	; 0x3c
 8008c50:	4828      	ldr	r0, [pc, #160]	; (8008cf4 <main+0x308>)
 8008c52:	f7fa fb7f 	bl	8003354 <HAL_TIM_Encoder_Start_IT>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8008c56:	2100      	movs	r1, #0
 8008c58:	4827      	ldr	r0, [pc, #156]	; (8008cf8 <main+0x30c>)
 8008c5a:	f7fa fab7 	bl	80031cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2); //start pwm silnikow
 8008c5e:	2104      	movs	r1, #4
 8008c60:	4825      	ldr	r0, [pc, #148]	; (8008cf8 <main+0x30c>)
 8008c62:	f7fa fab3 	bl	80031cc <HAL_TIM_PWM_Start>

  led(0); //koniec inicjalizacji
 8008c66:	2000      	movs	r0, #0
 8008c68:	f000 f970 	bl	8008f4c <led>
  start = 1; //wywalic to!!!
 8008c6c:	4b16      	ldr	r3, [pc, #88]	; (8008cc8 <main+0x2dc>)
 8008c6e:	2201      	movs	r2, #1
 8008c70:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //rsens(odl);
	  if(start == 1)
 8008c72:	4b15      	ldr	r3, [pc, #84]	; (8008cc8 <main+0x2dc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d109      	bne.n	8008c8e <main+0x2a2>
//		  zad_V_L=150;
//		  zad_V_P=150;
//		  bialaL();
//		  if(SW2 == RESET) start = 0;

		  HAL_Delay(1000);
 8008c7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008c7e:	f7f7 fc9b 	bl	80005b8 <HAL_Delay>
		  taktyka3();
 8008c82:	f000 fa0b 	bl	800909c <taktyka3>
		  start = 0;
 8008c86:	4b10      	ldr	r3, [pc, #64]	; (8008cc8 <main+0x2dc>)
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	e7f1      	b.n	8008c72 <main+0x286>
	  }
	  else if(start == 0)
 8008c8e:	4b0e      	ldr	r3, [pc, #56]	; (8008cc8 <main+0x2dc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1ed      	bne.n	8008c72 <main+0x286>
	  {
		  stoj();
 8008c96:	f000 f949 	bl	8008f2c <stoj>
		  zad_V_L=0;
 8008c9a:	4b18      	ldr	r3, [pc, #96]	; (8008cfc <main+0x310>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
		  zad_V_P=0;
 8008ca0:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <main+0x314>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	601a      	str	r2, [r3, #0]
		  if(SW2 == RESET) start = 1;
 8008ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008caa:	4806      	ldr	r0, [pc, #24]	; (8008cc4 <main+0x2d8>)
 8008cac:	f7f8 fe7e 	bl	80019ac <HAL_GPIO_ReadPin>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1dd      	bne.n	8008c72 <main+0x286>
 8008cb6:	4b04      	ldr	r3, [pc, #16]	; (8008cc8 <main+0x2dc>)
 8008cb8:	2201      	movs	r2, #1
 8008cba:	601a      	str	r2, [r3, #0]
	  if(start == 1)
 8008cbc:	e7d9      	b.n	8008c72 <main+0x286>
 8008cbe:	bf00      	nop
 8008cc0:	200002d8 	.word	0x200002d8
 8008cc4:	40020000 	.word	0x40020000
 8008cc8:	20000cf0 	.word	0x20000cf0
 8008ccc:	40020400 	.word	0x40020400
 8008cd0:	200002c4 	.word	0x200002c4
 8008cd4:	20000400 	.word	0x20000400
 8008cd8:	200002c8 	.word	0x200002c8
 8008cdc:	200002cc 	.word	0x200002cc
 8008ce0:	200002d0 	.word	0x200002d0
 8008ce4:	200002d4 	.word	0x200002d4
 8008ce8:	20000cb4 	.word	0x20000cb4
 8008cec:	20000358 	.word	0x20000358
 8008cf0:	20000d38 	.word	0x20000d38
 8008cf4:	20000d78 	.word	0x20000d78
 8008cf8:	20000cf8 	.word	0x20000cf8
 8008cfc:	20000ce0 	.word	0x20000ce0
 8008d00:	20000c94 	.word	0x20000c94

08008d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b094      	sub	sp, #80	; 0x50
 8008d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008d0a:	f107 0320 	add.w	r3, r7, #32
 8008d0e:	2230      	movs	r2, #48	; 0x30
 8008d10:	2100      	movs	r1, #0
 8008d12:	4618      	mov	r0, r3
 8008d14:	f000 fdaf 	bl	8009876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008d18:	f107 030c 	add.w	r3, r7, #12
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]
 8008d20:	605a      	str	r2, [r3, #4]
 8008d22:	609a      	str	r2, [r3, #8]
 8008d24:	60da      	str	r2, [r3, #12]
 8008d26:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008d28:	2300      	movs	r3, #0
 8008d2a:	60bb      	str	r3, [r7, #8]
 8008d2c:	4b28      	ldr	r3, [pc, #160]	; (8008dd0 <SystemClock_Config+0xcc>)
 8008d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d30:	4a27      	ldr	r2, [pc, #156]	; (8008dd0 <SystemClock_Config+0xcc>)
 8008d32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d36:	6413      	str	r3, [r2, #64]	; 0x40
 8008d38:	4b25      	ldr	r3, [pc, #148]	; (8008dd0 <SystemClock_Config+0xcc>)
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d40:	60bb      	str	r3, [r7, #8]
 8008d42:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008d44:	2300      	movs	r3, #0
 8008d46:	607b      	str	r3, [r7, #4]
 8008d48:	4b22      	ldr	r3, [pc, #136]	; (8008dd4 <SystemClock_Config+0xd0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008d50:	4a20      	ldr	r2, [pc, #128]	; (8008dd4 <SystemClock_Config+0xd0>)
 8008d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d56:	6013      	str	r3, [r2, #0]
 8008d58:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <SystemClock_Config+0xd0>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008d60:	607b      	str	r3, [r7, #4]
 8008d62:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008d64:	2302      	movs	r3, #2
 8008d66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008d6c:	2310      	movs	r3, #16
 8008d6e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008d70:	2302      	movs	r3, #2
 8008d72:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008d74:	2300      	movs	r3, #0
 8008d76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008d78:	2308      	movs	r3, #8
 8008d7a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8008d7c:	2354      	movs	r3, #84	; 0x54
 8008d7e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008d80:	2302      	movs	r3, #2
 8008d82:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008d84:	2304      	movs	r3, #4
 8008d86:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d88:	f107 0320 	add.w	r3, r7, #32
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7f9 fdc9 	bl	8002924 <HAL_RCC_OscConfig>
 8008d92:	4603      	mov	r3, r0
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8008d98:	f000 f9d8 	bl	800914c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d9c:	230f      	movs	r3, #15
 8008d9e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008da0:	2302      	movs	r3, #2
 8008da2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008dae:	2300      	movs	r3, #0
 8008db0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008db2:	f107 030c 	add.w	r3, r7, #12
 8008db6:	2102      	movs	r1, #2
 8008db8:	4618      	mov	r0, r3
 8008dba:	f7fa f823 	bl	8002e04 <HAL_RCC_ClockConfig>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d001      	beq.n	8008dc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8008dc4:	f000 f9c2 	bl	800914c <Error_Handler>
  }
}
 8008dc8:	bf00      	nop
 8008dca:	3750      	adds	r7, #80	; 0x50
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	40023800 	.word	0x40023800
 8008dd4:	40007000 	.word	0x40007000

08008dd8 <config>:

/* USER CODE BEGIN 4 */
void config(VL53L0X_DEV Dev)
{
 8008dd8:	b580      	push	{r7, lr}
 8008dda:	b084      	sub	sp, #16
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
	uint32_t refSpadCount;
	uint8_t isApertureSpads;
	uint8_t VhvSettings;
	uint8_t PhaseCal;
  // VL53L0X init for Single Measurement
	VL53L0X_WaitDeviceBooted( Dev );
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7fb f987 	bl	80040f4 <VL53L0X_WaitDeviceBooted>
	VL53L0X_DataInit( Dev );
 8008de6:	6878      	ldr	r0, [r7, #4]
 8008de8:	f7fa fe9e 	bl	8003b28 <VL53L0X_DataInit>
	VL53L0X_StaticInit( Dev );
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7fa ffff 	bl	8003df0 <VL53L0X_StaticInit>
	VL53L0X_PerformRefCalibration(Dev, &VhvSettings, &PhaseCal);
 8008df2:	f107 0209 	add.w	r2, r7, #9
 8008df6:	f107 030a 	add.w	r3, r7, #10
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7fb fe9d 	bl	8004b3c <VL53L0X_PerformRefCalibration>
	VL53L0X_PerformRefSpadManagement(Dev, &refSpadCount, &isApertureSpads);
 8008e02:	f107 020b 	add.w	r2, r7, #11
 8008e06:	f107 030c 	add.w	r3, r7, #12
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f7fc fb23 	bl	8005458 <VL53L0X_PerformRefSpadManagement>
	VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008e12:	2100      	movs	r1, #0
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f7fb fa0b 	bl	8004230 <VL53L0X_SetDeviceMode>

	////////WERSJA STANDARD/////////////////
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1);
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	2100      	movs	r1, #0
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fb fc86 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1);
 8008e24:	2201      	movs	r2, #1
 8008e26:	2101      	movs	r1, #1
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f7fb fc81 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckEnable(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 1);
 8008e2e:	2201      	movs	r2, #1
 8008e30:	2103      	movs	r1, #3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f7fb fc7c 	bl	8004730 <VL53L0X_SetLimitCheckEnable>
	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,(FixPoint1616_t)(1.5*0.023*65536));
 8008e38:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8008e3c:	2103      	movs	r1, #3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7fb fd26 	bl	8004890 <VL53L0X_SetLimitCheckValue>
//	VL53L0X_SetLimitCheckValue(Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, (FixPoint1616_t)(60*65536));
//	VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev, 33000);
//	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_PRE_RANGE, 18);
//	VL53L0X_SetVcselPulsePeriod(Dev, VL53L0X_VCSEL_PERIOD_FINAL_RANGE, 14);
//	///////////////////////////////////////
}
 8008e44:	bf00      	nop
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <LS_tyl>:

void LS_tyl(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I1_1_GPIO_Port, I1_1_Pin, RESET);
 8008e50:	2200      	movs	r2, #0
 8008e52:	2110      	movs	r1, #16
 8008e54:	4804      	ldr	r0, [pc, #16]	; (8008e68 <LS_tyl+0x1c>)
 8008e56:	f7f8 fdc1 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I1_2_GPIO_Port, I1_2_Pin, SET);
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	2120      	movs	r1, #32
 8008e5e:	4802      	ldr	r0, [pc, #8]	; (8008e68 <LS_tyl+0x1c>)
 8008e60:	f7f8 fdbc 	bl	80019dc <HAL_GPIO_WritePin>
}
 8008e64:	bf00      	nop
 8008e66:	bd80      	pop	{r7, pc}
 8008e68:	40020800 	.word	0x40020800

08008e6c <LS_przod>:

void LS_przod(void)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I1_1_GPIO_Port, I1_1_Pin, SET);
 8008e70:	2201      	movs	r2, #1
 8008e72:	2110      	movs	r1, #16
 8008e74:	4804      	ldr	r0, [pc, #16]	; (8008e88 <LS_przod+0x1c>)
 8008e76:	f7f8 fdb1 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I1_2_GPIO_Port, I1_2_Pin, RESET);
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	2120      	movs	r1, #32
 8008e7e:	4802      	ldr	r0, [pc, #8]	; (8008e88 <LS_przod+0x1c>)
 8008e80:	f7f8 fdac 	bl	80019dc <HAL_GPIO_WritePin>
}
 8008e84:	bf00      	nop
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	40020800 	.word	0x40020800

08008e8c <LS_stop>:

void LS_stop(void)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I1_1_GPIO_Port, I1_1_Pin, RESET);
 8008e90:	2200      	movs	r2, #0
 8008e92:	2110      	movs	r1, #16
 8008e94:	4804      	ldr	r0, [pc, #16]	; (8008ea8 <LS_stop+0x1c>)
 8008e96:	f7f8 fda1 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I1_2_GPIO_Port, I1_2_Pin, RESET);
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	2120      	movs	r1, #32
 8008e9e:	4802      	ldr	r0, [pc, #8]	; (8008ea8 <LS_stop+0x1c>)
 8008ea0:	f7f8 fd9c 	bl	80019dc <HAL_GPIO_WritePin>
}
 8008ea4:	bf00      	nop
 8008ea6:	bd80      	pop	{r7, pc}
 8008ea8:	40020800 	.word	0x40020800

08008eac <PS_tyl>:

void PS_tyl(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2_1_GPIO_Port, I2_1_Pin, SET);
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	2101      	movs	r1, #1
 8008eb4:	4804      	ldr	r0, [pc, #16]	; (8008ec8 <PS_tyl+0x1c>)
 8008eb6:	f7f8 fd91 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2_2_GPIO_Port, I2_2_Pin, RESET);
 8008eba:	2200      	movs	r2, #0
 8008ebc:	2102      	movs	r1, #2
 8008ebe:	4802      	ldr	r0, [pc, #8]	; (8008ec8 <PS_tyl+0x1c>)
 8008ec0:	f7f8 fd8c 	bl	80019dc <HAL_GPIO_WritePin>
}
 8008ec4:	bf00      	nop
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	40020400 	.word	0x40020400

08008ecc <PS_przod>:

void PS_przod(void)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2_1_GPIO_Port, I2_1_Pin, RESET);
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	2101      	movs	r1, #1
 8008ed4:	4804      	ldr	r0, [pc, #16]	; (8008ee8 <PS_przod+0x1c>)
 8008ed6:	f7f8 fd81 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2_2_GPIO_Port, I2_2_Pin, SET);
 8008eda:	2201      	movs	r2, #1
 8008edc:	2102      	movs	r1, #2
 8008ede:	4802      	ldr	r0, [pc, #8]	; (8008ee8 <PS_przod+0x1c>)
 8008ee0:	f7f8 fd7c 	bl	80019dc <HAL_GPIO_WritePin>
}
 8008ee4:	bf00      	nop
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	40020400 	.word	0x40020400

08008eec <PS_stop>:

void PS_stop(void)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(I2_1_GPIO_Port, I2_1_Pin, RESET);
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	2101      	movs	r1, #1
 8008ef4:	4804      	ldr	r0, [pc, #16]	; (8008f08 <PS_stop+0x1c>)
 8008ef6:	f7f8 fd71 	bl	80019dc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(I2_2_GPIO_Port, I2_2_Pin, RESET);
 8008efa:	2200      	movs	r2, #0
 8008efc:	2102      	movs	r1, #2
 8008efe:	4802      	ldr	r0, [pc, #8]	; (8008f08 <PS_stop+0x1c>)
 8008f00:	f7f8 fd6c 	bl	80019dc <HAL_GPIO_WritePin>
}
 8008f04:	bf00      	nop
 8008f06:	bd80      	pop	{r7, pc}
 8008f08:	40020400 	.word	0x40020400

08008f0c <przod>:

void przod(void)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	af00      	add	r7, sp, #0
	PS_przod();
 8008f10:	f7ff ffdc 	bl	8008ecc <PS_przod>
	LS_przod();
 8008f14:	f7ff ffaa 	bl	8008e6c <LS_przod>
}
 8008f18:	bf00      	nop
 8008f1a:	bd80      	pop	{r7, pc}

08008f1c <tyl>:

void tyl(void)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
	PS_tyl();
 8008f20:	f7ff ffc4 	bl	8008eac <PS_tyl>
	LS_tyl();
 8008f24:	f7ff ff92 	bl	8008e4c <LS_tyl>
}
 8008f28:	bf00      	nop
 8008f2a:	bd80      	pop	{r7, pc}

08008f2c <stoj>:

void stoj(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
	PS_stop();
 8008f30:	f7ff ffdc 	bl	8008eec <PS_stop>
	LS_stop();
 8008f34:	f7ff ffaa 	bl	8008e8c <LS_stop>
}
 8008f38:	bf00      	nop
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <lewy>:
	PS_tyl();
	LS_stop();
}

void lewy(void)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	af00      	add	r7, sp, #0
	PS_przod();
 8008f40:	f7ff ffc4 	bl	8008ecc <PS_przod>
	LS_tyl();
 8008f44:	f7ff ff82 	bl	8008e4c <LS_tyl>
}
 8008f48:	bf00      	nop
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <led>:
		else ls[i]=0;
	}
}

void led(int num)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
	switch(num)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b03      	cmp	r3, #3
 8008f58:	d852      	bhi.n	8009000 <led+0xb4>
 8008f5a:	a201      	add	r2, pc, #4	; (adr r2, 8008f60 <led+0x14>)
 8008f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f60:	08008f71 	.word	0x08008f71
 8008f64:	08008f95 	.word	0x08008f95
 8008f68:	08008fb9 	.word	0x08008fb9
 8008f6c:	08008fdd 	.word	0x08008fdd
	{
	case 0:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, RESET);
 8008f70:	2200      	movs	r2, #0
 8008f72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f76:	4824      	ldr	r0, [pc, #144]	; (8009008 <led+0xbc>)
 8008f78:	f7f8 fd30 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008f82:	4821      	ldr	r0, [pc, #132]	; (8009008 <led+0xbc>)
 8008f84:	f7f8 fd2a 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8008f88:	2200      	movs	r2, #0
 8008f8a:	2180      	movs	r1, #128	; 0x80
 8008f8c:	481e      	ldr	r0, [pc, #120]	; (8009008 <led+0xbc>)
 8008f8e:	f7f8 fd25 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 8008f92:	e035      	b.n	8009000 <led+0xb4>
	case 1:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8008f94:	2201      	movs	r2, #1
 8008f96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008f9a:	481b      	ldr	r0, [pc, #108]	; (8009008 <led+0xbc>)
 8008f9c:	f7f8 fd1e 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, RESET);
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fa6:	4818      	ldr	r0, [pc, #96]	; (8009008 <led+0xbc>)
 8008fa8:	f7f8 fd18 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8008fac:	2200      	movs	r2, #0
 8008fae:	2180      	movs	r1, #128	; 0x80
 8008fb0:	4815      	ldr	r0, [pc, #84]	; (8009008 <led+0xbc>)
 8008fb2:	f7f8 fd13 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 8008fb6:	e023      	b.n	8009000 <led+0xb4>
	case 2:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fbe:	4812      	ldr	r0, [pc, #72]	; (8009008 <led+0xbc>)
 8008fc0:	f7f8 fd0c 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fca:	480f      	ldr	r0, [pc, #60]	; (8009008 <led+0xbc>)
 8008fcc:	f7f8 fd06 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, RESET);
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	2180      	movs	r1, #128	; 0x80
 8008fd4:	480c      	ldr	r0, [pc, #48]	; (8009008 <led+0xbc>)
 8008fd6:	f7f8 fd01 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 8008fda:	e011      	b.n	8009000 <led+0xb4>
	case 3:
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, SET);
 8008fdc:	2201      	movs	r2, #1
 8008fde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008fe2:	4809      	ldr	r0, [pc, #36]	; (8009008 <led+0xbc>)
 8008fe4:	f7f8 fcfa 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, SET);
 8008fe8:	2201      	movs	r2, #1
 8008fea:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008fee:	4806      	ldr	r0, [pc, #24]	; (8009008 <led+0xbc>)
 8008ff0:	f7f8 fcf4 	bl	80019dc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, SET);
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	2180      	movs	r1, #128	; 0x80
 8008ff8:	4803      	ldr	r0, [pc, #12]	; (8009008 <led+0xbc>)
 8008ffa:	f7f8 fcef 	bl	80019dc <HAL_GPIO_WritePin>
		break;
 8008ffe:	bf00      	nop
	}
}
 8009000:	bf00      	nop
 8009002:	3708      	adds	r7, #8
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}
 8009008:	40020800 	.word	0x40020800

0800900c <wybor>:

int wybor(int taktyka)
{
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	if(SW3==RESET)
 8009014:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009018:	4816      	ldr	r0, [pc, #88]	; (8009074 <wybor+0x68>)
 800901a:	f7f8 fcc7 	bl	80019ac <HAL_GPIO_ReadPin>
 800901e:	4603      	mov	r3, r0
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <wybor+0x30>
	{
		taktyka++;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	3301      	adds	r3, #1
 8009028:	607b      	str	r3, [r7, #4]
		if(taktyka > 3) taktyka = 1;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2b03      	cmp	r3, #3
 800902e:	dd01      	ble.n	8009034 <wybor+0x28>
 8009030:	2301      	movs	r3, #1
 8009032:	607b      	str	r3, [r7, #4]
		HAL_Delay(200);
 8009034:	20c8      	movs	r0, #200	; 0xc8
 8009036:	f7f7 fabf 	bl	80005b8 <HAL_Delay>
 800903a:	e012      	b.n	8009062 <wybor+0x56>
	}
	else if(SW1==RESET)
 800903c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8009040:	480c      	ldr	r0, [pc, #48]	; (8009074 <wybor+0x68>)
 8009042:	f7f8 fcb3 	bl	80019ac <HAL_GPIO_ReadPin>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <wybor+0x56>
	{
		taktyka--;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	3b01      	subs	r3, #1
 8009050:	607b      	str	r3, [r7, #4]
		if(taktyka < 1) taktyka = 3;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2b00      	cmp	r3, #0
 8009056:	dc01      	bgt.n	800905c <wybor+0x50>
 8009058:	2303      	movs	r3, #3
 800905a:	607b      	str	r3, [r7, #4]
		HAL_Delay(200);
 800905c:	20c8      	movs	r0, #200	; 0xc8
 800905e:	f7f7 faab 	bl	80005b8 <HAL_Delay>
	}
	led(taktyka);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f7ff ff72 	bl	8008f4c <led>
	return taktyka;
 8009068:	687b      	ldr	r3, [r7, #4]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40020000 	.word	0x40020000

08009078 <zerujE>:

void zerujE()
{
 8009078:	b480      	push	{r7}
 800907a:	af00      	add	r7, sp, #0
	ust_D_P = 0;
 800907c:	4b05      	ldr	r3, [pc, #20]	; (8009094 <zerujE+0x1c>)
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]
	ust_D_L = 0;
 8009082:	4b05      	ldr	r3, [pc, #20]	; (8009098 <zerujE+0x20>)
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]
}
 8009088:	bf00      	nop
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr
 8009092:	bf00      	nop
 8009094:	20000454 	.word	0x20000454
 8009098:	20000b00 	.word	0x20000b00

0800909c <taktyka3>:
	zad_V_L=0;
	zad_V_P=0;
	zerujE();
}
void taktyka3()
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b082      	sub	sp, #8
 80090a0:	af00      	add	r7, sp, #0
	int flag = 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	607b      	str	r3, [r7, #4]
	while(flag==1)
 80090a6:	e03f      	b.n	8009128 <taktyka3+0x8c>
	{
		zerujE();
 80090a8:	f7ff ffe6 	bl	8009078 <zerujE>
		przod();
 80090ac:	f7ff ff2e 	bl	8008f0c <przod>
		zad_V_L=150;
 80090b0:	4b21      	ldr	r3, [pc, #132]	; (8009138 <taktyka3+0x9c>)
 80090b2:	2296      	movs	r2, #150	; 0x96
 80090b4:	601a      	str	r2, [r3, #0]
		zad_V_P=150;
 80090b6:	4b21      	ldr	r3, [pc, #132]	; (800913c <taktyka3+0xa0>)
 80090b8:	2296      	movs	r2, #150	; 0x96
 80090ba:	601a      	str	r2, [r3, #0]
		if(linia[0]<1000 && linia[1]>1000)
 80090bc:	4b20      	ldr	r3, [pc, #128]	; (8009140 <taktyka3+0xa4>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090c4:	d230      	bcs.n	8009128 <taktyka3+0x8c>
 80090c6:	4b1e      	ldr	r3, [pc, #120]	; (8009140 <taktyka3+0xa4>)
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090ce:	d92b      	bls.n	8009128 <taktyka3+0x8c>
		{
			stoj();
 80090d0:	f7ff ff2c 	bl	8008f2c <stoj>
			while(ust_D_L<10000 && ust_D_P<10000)
 80090d4:	e007      	b.n	80090e6 <taktyka3+0x4a>
			{
				tyl();
 80090d6:	f7ff ff21 	bl	8008f1c <tyl>
				zad_V_L = 200;
 80090da:	4b17      	ldr	r3, [pc, #92]	; (8009138 <taktyka3+0x9c>)
 80090dc:	22c8      	movs	r2, #200	; 0xc8
 80090de:	601a      	str	r2, [r3, #0]
				zad_V_P = 200;
 80090e0:	4b16      	ldr	r3, [pc, #88]	; (800913c <taktyka3+0xa0>)
 80090e2:	22c8      	movs	r2, #200	; 0xc8
 80090e4:	601a      	str	r2, [r3, #0]
			while(ust_D_L<10000 && ust_D_P<10000)
 80090e6:	4b17      	ldr	r3, [pc, #92]	; (8009144 <taktyka3+0xa8>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80090ee:	4293      	cmp	r3, r2
 80090f0:	dc05      	bgt.n	80090fe <taktyka3+0x62>
 80090f2:	4b15      	ldr	r3, [pc, #84]	; (8009148 <taktyka3+0xac>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f242 720f 	movw	r2, #9999	; 0x270f
 80090fa:	4293      	cmp	r3, r2
 80090fc:	ddeb      	ble.n	80090d6 <taktyka3+0x3a>
			}
			zerujE();
 80090fe:	f7ff ffbb 	bl	8009078 <zerujE>
			while(ust_D_L<20000)
 8009102:	e007      	b.n	8009114 <taktyka3+0x78>
			{
				lewy();
 8009104:	f7ff ff1a 	bl	8008f3c <lewy>
				zad_V_L = 200;
 8009108:	4b0b      	ldr	r3, [pc, #44]	; (8009138 <taktyka3+0x9c>)
 800910a:	22c8      	movs	r2, #200	; 0xc8
 800910c:	601a      	str	r2, [r3, #0]
				zad_V_P = 150;
 800910e:	4b0b      	ldr	r3, [pc, #44]	; (800913c <taktyka3+0xa0>)
 8009110:	2296      	movs	r2, #150	; 0x96
 8009112:	601a      	str	r2, [r3, #0]
			while(ust_D_L<20000)
 8009114:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <taktyka3+0xa8>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800911c:	4293      	cmp	r3, r2
 800911e:	ddf1      	ble.n	8009104 <taktyka3+0x68>
			}
			stoj();
 8009120:	f7ff ff04 	bl	8008f2c <stoj>
			flag=0;
 8009124:	2300      	movs	r3, #0
 8009126:	607b      	str	r3, [r7, #4]
	while(flag==1)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b01      	cmp	r3, #1
 800912c:	d0bc      	beq.n	80090a8 <taktyka3+0xc>
		}
	}
}
 800912e:	bf00      	nop
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}
 8009136:	bf00      	nop
 8009138:	20000ce0 	.word	0x20000ce0
 800913c:	20000c94 	.word	0x20000c94
 8009140:	20000cb4 	.word	0x20000cb4
 8009144:	20000b00 	.word	0x20000b00
 8009148:	20000454 	.word	0x20000454

0800914c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800914c:	b480      	push	{r7}
 800914e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8009150:	bf00      	nop
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
	...

0800915c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009162:	2300      	movs	r3, #0
 8009164:	607b      	str	r3, [r7, #4]
 8009166:	4b10      	ldr	r3, [pc, #64]	; (80091a8 <HAL_MspInit+0x4c>)
 8009168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800916a:	4a0f      	ldr	r2, [pc, #60]	; (80091a8 <HAL_MspInit+0x4c>)
 800916c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009170:	6453      	str	r3, [r2, #68]	; 0x44
 8009172:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <HAL_MspInit+0x4c>)
 8009174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800917a:	607b      	str	r3, [r7, #4]
 800917c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800917e:	2300      	movs	r3, #0
 8009180:	603b      	str	r3, [r7, #0]
 8009182:	4b09      	ldr	r3, [pc, #36]	; (80091a8 <HAL_MspInit+0x4c>)
 8009184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009186:	4a08      	ldr	r2, [pc, #32]	; (80091a8 <HAL_MspInit+0x4c>)
 8009188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800918c:	6413      	str	r3, [r2, #64]	; 0x40
 800918e:	4b06      	ldr	r3, [pc, #24]	; (80091a8 <HAL_MspInit+0x4c>)
 8009190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009196:	603b      	str	r3, [r7, #0]
 8009198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800919a:	bf00      	nop
 800919c:	370c      	adds	r7, #12
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	40023800 	.word	0x40023800

080091ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80091ac:	b480      	push	{r7}
 80091ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80091b0:	bf00      	nop
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80091ba:	b480      	push	{r7}
 80091bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80091be:	e7fe      	b.n	80091be <HardFault_Handler+0x4>

080091c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80091c0:	b480      	push	{r7}
 80091c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80091c4:	e7fe      	b.n	80091c4 <MemManage_Handler+0x4>

080091c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80091c6:	b480      	push	{r7}
 80091c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80091ca:	e7fe      	b.n	80091ca <BusFault_Handler+0x4>

080091cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80091cc:	b480      	push	{r7}
 80091ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80091d0:	e7fe      	b.n	80091d0 <UsageFault_Handler+0x4>

080091d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80091d2:	b480      	push	{r7}
 80091d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80091d6:	bf00      	nop
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr

080091e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80091e0:	b480      	push	{r7}
 80091e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80091e4:	bf00      	nop
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80091ee:	b480      	push	{r7}
 80091f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80091f2:	bf00      	nop
 80091f4:	46bd      	mov	sp, r7
 80091f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fa:	4770      	bx	lr

080091fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80091fc:	b580      	push	{r7, lr}
 80091fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	akt_V_L =TIM2->CNT;
 8009200:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009206:	461a      	mov	r2, r3
 8009208:	4b5b      	ldr	r3, [pc, #364]	; (8009378 <SysTick_Handler+0x17c>)
 800920a:	601a      	str	r2, [r3, #0]
	akt_V_P =TIM1->CNT;
 800920c:	4b5b      	ldr	r3, [pc, #364]	; (800937c <SysTick_Handler+0x180>)
 800920e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009210:	461a      	mov	r2, r3
 8009212:	4b5b      	ldr	r3, [pc, #364]	; (8009380 <SysTick_Handler+0x184>)
 8009214:	601a      	str	r2, [r3, #0]

	if(akt_V_L>9000)
 8009216:	4b58      	ldr	r3, [pc, #352]	; (8009378 <SysTick_Handler+0x17c>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f242 3228 	movw	r2, #9000	; 0x2328
 800921e:	4293      	cmp	r3, r2
 8009220:	dd05      	ble.n	800922e <SysTick_Handler+0x32>
	{
		akt_V_L = 9728 - akt_V_L;
 8009222:	4b55      	ldr	r3, [pc, #340]	; (8009378 <SysTick_Handler+0x17c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f5c3 5318 	rsb	r3, r3, #9728	; 0x2600
 800922a:	4a53      	ldr	r2, [pc, #332]	; (8009378 <SysTick_Handler+0x17c>)
 800922c:	6013      	str	r3, [r2, #0]
	}

	if(akt_V_P>9000)
 800922e:	4b54      	ldr	r3, [pc, #336]	; (8009380 <SysTick_Handler+0x184>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f242 3228 	movw	r2, #9000	; 0x2328
 8009236:	4293      	cmp	r3, r2
 8009238:	dd05      	ble.n	8009246 <SysTick_Handler+0x4a>
	{
		akt_V_P = 9728 - akt_V_P;
 800923a:	4b51      	ldr	r3, [pc, #324]	; (8009380 <SysTick_Handler+0x184>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f5c3 5318 	rsb	r3, r3, #9728	; 0x2600
 8009242:	4a4f      	ldr	r2, [pc, #316]	; (8009380 <SysTick_Handler+0x184>)
 8009244:	6013      	str	r3, [r2, #0]
	}

	ust_D_P += akt_V_P;
 8009246:	4b4e      	ldr	r3, [pc, #312]	; (8009380 <SysTick_Handler+0x184>)
 8009248:	681a      	ldr	r2, [r3, #0]
 800924a:	4b4e      	ldr	r3, [pc, #312]	; (8009384 <SysTick_Handler+0x188>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4413      	add	r3, r2
 8009250:	4a4c      	ldr	r2, [pc, #304]	; (8009384 <SysTick_Handler+0x188>)
 8009252:	6013      	str	r3, [r2, #0]
	ust_D_L += akt_V_L;
 8009254:	4b48      	ldr	r3, [pc, #288]	; (8009378 <SysTick_Handler+0x17c>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	4b4b      	ldr	r3, [pc, #300]	; (8009388 <SysTick_Handler+0x18c>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4413      	add	r3, r2
 800925e:	4a4a      	ldr	r2, [pc, #296]	; (8009388 <SysTick_Handler+0x18c>)
 8009260:	6013      	str	r3, [r2, #0]

	akt_bl_L = zad_V_L - akt_V_L;
 8009262:	4b4a      	ldr	r3, [pc, #296]	; (800938c <SysTick_Handler+0x190>)
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b44      	ldr	r3, [pc, #272]	; (8009378 <SysTick_Handler+0x17c>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	4a48      	ldr	r2, [pc, #288]	; (8009390 <SysTick_Handler+0x194>)
 800926e:	6013      	str	r3, [r2, #0]
	akt_bl_P = zad_V_P - akt_V_P;
 8009270:	4b48      	ldr	r3, [pc, #288]	; (8009394 <SysTick_Handler+0x198>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	4b42      	ldr	r3, [pc, #264]	; (8009380 <SysTick_Handler+0x184>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	1ad3      	subs	r3, r2, r3
 800927a:	4a47      	ldr	r2, [pc, #284]	; (8009398 <SysTick_Handler+0x19c>)
 800927c:	6013      	str	r3, [r2, #0]

	nowe_PWM_L = P * akt_bl_L + D * (akt_bl_L - wcz_bl_L);
 800927e:	4b44      	ldr	r3, [pc, #272]	; (8009390 <SysTick_Handler+0x194>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	ee07 3a90 	vmov	s15, r3
 8009286:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800928a:	4b44      	ldr	r3, [pc, #272]	; (800939c <SysTick_Handler+0x1a0>)
 800928c:	edd3 7a00 	vldr	s15, [r3]
 8009290:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009294:	4b3e      	ldr	r3, [pc, #248]	; (8009390 <SysTick_Handler+0x194>)
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	4b41      	ldr	r3, [pc, #260]	; (80093a0 <SysTick_Handler+0x1a4>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	ee07 3a90 	vmov	s15, r3
 80092a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80092a6:	4b3f      	ldr	r3, [pc, #252]	; (80093a4 <SysTick_Handler+0x1a8>)
 80092a8:	edd3 7a00 	vldr	s15, [r3]
 80092ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092b8:	ee17 2a90 	vmov	r2, s15
 80092bc:	4b3a      	ldr	r3, [pc, #232]	; (80093a8 <SysTick_Handler+0x1ac>)
 80092be:	601a      	str	r2, [r3, #0]
	nowe_PWM_P = P * akt_bl_P + D * (akt_bl_P - wcz_bl_P);
 80092c0:	4b35      	ldr	r3, [pc, #212]	; (8009398 <SysTick_Handler+0x19c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	ee07 3a90 	vmov	s15, r3
 80092c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80092cc:	4b33      	ldr	r3, [pc, #204]	; (800939c <SysTick_Handler+0x1a0>)
 80092ce:	edd3 7a00 	vldr	s15, [r3]
 80092d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092d6:	4b30      	ldr	r3, [pc, #192]	; (8009398 <SysTick_Handler+0x19c>)
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	4b34      	ldr	r3, [pc, #208]	; (80093ac <SysTick_Handler+0x1b0>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	1ad3      	subs	r3, r2, r3
 80092e0:	ee07 3a90 	vmov	s15, r3
 80092e4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80092e8:	4b2e      	ldr	r3, [pc, #184]	; (80093a4 <SysTick_Handler+0x1a8>)
 80092ea:	edd3 7a00 	vldr	s15, [r3]
 80092ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80092f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80092f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80092fa:	ee17 2a90 	vmov	r2, s15
 80092fe:	4b2c      	ldr	r3, [pc, #176]	; (80093b0 <SysTick_Handler+0x1b4>)
 8009300:	601a      	str	r2, [r3, #0]
	wcz_bl_L = akt_bl_L;
 8009302:	4b23      	ldr	r3, [pc, #140]	; (8009390 <SysTick_Handler+0x194>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	4a26      	ldr	r2, [pc, #152]	; (80093a0 <SysTick_Handler+0x1a4>)
 8009308:	6013      	str	r3, [r2, #0]
	wcz_bl_P = akt_bl_P;
 800930a:	4b23      	ldr	r3, [pc, #140]	; (8009398 <SysTick_Handler+0x19c>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4a27      	ldr	r2, [pc, #156]	; (80093ac <SysTick_Handler+0x1b0>)
 8009310:	6013      	str	r3, [r2, #0]

	if(nowe_PWM_L<0)nowe_PWM_L=0;
 8009312:	4b25      	ldr	r3, [pc, #148]	; (80093a8 <SysTick_Handler+0x1ac>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	2b00      	cmp	r3, #0
 8009318:	da02      	bge.n	8009320 <SysTick_Handler+0x124>
 800931a:	4b23      	ldr	r3, [pc, #140]	; (80093a8 <SysTick_Handler+0x1ac>)
 800931c:	2200      	movs	r2, #0
 800931e:	601a      	str	r2, [r3, #0]
	if(nowe_PWM_P<0)nowe_PWM_P=0;
 8009320:	4b23      	ldr	r3, [pc, #140]	; (80093b0 <SysTick_Handler+0x1b4>)
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	da02      	bge.n	800932e <SysTick_Handler+0x132>
 8009328:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <SysTick_Handler+0x1b4>)
 800932a:	2200      	movs	r2, #0
 800932c:	601a      	str	r2, [r3, #0]
	if(nowe_PWM_L>v_max)nowe_PWM_L=v_max;
 800932e:	4b1e      	ldr	r3, [pc, #120]	; (80093a8 <SysTick_Handler+0x1ac>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009336:	dd03      	ble.n	8009340 <SysTick_Handler+0x144>
 8009338:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <SysTick_Handler+0x1ac>)
 800933a:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800933e:	601a      	str	r2, [r3, #0]
	if(nowe_PWM_P>v_max)nowe_PWM_P=v_max; //zabezpieczenia anti-windup
 8009340:	4b1b      	ldr	r3, [pc, #108]	; (80093b0 <SysTick_Handler+0x1b4>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009348:	dd03      	ble.n	8009352 <SysTick_Handler+0x156>
 800934a:	4b19      	ldr	r3, [pc, #100]	; (80093b0 <SysTick_Handler+0x1b4>)
 800934c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009350:	601a      	str	r2, [r3, #0]

	TIM3->CCR1=nowe_PWM_L;
 8009352:	4b15      	ldr	r3, [pc, #84]	; (80093a8 <SysTick_Handler+0x1ac>)
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	4b17      	ldr	r3, [pc, #92]	; (80093b4 <SysTick_Handler+0x1b8>)
 8009358:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2=nowe_PWM_P;
 800935a:	4b15      	ldr	r3, [pc, #84]	; (80093b0 <SysTick_Handler+0x1b4>)
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4b15      	ldr	r3, [pc, #84]	; (80093b4 <SysTick_Handler+0x1b8>)
 8009360:	639a      	str	r2, [r3, #56]	; 0x38

	TIM1->CNT=0;
 8009362:	4b06      	ldr	r3, [pc, #24]	; (800937c <SysTick_Handler+0x180>)
 8009364:	2200      	movs	r2, #0
 8009366:	625a      	str	r2, [r3, #36]	; 0x24
	TIM2->CNT=0;
 8009368:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800936c:	2200      	movs	r2, #0
 800936e:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009370:	f7f7 f902 	bl	8000578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009374:	bf00      	nop
 8009376:	bd80      	pop	{r7, pc}
 8009378:	20000310 	.word	0x20000310
 800937c:	40010000 	.word	0x40010000
 8009380:	2000030c 	.word	0x2000030c
 8009384:	20000454 	.word	0x20000454
 8009388:	20000b00 	.word	0x20000b00
 800938c:	20000ce0 	.word	0x20000ce0
 8009390:	20000ce4 	.word	0x20000ce4
 8009394:	20000c94 	.word	0x20000c94
 8009398:	20000cec 	.word	0x20000cec
 800939c:	200002dc 	.word	0x200002dc
 80093a0:	20000cf4 	.word	0x20000cf4
 80093a4:	200002e0 	.word	0x200002e0
 80093a8:	20000304 	.word	0x20000304
 80093ac:	20000ce8 	.word	0x20000ce8
 80093b0:	20000308 	.word	0x20000308
 80093b4:	40000400 	.word	0x40000400

080093b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80093b8:	b580      	push	{r7, lr}
 80093ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80093bc:	4802      	ldr	r0, [pc, #8]	; (80093c8 <DMA2_Stream0_IRQHandler+0x10>)
 80093be:	f7f7 ff0b 	bl	80011d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80093c2:	bf00      	nop
 80093c4:	bd80      	pop	{r7, pc}
 80093c6:	bf00      	nop
 80093c8:	200003a0 	.word	0x200003a0

080093cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80093cc:	b480      	push	{r7}
 80093ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80093d0:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <SystemInit+0x28>)
 80093d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d6:	4a07      	ldr	r2, [pc, #28]	; (80093f4 <SystemInit+0x28>)
 80093d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80093dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80093e0:	4b04      	ldr	r3, [pc, #16]	; (80093f4 <SystemInit+0x28>)
 80093e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80093e6:	609a      	str	r2, [r3, #8]
#endif
}
 80093e8:	bf00      	nop
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
 80093f2:	bf00      	nop
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b08c      	sub	sp, #48	; 0x30
 80093fc:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80093fe:	f107 030c 	add.w	r3, r7, #12
 8009402:	2224      	movs	r2, #36	; 0x24
 8009404:	2100      	movs	r1, #0
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fa35 	bl	8009876 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800940c:	1d3b      	adds	r3, r7, #4
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
 8009412:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8009414:	4b22      	ldr	r3, [pc, #136]	; (80094a0 <MX_TIM1_Init+0xa8>)
 8009416:	4a23      	ldr	r2, [pc, #140]	; (80094a4 <MX_TIM1_Init+0xac>)
 8009418:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800941a:	4b21      	ldr	r3, [pc, #132]	; (80094a0 <MX_TIM1_Init+0xa8>)
 800941c:	2200      	movs	r2, #0
 800941e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009420:	4b1f      	ldr	r3, [pc, #124]	; (80094a0 <MX_TIM1_Init+0xa8>)
 8009422:	2200      	movs	r2, #0
 8009424:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9728;
 8009426:	4b1e      	ldr	r3, [pc, #120]	; (80094a0 <MX_TIM1_Init+0xa8>)
 8009428:	f44f 5218 	mov.w	r2, #9728	; 0x2600
 800942c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800942e:	4b1c      	ldr	r3, [pc, #112]	; (80094a0 <MX_TIM1_Init+0xa8>)
 8009430:	2200      	movs	r2, #0
 8009432:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009434:	4b1a      	ldr	r3, [pc, #104]	; (80094a0 <MX_TIM1_Init+0xa8>)
 8009436:	2200      	movs	r2, #0
 8009438:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800943a:	4b19      	ldr	r3, [pc, #100]	; (80094a0 <MX_TIM1_Init+0xa8>)
 800943c:	2200      	movs	r2, #0
 800943e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009440:	2303      	movs	r3, #3
 8009442:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009448:	2301      	movs	r3, #1
 800944a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800944c:	2300      	movs	r3, #0
 800944e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8009450:	230f      	movs	r3, #15
 8009452:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009454:	2300      	movs	r3, #0
 8009456:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009458:	2301      	movs	r3, #1
 800945a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800945c:	2300      	movs	r3, #0
 800945e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8009460:	230f      	movs	r3, #15
 8009462:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8009464:	f107 030c 	add.w	r3, r7, #12
 8009468:	4619      	mov	r1, r3
 800946a:	480d      	ldr	r0, [pc, #52]	; (80094a0 <MX_TIM1_Init+0xa8>)
 800946c:	f7f9 fee0 	bl	8003230 <HAL_TIM_Encoder_Init>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8009476:	f7ff fe69 	bl	800914c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800947a:	2300      	movs	r3, #0
 800947c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800947e:	2300      	movs	r3, #0
 8009480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009482:	1d3b      	adds	r3, r7, #4
 8009484:	4619      	mov	r1, r3
 8009486:	4806      	ldr	r0, [pc, #24]	; (80094a0 <MX_TIM1_Init+0xa8>)
 8009488:	f7fa fab4 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 800948c:	4603      	mov	r3, r0
 800948e:	2b00      	cmp	r3, #0
 8009490:	d001      	beq.n	8009496 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8009492:	f7ff fe5b 	bl	800914c <Error_Handler>
  }

}
 8009496:	bf00      	nop
 8009498:	3730      	adds	r7, #48	; 0x30
 800949a:	46bd      	mov	sp, r7
 800949c:	bd80      	pop	{r7, pc}
 800949e:	bf00      	nop
 80094a0:	20000d38 	.word	0x20000d38
 80094a4:	40010000 	.word	0x40010000

080094a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b08c      	sub	sp, #48	; 0x30
 80094ac:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80094ae:	f107 030c 	add.w	r3, r7, #12
 80094b2:	2224      	movs	r2, #36	; 0x24
 80094b4:	2100      	movs	r1, #0
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 f9dd 	bl	8009876 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80094bc:	1d3b      	adds	r3, r7, #4
 80094be:	2200      	movs	r2, #0
 80094c0:	601a      	str	r2, [r3, #0]
 80094c2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80094c4:	4b21      	ldr	r3, [pc, #132]	; (800954c <MX_TIM2_Init+0xa4>)
 80094c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80094ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80094cc:	4b1f      	ldr	r3, [pc, #124]	; (800954c <MX_TIM2_Init+0xa4>)
 80094ce:	2200      	movs	r2, #0
 80094d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094d2:	4b1e      	ldr	r3, [pc, #120]	; (800954c <MX_TIM2_Init+0xa4>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9728;
 80094d8:	4b1c      	ldr	r3, [pc, #112]	; (800954c <MX_TIM2_Init+0xa4>)
 80094da:	f44f 5218 	mov.w	r2, #9728	; 0x2600
 80094de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094e0:	4b1a      	ldr	r3, [pc, #104]	; (800954c <MX_TIM2_Init+0xa4>)
 80094e2:	2200      	movs	r2, #0
 80094e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094e6:	4b19      	ldr	r3, [pc, #100]	; (800954c <MX_TIM2_Init+0xa4>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80094ec:	2303      	movs	r3, #3
 80094ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80094f0:	2300      	movs	r3, #0
 80094f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80094f4:	2301      	movs	r3, #1
 80094f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80094fc:	230f      	movs	r3, #15
 80094fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009500:	2300      	movs	r3, #0
 8009502:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009504:	2301      	movs	r3, #1
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009508:	2300      	movs	r3, #0
 800950a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800950c:	230f      	movs	r3, #15
 800950e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8009510:	f107 030c 	add.w	r3, r7, #12
 8009514:	4619      	mov	r1, r3
 8009516:	480d      	ldr	r0, [pc, #52]	; (800954c <MX_TIM2_Init+0xa4>)
 8009518:	f7f9 fe8a 	bl	8003230 <HAL_TIM_Encoder_Init>
 800951c:	4603      	mov	r3, r0
 800951e:	2b00      	cmp	r3, #0
 8009520:	d001      	beq.n	8009526 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8009522:	f7ff fe13 	bl	800914c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009526:	2300      	movs	r3, #0
 8009528:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800952a:	2300      	movs	r3, #0
 800952c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800952e:	1d3b      	adds	r3, r7, #4
 8009530:	4619      	mov	r1, r3
 8009532:	4806      	ldr	r0, [pc, #24]	; (800954c <MX_TIM2_Init+0xa4>)
 8009534:	f7fa fa5e 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800953e:	f7ff fe05 	bl	800914c <Error_Handler>
  }

}
 8009542:	bf00      	nop
 8009544:	3730      	adds	r7, #48	; 0x30
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20000d78 	.word	0x20000d78

08009550 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b08a      	sub	sp, #40	; 0x28
 8009554:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009556:	f107 0320 	add.w	r3, r7, #32
 800955a:	2200      	movs	r2, #0
 800955c:	601a      	str	r2, [r3, #0]
 800955e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009560:	1d3b      	adds	r3, r7, #4
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	605a      	str	r2, [r3, #4]
 8009568:	609a      	str	r2, [r3, #8]
 800956a:	60da      	str	r2, [r3, #12]
 800956c:	611a      	str	r2, [r3, #16]
 800956e:	615a      	str	r2, [r3, #20]
 8009570:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8009572:	4b27      	ldr	r3, [pc, #156]	; (8009610 <MX_TIM3_Init+0xc0>)
 8009574:	4a27      	ldr	r2, [pc, #156]	; (8009614 <MX_TIM3_Init+0xc4>)
 8009576:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8009578:	4b25      	ldr	r3, [pc, #148]	; (8009610 <MX_TIM3_Init+0xc0>)
 800957a:	2200      	movs	r2, #0
 800957c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800957e:	4b24      	ldr	r3, [pc, #144]	; (8009610 <MX_TIM3_Init+0xc0>)
 8009580:	2200      	movs	r2, #0
 8009582:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5249;
 8009584:	4b22      	ldr	r3, [pc, #136]	; (8009610 <MX_TIM3_Init+0xc0>)
 8009586:	f241 4281 	movw	r2, #5249	; 0x1481
 800958a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800958c:	4b20      	ldr	r3, [pc, #128]	; (8009610 <MX_TIM3_Init+0xc0>)
 800958e:	2200      	movs	r2, #0
 8009590:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009592:	4b1f      	ldr	r3, [pc, #124]	; (8009610 <MX_TIM3_Init+0xc0>)
 8009594:	2200      	movs	r2, #0
 8009596:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8009598:	481d      	ldr	r0, [pc, #116]	; (8009610 <MX_TIM3_Init+0xc0>)
 800959a:	f7f9 fdeb 	bl	8003174 <HAL_TIM_PWM_Init>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d001      	beq.n	80095a8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80095a4:	f7ff fdd2 	bl	800914c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095a8:	2300      	movs	r3, #0
 80095aa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095ac:	2300      	movs	r3, #0
 80095ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80095b0:	f107 0320 	add.w	r3, r7, #32
 80095b4:	4619      	mov	r1, r3
 80095b6:	4816      	ldr	r0, [pc, #88]	; (8009610 <MX_TIM3_Init+0xc0>)
 80095b8:	f7fa fa1c 	bl	80039f4 <HAL_TIMEx_MasterConfigSynchronization>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80095c2:	f7ff fdc3 	bl	800914c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80095c6:	2360      	movs	r3, #96	; 0x60
 80095c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80095ce:	2300      	movs	r3, #0
 80095d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80095d2:	2300      	movs	r3, #0
 80095d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80095d6:	1d3b      	adds	r3, r7, #4
 80095d8:	2200      	movs	r2, #0
 80095da:	4619      	mov	r1, r3
 80095dc:	480c      	ldr	r0, [pc, #48]	; (8009610 <MX_TIM3_Init+0xc0>)
 80095de:	f7f9 ff11 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80095e2:	4603      	mov	r3, r0
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d001      	beq.n	80095ec <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80095e8:	f7ff fdb0 	bl	800914c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80095ec:	1d3b      	adds	r3, r7, #4
 80095ee:	2204      	movs	r2, #4
 80095f0:	4619      	mov	r1, r3
 80095f2:	4807      	ldr	r0, [pc, #28]	; (8009610 <MX_TIM3_Init+0xc0>)
 80095f4:	f7f9 ff06 	bl	8003404 <HAL_TIM_PWM_ConfigChannel>
 80095f8:	4603      	mov	r3, r0
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d001      	beq.n	8009602 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80095fe:	f7ff fda5 	bl	800914c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8009602:	4803      	ldr	r0, [pc, #12]	; (8009610 <MX_TIM3_Init+0xc0>)
 8009604:	f000 f8a4 	bl	8009750 <HAL_TIM_MspPostInit>

}
 8009608:	bf00      	nop
 800960a:	3728      	adds	r7, #40	; 0x28
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20000cf8 	.word	0x20000cf8
 8009614:	40000400 	.word	0x40000400

08009618 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b08c      	sub	sp, #48	; 0x30
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009620:	f107 031c 	add.w	r3, r7, #28
 8009624:	2200      	movs	r2, #0
 8009626:	601a      	str	r2, [r3, #0]
 8009628:	605a      	str	r2, [r3, #4]
 800962a:	609a      	str	r2, [r3, #8]
 800962c:	60da      	str	r2, [r3, #12]
 800962e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a32      	ldr	r2, [pc, #200]	; (8009700 <HAL_TIM_Encoder_MspInit+0xe8>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d12d      	bne.n	8009696 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800963a:	2300      	movs	r3, #0
 800963c:	61bb      	str	r3, [r7, #24]
 800963e:	4b31      	ldr	r3, [pc, #196]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 8009640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009642:	4a30      	ldr	r2, [pc, #192]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	6453      	str	r3, [r2, #68]	; 0x44
 800964a:	4b2e      	ldr	r3, [pc, #184]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 800964c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	61bb      	str	r3, [r7, #24]
 8009654:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009656:	2300      	movs	r3, #0
 8009658:	617b      	str	r3, [r7, #20]
 800965a:	4b2a      	ldr	r3, [pc, #168]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 800965c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965e:	4a29      	ldr	r2, [pc, #164]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 8009660:	f043 0301 	orr.w	r3, r3, #1
 8009664:	6313      	str	r3, [r2, #48]	; 0x30
 8009666:	4b27      	ldr	r3, [pc, #156]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 8009668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966a:	f003 0301 	and.w	r3, r3, #1
 800966e:	617b      	str	r3, [r7, #20]
 8009670:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8009672:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009676:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009678:	2302      	movs	r3, #2
 800967a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800967c:	2300      	movs	r3, #0
 800967e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009680:	2300      	movs	r3, #0
 8009682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009684:	2301      	movs	r3, #1
 8009686:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009688:	f107 031c 	add.w	r3, r7, #28
 800968c:	4619      	mov	r1, r3
 800968e:	481e      	ldr	r0, [pc, #120]	; (8009708 <HAL_TIM_Encoder_MspInit+0xf0>)
 8009690:	f7f8 f80a 	bl	80016a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8009694:	e030      	b.n	80096f8 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(tim_encoderHandle->Instance==TIM2)
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969e:	d12b      	bne.n	80096f8 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80096a0:	2300      	movs	r3, #0
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	4b17      	ldr	r3, [pc, #92]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 80096a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096a8:	4a16      	ldr	r2, [pc, #88]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 80096aa:	f043 0301 	orr.w	r3, r3, #1
 80096ae:	6413      	str	r3, [r2, #64]	; 0x40
 80096b0:	4b14      	ldr	r3, [pc, #80]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 80096b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b4:	f003 0301 	and.w	r3, r3, #1
 80096b8:	613b      	str	r3, [r7, #16]
 80096ba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096bc:	2300      	movs	r3, #0
 80096be:	60fb      	str	r3, [r7, #12]
 80096c0:	4b10      	ldr	r3, [pc, #64]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	4a0f      	ldr	r2, [pc, #60]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 80096c6:	f043 0301 	orr.w	r3, r3, #1
 80096ca:	6313      	str	r3, [r2, #48]	; 0x30
 80096cc:	4b0d      	ldr	r3, [pc, #52]	; (8009704 <HAL_TIM_Encoder_MspInit+0xec>)
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	60fb      	str	r3, [r7, #12]
 80096d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 80096d8:	2303      	movs	r3, #3
 80096da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096dc:	2302      	movs	r3, #2
 80096de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096e4:	2300      	movs	r3, #0
 80096e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80096e8:	2301      	movs	r3, #1
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096ec:	f107 031c 	add.w	r3, r7, #28
 80096f0:	4619      	mov	r1, r3
 80096f2:	4805      	ldr	r0, [pc, #20]	; (8009708 <HAL_TIM_Encoder_MspInit+0xf0>)
 80096f4:	f7f7 ffd8 	bl	80016a8 <HAL_GPIO_Init>
}
 80096f8:	bf00      	nop
 80096fa:	3730      	adds	r7, #48	; 0x30
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	40010000 	.word	0x40010000
 8009704:	40023800 	.word	0x40023800
 8009708:	40020000 	.word	0x40020000

0800970c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a0b      	ldr	r2, [pc, #44]	; (8009748 <HAL_TIM_PWM_MspInit+0x3c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d10d      	bne.n	800973a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	4b0a      	ldr	r3, [pc, #40]	; (800974c <HAL_TIM_PWM_MspInit+0x40>)
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	4a09      	ldr	r2, [pc, #36]	; (800974c <HAL_TIM_PWM_MspInit+0x40>)
 8009728:	f043 0302 	orr.w	r3, r3, #2
 800972c:	6413      	str	r3, [r2, #64]	; 0x40
 800972e:	4b07      	ldr	r3, [pc, #28]	; (800974c <HAL_TIM_PWM_MspInit+0x40>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	f003 0302 	and.w	r3, r3, #2
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800973a:	bf00      	nop
 800973c:	3714      	adds	r7, #20
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	40000400 	.word	0x40000400
 800974c:	40023800 	.word	0x40023800

08009750 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009750:	b580      	push	{r7, lr}
 8009752:	b088      	sub	sp, #32
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009758:	f107 030c 	add.w	r3, r7, #12
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
 8009760:	605a      	str	r2, [r3, #4]
 8009762:	609a      	str	r2, [r3, #8]
 8009764:	60da      	str	r2, [r3, #12]
 8009766:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a12      	ldr	r2, [pc, #72]	; (80097b8 <HAL_TIM_MspPostInit+0x68>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d11d      	bne.n	80097ae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009772:	2300      	movs	r3, #0
 8009774:	60bb      	str	r3, [r7, #8]
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <HAL_TIM_MspPostInit+0x6c>)
 8009778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800977a:	4a10      	ldr	r2, [pc, #64]	; (80097bc <HAL_TIM_MspPostInit+0x6c>)
 800977c:	f043 0301 	orr.w	r3, r3, #1
 8009780:	6313      	str	r3, [r2, #48]	; 0x30
 8009782:	4b0e      	ldr	r3, [pc, #56]	; (80097bc <HAL_TIM_MspPostInit+0x6c>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009786:	f003 0301 	and.w	r3, r3, #1
 800978a:	60bb      	str	r3, [r7, #8]
 800978c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 800978e:	23c0      	movs	r3, #192	; 0xc0
 8009790:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009792:	2302      	movs	r3, #2
 8009794:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009796:	2300      	movs	r3, #0
 8009798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800979a:	2300      	movs	r3, #0
 800979c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800979e:	2302      	movs	r3, #2
 80097a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097a2:	f107 030c 	add.w	r3, r7, #12
 80097a6:	4619      	mov	r1, r3
 80097a8:	4805      	ldr	r0, [pc, #20]	; (80097c0 <HAL_TIM_MspPostInit+0x70>)
 80097aa:	f7f7 ff7d 	bl	80016a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80097ae:	bf00      	nop
 80097b0:	3720      	adds	r7, #32
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	40000400 	.word	0x40000400
 80097bc:	40023800 	.word	0x40023800
 80097c0:	40020000 	.word	0x40020000

080097c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80097c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80097fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80097c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80097ca:	e003      	b.n	80097d4 <LoopCopyDataInit>

080097cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80097cc:	4b0c      	ldr	r3, [pc, #48]	; (8009800 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80097ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80097d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80097d2:	3104      	adds	r1, #4

080097d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80097d4:	480b      	ldr	r0, [pc, #44]	; (8009804 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80097d6:	4b0c      	ldr	r3, [pc, #48]	; (8009808 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80097d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80097da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80097dc:	d3f6      	bcc.n	80097cc <CopyDataInit>
  ldr  r2, =_sbss
 80097de:	4a0b      	ldr	r2, [pc, #44]	; (800980c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80097e0:	e002      	b.n	80097e8 <LoopFillZerobss>

080097e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80097e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80097e4:	f842 3b04 	str.w	r3, [r2], #4

080097e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80097e8:	4b09      	ldr	r3, [pc, #36]	; (8009810 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80097ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80097ec:	d3f9      	bcc.n	80097e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80097ee:	f7ff fded 	bl	80093cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80097f2:	f000 f811 	bl	8009818 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80097f6:	f7ff f8f9 	bl	80089ec <main>
  bx  lr    
 80097fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80097fc:	20010000 	.word	0x20010000
  ldr  r3, =_sidata
 8009800:	080098e0 	.word	0x080098e0
  ldr  r0, =_sdata
 8009804:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009808:	200002e8 	.word	0x200002e8
  ldr  r2, =_sbss
 800980c:	200002e8 	.word	0x200002e8
  ldr  r3, = _ebss
 8009810:	20000db8 	.word	0x20000db8

08009814 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009814:	e7fe      	b.n	8009814 <ADC_IRQHandler>
	...

08009818 <__libc_init_array>:
 8009818:	b570      	push	{r4, r5, r6, lr}
 800981a:	4e0d      	ldr	r6, [pc, #52]	; (8009850 <__libc_init_array+0x38>)
 800981c:	4c0d      	ldr	r4, [pc, #52]	; (8009854 <__libc_init_array+0x3c>)
 800981e:	1ba4      	subs	r4, r4, r6
 8009820:	10a4      	asrs	r4, r4, #2
 8009822:	2500      	movs	r5, #0
 8009824:	42a5      	cmp	r5, r4
 8009826:	d109      	bne.n	800983c <__libc_init_array+0x24>
 8009828:	4e0b      	ldr	r6, [pc, #44]	; (8009858 <__libc_init_array+0x40>)
 800982a:	4c0c      	ldr	r4, [pc, #48]	; (800985c <__libc_init_array+0x44>)
 800982c:	f000 f834 	bl	8009898 <_init>
 8009830:	1ba4      	subs	r4, r4, r6
 8009832:	10a4      	asrs	r4, r4, #2
 8009834:	2500      	movs	r5, #0
 8009836:	42a5      	cmp	r5, r4
 8009838:	d105      	bne.n	8009846 <__libc_init_array+0x2e>
 800983a:	bd70      	pop	{r4, r5, r6, pc}
 800983c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009840:	4798      	blx	r3
 8009842:	3501      	adds	r5, #1
 8009844:	e7ee      	b.n	8009824 <__libc_init_array+0xc>
 8009846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800984a:	4798      	blx	r3
 800984c:	3501      	adds	r5, #1
 800984e:	e7f2      	b.n	8009836 <__libc_init_array+0x1e>
 8009850:	080098d8 	.word	0x080098d8
 8009854:	080098d8 	.word	0x080098d8
 8009858:	080098d8 	.word	0x080098d8
 800985c:	080098dc 	.word	0x080098dc

08009860 <memcpy>:
 8009860:	b510      	push	{r4, lr}
 8009862:	1e43      	subs	r3, r0, #1
 8009864:	440a      	add	r2, r1
 8009866:	4291      	cmp	r1, r2
 8009868:	d100      	bne.n	800986c <memcpy+0xc>
 800986a:	bd10      	pop	{r4, pc}
 800986c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009874:	e7f7      	b.n	8009866 <memcpy+0x6>

08009876 <memset>:
 8009876:	4402      	add	r2, r0
 8009878:	4603      	mov	r3, r0
 800987a:	4293      	cmp	r3, r2
 800987c:	d100      	bne.n	8009880 <memset+0xa>
 800987e:	4770      	bx	lr
 8009880:	f803 1b01 	strb.w	r1, [r3], #1
 8009884:	e7f9      	b.n	800987a <memset+0x4>

08009886 <strcpy>:
 8009886:	4603      	mov	r3, r0
 8009888:	f811 2b01 	ldrb.w	r2, [r1], #1
 800988c:	f803 2b01 	strb.w	r2, [r3], #1
 8009890:	2a00      	cmp	r2, #0
 8009892:	d1f9      	bne.n	8009888 <strcpy+0x2>
 8009894:	4770      	bx	lr
	...

08009898 <_init>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	bf00      	nop
 800989c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989e:	bc08      	pop	{r3}
 80098a0:	469e      	mov	lr, r3
 80098a2:	4770      	bx	lr

080098a4 <_fini>:
 80098a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098a6:	bf00      	nop
 80098a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098aa:	bc08      	pop	{r3}
 80098ac:	469e      	mov	lr, r3
 80098ae:	4770      	bx	lr
